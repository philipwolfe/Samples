

<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">
  <table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">

            <div style="padding:0,0,4,0"><b>Getting Started</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/quickstart.htm">Introduction</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/whatisaspx.htm">What is ASP.NET?</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/langsupport.htm">Language Support</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Forms</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformsintro.htm">Introducing Web Forms</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webserverctrls.htm">Working with Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webtemplates.htm">Applying Styles to Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webvalidation.htm">Server Control Form Validation</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webpagelets.htm">Web Forms User Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatabinding.htm">Databinding Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdataaccess.htm">Server-Side Data Access</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatalist.htm">Data Access and Customization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/businessobjs.htm">Working with Business Objects</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webctrlauthoring.htm">Authoring Custom Controls</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/webformsandvs7.htm">Visual Studio 7.0 & Web Forms</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/webcontrolsref.htm">Web Forms Controls Reference</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformssyntaxref.htm">Web Forms Syntax Reference</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicesintro.htm">Introducing Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/writingservices.htm">Writing a Simple Web Service</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicetypes.htm">Web Service Type Marshalling</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/discoverservices.htm">Making Services Discoverable</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesanddata.htm">Using Data in Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesandobjs.htm">Using Objects and Intrinsics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/htmlscraping.htm">HTML Pattern Matching</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/applications.htm">Application Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/globalasax.htm">Using the Global.asax File</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">Managing Application State</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/httpmodules.htm">Handling HttpModule Events</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/httphandlers.htm">HttpHandlers and Factories</a><p>

<!--
            <div style="padding:0,0,4,0"><b>State Management</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">State Management Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/pageviewstate.htm">Using Page-local View State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/sessionappstate.htm">Session and Application State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/usingcookies.htm">Using Client-side Cookies</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/choosingstate.htm">Choosing a Strategy</a><p>
-->
            <div style="padding:0,0,4,0"><b>Cache Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/cachingoverview.htm">Caching Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/outputcaching.htm">Page Output Caching</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/datacaching.htm">Page Data Caching</a><p>

            <div style="padding:0,0,4,0"><b>Configuration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/configoverview.htm">Configuration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configformat.htm">Configuration File Format</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configretrieve.htm">Retrieving Configuration</a><p>

            <div style="padding:0,0,4,0"><b>Deployment</b><br></div>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/adminoverview.htm">Administration Overview</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/deployment.htm">Deploying ASP.NET Applications</a><p>

            <div style="padding:0,0,4,0"><b>Security</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/securityoverview.htm">Security Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authandauth.htm">Authentication & Authorization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/windowsauth.htm">Windows-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/formsauth.htm">Forms-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authorization.htm">Authorizing Users and Roles</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/impersonation.htm">User Account Impersonation</a><p>

            <div style="padding:0,0,4,0"><b>Localization</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/internationalization.htm">Internationalization Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cultureencoding.htm">Setting Culture and Encoding</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/localizingapps.htm">Localizing ASP.NET Applications</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/resourcefiles.htm">Working with Resource Files</a><p>

            <div style="padding:0,0,4,0"><b>Tracing</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracingoverview.htm">Tracing Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogpage.htm">Trace Logging to Page Output</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogapp.htm">Application-level Trace Logging</a><p>

            <div style="padding:0,0,4,0"><b>Debugging</b><br></div>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debuggingoverview.htm">Debugging Overview</a><br>
-->
            &nbsp; <a class="outer" href="../../aspplus/doc/debugcomsdk.htm">The SDK Debugger</a><p>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debugvisualstudio.htm">The Visual Studio 7 Debugger</a><p>
-->

<!--
            <div style="padding:0,0,4,0"><b>Performance</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfoverview.htm">Performance Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfcounters.htm">Using Performance Counters</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perftuning.htm">Performance Tuning Tips</a><p>

            <div style="padding:0,0,4,0"><b>ASP to ASP.NET Migration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/migrationoverview.htm">Migration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/syntaxandsemantics.htm">Syntax and Semantics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/languagecompat.htm">Language Compatibility</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cominterop.htm">COM Interoperability</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/mtstransactions.htm">MTS Transactions</a><p>
-->
            <div style="padding:0,0,4,0"><b>Sample Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/portalapp.htm">A Personalized Portal</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ecommerceapp.htm">An E-Commerce Storefront</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/classbrowser.htm">A Class Browser Application</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ibuyspy.htm">IBuySpy.com</a><p>

</div>

</td>
</tr>
</table>
</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<h4>Working With Business Objects</h4>
<p>


<div class="indent" style="font-family:Verdana; font-size:8pt;">
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b><a class="toc2" href="#bindir">The Application /Bin Directory</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b><a class="toc2" href="#importing">Importing Business Objects</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b><a class="toc2" href="#twotier">A Simple Two-Tier Web Form</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b><a class="toc2" href="#threetier">A Simple Three-Tier Web Form</a><br>
</div>

<p>
<hr>

Encapsulating logic in business components is an essential part of any real-world application, web-based or otherwise.  In ASP.NET, business
objects are the building blocks for multi-tiered web applications, such as those with a layer for data access or common application rules.
In this section we demonstrate how to write some simple components and include them in your application's Web Form pages.
<p>

<!--BEGIN SECTION-->
<a name="bindir">
<span class="subhead">The Application /Bin Directory</span>
<p>
A problem with using the classic COM model for web application components is that those components must be registered (typically 
using the regsvr32 utility) before they can be used from a traditional ASP application.  Remote administration of these types of 
applications is often not possible, because the registration utility must be run locally on the server.  To make matters more difficult,
these components remain locked on disk once they are loaded by an application, and the entire web server must be stopped before
these components can be replaced or removed.
<p>
ASP.NET attempts to solve these problems by allowing components to be placed in a well-known directory, to be automatically found
at run-time.  This well-known directory is always named <b>/bin</b>, and is located immediately under the root directory for the 
application (a virtual directory defined by IIS).  The benefit is that no registration is required to make components available to the 
ASP.NET application -- components may be deployed by simply copying to the /bin dir or performing an FTP file transfer.
<p>
In addition to providing a zero-registration way to deploy compiled components, ASP.NET does not require these components to remain
locked on disk at runtime.  Behind the scenes, ASP.NET duplicates the assemblies found in /bin and loads these "shadow-copies" instead.  
The original components may be replaced even while the web server is still running, and changes to the /bin directory are automatically 
picked up by the runtime.  When a change is detected, ASP.NET will gracefully allow currently executing requests to complete, and direct
all new incoming requests to the application which uses the new component(s).


<!--BEGIN SECTION-->
<br>
<a name="importing">
<br>
<span class="subhead">Importing Business Objects</span>
<p>
At its most basic level, a business component is just a class which can be instantiated from a Web Form which imports it.  In this 
example, we define a simple HelloWorld class.  Our class has one public constructor (which is executed when the class is first 
instantiated), a single String property called "FirstName", and a "SayHello" method which prints a greeting using the value of the 
FirstName property.
<p>

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl7" style="display:none">

using System;
using System.Text;

namespace HelloWorld {
  public class HelloObj {
    private String _name;

    public HelloObj() {
        _name = null;      
        
    }

    public String FirstName {
      get {
        return _name;
      }
      set {
        _name = value;
      }
    }

    public String SayHello() {
      StringBuilder sb = new StringBuilder("Hello ");
      if (_name != null)
         sb.Append(_name);
      else
         sb.Append("World");
         
      sb.Append("!");
      return sb.ToString();
    }
  }
}
</pre>
<pre id="codectrl7" style="display:">

Imports System
Imports System.Text

Namespace HelloWorld 
  Public Class HelloObj 
    Private _name As String

    Public Sub New
      MyBase.New()
      _name = Nothing
    End Sub

    Public Property FirstName As String
      Get
        Return(_name)
      End get
      Set
        _name = value
       End Set
    End Property

    Public Function SayHello() As String
      Dim sb As New StringBuilder("Hello ")
      If (_name <> Nothing) Then
         sb.Append(_name)
      Else
         sb.Append("World")
      End If
      sb.Append("!")
      Return(sb.ToString())
    End Function
  End Class
End Namespace
</pre>
<pre id="codectrl7" style="display:none">

import System;
import System.Text;

package HelloWorld {
  public class HelloObj {
    private var _name:String;

    public function HelloObj() {
        _name = null;      

    }

    public function get FirstName() : String
    {
        return _name;
    }
    public function set FirstName(value:String) : void
    {
        _name = value;
    }

    public function SayHello() : String {
      sb:StringBuilder = new StringBuilder("Hello ");
      if (_name != null)
         sb.Append(_name);
      else
         sb.Append("World");
         
      sb.Append("!");
      return sb.ToString();
    }
  }
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl7" onclick="doClick(0, 'ctrl7')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl7" onclick="doClick(1, 'ctrl7')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl7" onclick="doClick(2, 'ctrl7')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>
To compile this class, we run the C# compiler (csc.exe) from the command-line.  The <b>/t</b> option tells the compiler we want to 
build a library (dll), and the <b>/out</b> option tells the compiler where to place the resulting assembly.  In this case, the /bin 
directory for our application is directly under the "aspplus" vroot of this tutorial, and we assume here that we are running this command
from the sample directory, ie: ...\QuickStart\AspPlus\Samples\WebForms\busobjs.
<p>

<div class="code"><pre>
csc /t:library /out:..\..\..\bin\HelloObj.dll HelloObj.cs
</pre></div>

<p>For Visual Basic, the equivalent compilation command is:<p>
<div class="code"><pre>
vbc /t:library /out:..\..\..\..\bin\HelloObjVB.dll HelloObj.vb
</pre></div>

<p>For JScript, the equivalent compilation command is:<p>
<div class="code"><pre>
jsc /out:..\..\..\..\bin\HelloObjJS.dll HelloObj.js
</pre></div>

<p>
The component is now available to any Web Form in the application that wishes to use it.  The following HelloObj.htm example illustrates 
this:
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/helloobj.gif"><br>
	</a>
	<div class="caption">HelloObj.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/busobjs/helloobjaspxsource.htm">View Source</a>]
	
	
	</div>


  </span>


<p>
Note the following Import directive at the top of the page that specifies the namespace to include.  Once the namespace is included using this directive,
 the class may be used from within the Web Form.  Because the assembly is pre-loaded by the ASP.NET runtime, only
a simple namespace import is required to make the component available.
<p>

<div class="code"><pre>
&lt;%@ Import Namespace="HelloWorld" %&gt;
</pre></div>

<p>
By default, ASP.NET loads all assemblies from the /bin directory when the application is started.  The assemblies to load are specifed via 
the configuration system (see the <a href="configoverview.htm">Configuration Overview</a> section for more detail).  Additional
assemblies may be imported into an application using configuration as well.  For example:
<p>

<div class="code"><pre>
&lt;configuration&gt;
    &lt;compilation&gt;
        &lt;assemblies&gt;
            &lt;!--The following assemblies are loaded explicitly from the global cache--&gt;
            &lt;add assembly="System.Data"/&gt;
            &lt;add assembly="System.Web.Services"/&gt;
            &lt;add assembly="System.Drawing"/&gt;
            &lt;!--This tells ASP.NET to load all assemblies from /bin--&gt;
            &lt;add assembly="*"/&gt; 
        &lt;/assemblies&gt;
    &lt;/compilation&gt;
&lt;/configuration&gt;
</pre></div>

<b>Note: </b> Each assembly loaded from /bin is limited in scope to the application in which it is running. This means that peer applications could 
potentially use different assemblies with the same class or namespace names, without conflicting. 

<!--BEGIN SECTION-->
<br>
<a name="twotier">
<br>
<span class="subhead">A Simple Two-Tier Web Form</span>
<p>

The classic use for an external component is to perform data access.  This simplifies the code in your page, improving readability and 
separating your user interface (UI) logic from the backend functionality.  The following example demonstrates a simple 
two-tiered Web Form using a data access component to retrieve product information.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/twotier.gif"><br>
	</a>
	<div class="caption">TwoTier.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/busobjs/twotieraspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>
The data access component takes a single parameter to its constructor specifying the connection string to the product database.
The Web Form calls the component's GetCategories method to populate a dropdown list, and calls the component's GetProductsForCategory
method to display the products for the category selected by the user.

<!--BEGIN SECTION-->
<br>
<a name="threetier">
<br>
<span class="subhead">A Simple Three-Tier Web Form</span>
<p>
A three-tiered application model extends the two-tiered scenario to include business rules between the UI and data access logic.  This 
model allows UI developers to work with a higher level of abstraction rather than directly manipulating data through low-level data 
access component APIs.  The middle business component typically enforces business rules and ensures that the relationships and 
primary key restraints of the database are honored.  In our simple example, the middle component calculates a discount based on 
a two-digit Vendor ID entered by the client.

<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/threetier.gif"><br>
	</a>
	<div class="caption">ThreeTier.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/busobjs/threetieraspxsource.htm">View Source</a>]
	
	
	</div>


  </span>


<!--BEGIN SECTION-->
<a name="endofsection">

<h4>Section Summary</h4>
<ol>
<li>The ASP.NET runtime finds business objects (local assemblies) in a well-known /bin directory, directly under the application root. The /bin directory offers the following advantages: <p>
<ul>
<li><b>No Registration Required.</b> No registration is required to make an assembly available to pages in the application. It is available by virtue of its location in the /bin directory. Compiled code can be deployed by simply copying or FTP'ing to this location. 
<li><b>No Server Restart Required.</b> When any part of an ASP.NET application is changed (for example, replacing a .dll in /bin), new requests immediately begin execution against the changed file(s). Currently executing requests are allowed to complete before the old application is gracefully torn down. The web server does not require a restart when you change your application, even when replacing compiled code. 
<li><b>No Namespace Conflicts.</b> Each assembly loaded from /bin is limited in scope to the application in which it is running. This means that peer applications could potentially use different assemblies with the same class or namespace names, without conflicting. 
</ul>
<p>
<li>Classes in an assembly are made available to a page in the application using an Import directive within the aspx file. 
<li>Two-tiered applications simplify the code in a page, improving readability and separating user interface (UI) logic 
from backend functionality.
<li>Three-tiered applications extend the two-tiered model to enable UI developers to work with a higher level of abstraction. The middle 
business component typically enforces business rules and ensures that the relationships and primary key restraints of the database are 
honored.
</ol>
<p>

<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->