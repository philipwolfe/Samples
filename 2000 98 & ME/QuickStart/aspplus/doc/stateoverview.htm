

<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">
  <table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">

            <div style="padding:0,0,4,0"><b>Getting Started</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/quickstart.htm">Introduction</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/whatisaspx.htm">What is ASP.NET?</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/langsupport.htm">Language Support</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Forms</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformsintro.htm">Introducing Web Forms</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webserverctrls.htm">Working with Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webtemplates.htm">Applying Styles to Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webvalidation.htm">Server Control Form Validation</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webpagelets.htm">Web Forms User Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatabinding.htm">Databinding Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdataaccess.htm">Server-Side Data Access</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatalist.htm">Data Access and Customization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/businessobjs.htm">Working with Business Objects</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webctrlauthoring.htm">Authoring Custom Controls</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/webformsandvs7.htm">Visual Studio 7.0 & Web Forms</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/webcontrolsref.htm">Web Forms Controls Reference</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformssyntaxref.htm">Web Forms Syntax Reference</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicesintro.htm">Introducing Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/writingservices.htm">Writing a Simple Web Service</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicetypes.htm">Web Service Type Marshalling</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/discoverservices.htm">Making Services Discoverable</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesanddata.htm">Using Data in Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesandobjs.htm">Using Objects and Intrinsics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/htmlscraping.htm">HTML Pattern Matching</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/applications.htm">Application Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/globalasax.htm">Using the Global.asax File</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">Managing Application State</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/httpmodules.htm">Handling HttpModule Events</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/httphandlers.htm">HttpHandlers and Factories</a><p>

<!--
            <div style="padding:0,0,4,0"><b>State Management</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">State Management Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/pageviewstate.htm">Using Page-local View State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/sessionappstate.htm">Session and Application State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/usingcookies.htm">Using Client-side Cookies</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/choosingstate.htm">Choosing a Strategy</a><p>
-->
            <div style="padding:0,0,4,0"><b>Cache Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/cachingoverview.htm">Caching Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/outputcaching.htm">Page Output Caching</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/datacaching.htm">Page Data Caching</a><p>

            <div style="padding:0,0,4,0"><b>Configuration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/configoverview.htm">Configuration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configformat.htm">Configuration File Format</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configretrieve.htm">Retrieving Configuration</a><p>

            <div style="padding:0,0,4,0"><b>Deployment</b><br></div>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/adminoverview.htm">Administration Overview</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/deployment.htm">Deploying ASP.NET Applications</a><p>

            <div style="padding:0,0,4,0"><b>Security</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/securityoverview.htm">Security Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authandauth.htm">Authentication & Authorization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/windowsauth.htm">Windows-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/formsauth.htm">Forms-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authorization.htm">Authorizing Users and Roles</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/impersonation.htm">User Account Impersonation</a><p>

            <div style="padding:0,0,4,0"><b>Localization</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/internationalization.htm">Internationalization Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cultureencoding.htm">Setting Culture and Encoding</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/localizingapps.htm">Localizing ASP.NET Applications</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/resourcefiles.htm">Working with Resource Files</a><p>

            <div style="padding:0,0,4,0"><b>Tracing</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracingoverview.htm">Tracing Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogpage.htm">Trace Logging to Page Output</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogapp.htm">Application-level Trace Logging</a><p>

            <div style="padding:0,0,4,0"><b>Debugging</b><br></div>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debuggingoverview.htm">Debugging Overview</a><br>
-->
            &nbsp; <a class="outer" href="../../aspplus/doc/debugcomsdk.htm">The SDK Debugger</a><p>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debugvisualstudio.htm">The Visual Studio 7 Debugger</a><p>
-->

<!--
            <div style="padding:0,0,4,0"><b>Performance</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfoverview.htm">Performance Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfcounters.htm">Using Performance Counters</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perftuning.htm">Performance Tuning Tips</a><p>

            <div style="padding:0,0,4,0"><b>ASP to ASP.NET Migration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/migrationoverview.htm">Migration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/syntaxandsemantics.htm">Syntax and Semantics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/languagecompat.htm">Language Compatibility</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cominterop.htm">COM Interoperability</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/mtstransactions.htm">MTS Transactions</a><p>
-->
            <div style="padding:0,0,4,0"><b>Sample Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/portalapp.htm">A Personalized Portal</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ecommerceapp.htm">An E-Commerce Storefront</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/classbrowser.htm">A Class Browser Application</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ibuyspy.htm">IBuySpy.com</a><p>

</div>

</td>
</tr>
</table>
</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<h4>Managing Application State</h4>


<div class="indent" style="font-family:Verdana; font-size:8pt;">
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#applicationstate">Using Application State</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#sessionstate">Using Session State</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#cookies">Using Client-Side Cookies</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#viewstate">Using View State</a><br>
</div>

<p>
<hr>

<!--BEGIN SECTION-->
<a name="applicationstate">
<span class="subhead">Using Application State</span>
<p>
This sample illustrates the use of Application State to read a data set in 
<b>Application_Start</b>.
<p>
<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/application2.gif"><br>
	</a>
	<div class="caption">Application2.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/apps/application2/globalasaxsource.htm">View Source</a>]
	
	
	</div>


  </span>
<p>

As an Application and all the objects it stores should be concurrently accessed
by different threads, it is better to store only infrequently modified data with
application scope. Ideally an object is initalized in the Application_Start event
and further on access is read-only.
<p>

In this sample a file is read in Application_Start (defined in the global.asax file)
and the content is stored in a <b>DataView</b> object in the application state:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl7" style="display:none">

void Application_Start() {
    DataSet ds = new DataSet();

    FileStream fs = new FileStream(Server.MapPath("schemadata.xml"),FileMode.Open,FileAccess.Read);
    StreamReader reader = new StreamReader(fs);
    ds.ReadXml(reader);
    fs.Close();

    DataView view = new DataView(ds.Tables[0]);
    Application["Source"] = view;
}
</pre>
<pre id="codectrl7" style="display:">

Sub Application_Start() 
    Dim ds As New DataSet()

    Dim fs As New FileStream(Server.MapPath("schemadata.xml"),FileMode.Open,FileAccess.Read)
    Dim reader As New StreamReader(fs)
    ds.ReadXml(reader)
    fs.Close()

    Dim view As New DataView (ds.Tables(0))
    Application("Source") = view
End Sub
</pre>
<pre id="codectrl7" style="display:none">

function Application_Start() : void {
    var ds:DataSet = new DataSet();

    var fs:FileStream = new FileStream(Server.MapPath("schemadata.xml"),FileMode.Open,FileAccess.Read);
    var reader:StreamReader = new StreamReader(fs);
    ds.ReadXml(reader);
    fs.Close();

    var view:DataView = new DataView(ds.Tables[0]);
    Application("Source") = view;
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl7" onclick="doClick(0, 'ctrl7')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl7" onclick="doClick(1, 'ctrl7')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl7" onclick="doClick(2, 'ctrl7')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>

In the <b>Page_Load</b> event the DataView is then retrieved and used to populate a DataGrid object:
<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl9" style="display:none">

void Page_Load(Object Src, EventArgs E) {
    DataView Source = (DataView)(Application["Source"]);
    ...
    MyDataGrid.DataSource = Source;
    ...
}
</pre>
<pre id="codectrl9" style="display:">

Sub Page_Load(Src As Object, E As EventArgs) 
    Dim Source As New DataView  = CType(Application("Source"), DataView)
    ...
    MyDataGrid.DataSource = Source
    ...
End Sub
</pre>
<pre id="codectrl9" style="display:none">

function Page_Load(Src:Object, E:EventArgs) : void {
    var Source:DataView = DataView((Application("Source")));
    ...
    MyDataGrid.DataSource = Source;
    ...
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl9" onclick="doClick(0, 'ctrl9')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl9" onclick="doClick(1, 'ctrl9')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl9" onclick="doClick(2, 'ctrl9')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>

The advantage of this solution is that only the first request pays the price of retrieving
the data. All subsequent requests will use the already existing DataView object. As the
data is never modified after initialization, no provisions for serializing access have to
be taken.
<p>



<!--BEGIN SECTION-->
<a name="sessionstate">
<span class="subhead">Using Session State</span>
<p>

This sample illustrates the use of session state to store volatile user preferences.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/session1.gif"><br>
	</a>
	<div class="caption">Session1.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/apps/session1/globalasaxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>

To provide individual data for a user during a session, data can be stored
with session scope. In this sample values for user preferences are initialized
in the <b>Session_Start</b> event in the global.asax file. On the 
customization page they are modified in the <b>Submit_Click</b> event handler according 
to the user input.
<p>

File global.asax:
<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl13" style="display:none">

void Session_Start() {
    Session["BackColor"] = "beige";
    ...  
}
</pre>
<pre id="codectrl13" style="display:">

Sub Session_Start() 
    Session("BackColor") = "beige"
    ...  
End Sub
</pre>
<pre id="codectrl13" style="display:none">

function Session_Start() : void {
    Session("BackColor") = "beige";
    ...  
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl13" onclick="doClick(0, 'ctrl13')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl13" onclick="doClick(1, 'ctrl13')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl13" onclick="doClick(2, 'ctrl13')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

File customize.htm:
<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl15" style="display:none">

protected void Submit_Click(Object sender, EventArgs E) {
    Session["BackColor"] = BackColor.Value;
    ...
  
    Response.Redirect(State["Referer"].ToString());
}
</pre>
<pre id="codectrl15" style="display:">

Protected Sub Submit_Click(sender As Object, E As EventArgs)
    Session("BackColor") = BackColor.Value
    ...
  
    Response.Redirect(State("Referer").ToString())
End Sub
</pre>
<pre id="codectrl15" style="display:none">

protected function Submit_Click(sender:Object, E:EventArgs) : void {
    Session("BackColor") = BackColor.Value;
    ...
  
    Response.Redirect(State("Referer").ToString());
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl15" onclick="doClick(0, 'ctrl15')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl15" onclick="doClick(1, 'ctrl15')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl15" onclick="doClick(2, 'ctrl15')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>

The individual values are retrieved via the GetStyle method:
<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl17" style="display:none">

protected String GetStyle(String key) {
    return Session[key].ToString();       
}
</pre>
<pre id="codectrl17" style="display:">

Protected GetStyle(key As String) As String
    Return(Session(key).ToString())
End Sub
</pre>
<pre id="codectrl17" style="display:none">

protected function GetStyle(key:String) : String {
    return Session(key).ToString();       
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl17" onclick="doClick(0, 'ctrl17')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl17" onclick="doClick(1, 'ctrl17')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl17" onclick="doClick(2, 'ctrl17')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

The GetStyle method is used to construct session specific styles:
<div class="code"><pre>
&lt;style&gt;
    body 
    {
      font: &lt;%=GetStyle("FontSize")%&gt; &lt;%=GetStyle("FontName")%&gt;;
      background-color: &lt;%=GetStyle("BackColor")%&gt;;
    }
    a 
    { 
        color: &lt;%=GetStyle("LinkColor")%&gt; 
    }
&lt;/style&gt;
</pre></div>
<p>

To verify that the values are really stored with session scope, 
open the sample page twice, and change one value in the first
browser window and refresh the second one. The second window
picks up the changes because both browser instances share a 
common Session object.
<p>

<b>Configuring session state:</b> 
Session state features can be configured via the "&lt;sessionstate&gt;" 
section in a config.web file. To double the default timeout of 
20 minutes the following can be added to the config.web of an
application:
<div class="code"><xmp>
<sessionstate 
  timeout="40" 
/>
</xmp></div>

<p>
By default ASP.NET uses cookies to identify requests, which belong to
one session. If cookies are not available, a session can be tracked
by adding a session identifier to the URL. This can be enabled by:
<div class="code"><xmp>
<sessionstate 
  cookieless="true" 
/>
</xmp></div>

<p>
By default ASP.NET will store the session state in the same process, 
which processes the request, just like ASP. Additionally ASP.NET can
store session data in an external process, which can even reside
on another machine. To enable this feature
<ul>
<li>start the aspstate service, either via the Services snap-in or by
executing "net start aspstate" on the command line. The state service
will by default listen on port 42424, to change the port modify the
registry key for the service:
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\aspstate\Parameters\Port
<li>set the "inproc" attribute of the sessionstate section to "false",
<li>configure the "server" and "port" attributes with the values of the
machine, on which you started aspstate.
</ul>

The following sample section assumes that the state service is running
on the same machine as the web server ("localhost") and uses the default
port ("42424"):
<div class="code"><xmp>
<sessionstate 
  inproc="false" 
  server="localhost" 
  port="42424" 
/>
</xmp></div> 

Note, that, if you try the sample above with this setting, you can reset
the web server (enter "iisreset" on the command line) and the session state
value survives.
<p>



<!--BEGIN SECTION-->
<a name="cookies">
<span class="subhead">Using Client-Side Cookies</span>
<p>
This sample illustrates the use of client-side cookies to store volatile user preferences.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/cookies1.gif"><br>
	</a>
	<div class="caption">Cookies1.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/apps/cookies1/cookies1aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>
<p>

Storing cookies on the client is one of the methods the ASP.NET's session 
state uses to associate requests with sessions. Cookies can also be used
directly to persist data between requests, but the data is then stored
on the client and sent to the server with every request. Browsers place
limits on the size of a cookie, only a minimum of 4096 bytes is guaranteed
to be acceptable.
<p>

As the data is stored on the client, the Page_Load method in the file 
cookies1.htm checks if the client has sent a cookie. If not, a new
cookie is created and initialized and stored on the client:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl21" style="display:none">

protected void Page_Load(Object sender, EventArgs E) {
    if (Request.Cookies["preferences1"] == null) {
        HttpCookie cookie = new HttpCookie("preferences1");
        cookie.Values.Add("ForeColor", "black");
        ...
        Response.AppendCookie(cookie);
    }
}
</pre>
<pre id="codectrl21" style="display:">

Protected Sub Page_Load(sender As Object, E As EventArgs) 
    If Request.Cookies("preferences1") = Null Then
        Dim cookie As New HttpCookie("preferences1")
        cookie.Values.Add("ForeColor", "black")
        ...
        Response.AppendCookie(cookie)
    End If
End Sub
</pre>
<pre id="codectrl21" style="display:none">

protected function Page_Load(sender:Object, E:EventArgs) : void {
    if (Request.Cookies("preferences1") == null) {
        var cookie:HttpCookie = new HttpCookie("preferences1");
        cookie.Values.Add("ForeColor", "black");
        ...
        Response.AppendCookie(cookie);
    }
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl21" onclick="doClick(0, 'ctrl21')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl21" onclick="doClick(1, 'ctrl21')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl21" onclick="doClick(2, 'ctrl21')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>

On the same page a GetStyle method is used again to provide 
the individual values stored in the cookie:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl23" style="display:none">

protected String GetStyle(String key) {
  HttpCookie cookie = Request.Cookies["preferences1"];
  if (cookie != null) {
    switch (key)
    {
      case "ForeColor" : return cookie.Values["ForeColor"]; break;
      ...
    }
  }
  return "";
}
</pre>
<pre id="codectrl23" style="display:">

Protected Function GetStyle(key As String) As String
  Dim cookie As HttpCookie = Request.Cookies("preferences1")
  If cookie <> Null Then
    Select Case key
      Case "ForeColor"
        Return(cookie.Values("ForeColor"))
      Case ...
    End Select
  End If
  Return("")
End Function
</pre>
<pre id="codectrl23" style="display:none">

protected function GetStyle(key:String) : String {
  var cookie:HttpCookie = Request.Cookies("preferences1");
  if (cookie != null) {
    switch (key)
    {
      case "ForeColor" : return cookie.Values("ForeColor"); break;
      ...
    }
  }
  return "";
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl23" onclick="doClick(0, 'ctrl23')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl23" onclick="doClick(1, 'ctrl23')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl23" onclick="doClick(2, 'ctrl23')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>

Verify that the sample works by opening the cookies1.htm page and modifying
the preferences. Open the page in another window, it should pick up the new
preferences. Close all browser windows and open the cookies1.htm page again,
this should delete the temporary cookie.
The preferences have their default values again.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/cookies2.gif"><br>
	</a>
	<div class="caption">Cookies2.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/apps/cookies2/cookies2aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>

To make a cookie persistent between session, the <b>Expires</b> property on 
the <b>HttpCookie</b> class has to be set to a date in the future. The following
code on the customization.htm page is identical to the previous sample, 
with the exception of the assignment to cookie.Expires:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl27" style="display:none">

protected void Submit_Click(Object sender, EventArgs E) {
    HttpCookie cookie = new HttpCookie("preferences2");
    cookie.Values.Add("ForeColor",ForeColor.Value);
    ...
    cookie.Expires = DateTime.MaxValue; // Never Expires

    Response.AppendCookie(cookie);

    Response.Redirect(State["Referer"].ToString());
}
</pre>
<pre id="codectrl27" style="display:">

Protected Sub Submit_Click(sender As Object, E As EventArgs)
    Dim cookie As New HttpCookie("preferences2")
    cookie.Values.Add("ForeColor",ForeColor.Value)
    ...
    cookie.Expires = DateTime.MaxValue ' Never Expires

    Response.AppendCookie(cookie)

    Response.Redirect(State("Referer").ToString())
End Sub
</pre>
<pre id="codectrl27" style="display:none">

protected function Submit_Click(sender:Object, E:EventArgs) : void {
    var cookie:HttpCookie = new HttpCookie("preferences2");
    cookie.Values.Add("ForeColor",ForeColor.Value);
    ...
    cookie.Expires = DateTime.MaxValue; // Never Expires

    Response.AppendCookie(cookie);

    Response.Redirect(State("Referer").ToString());
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl27" onclick="doClick(0, 'ctrl27')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl27" onclick="doClick(1, 'ctrl27')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl27" onclick="doClick(2, 'ctrl27')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

Verify that the sample is working, by modifying a value, closing all browser
windows and opening cookies2.htm again. The window should still show the 
customized value.
<p>

<!--BEGIN SECTION-->
<a name="viewstate">
<span class="subhead">Using View State</span>
<p>
This sample illustrates the use of the view state to store request specific values.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/pagestate1.gif"><br>
	</a>
	<div class="caption">PageState1.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/apps/pagestate1aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>
<p>

ASP.NET provides the server-side notion of a view state for each control. A control can save its
internal state between requests via the property State, an instance of the class StateBag. The
Statebag class provides a dictionary like interface to store objects associated with a string key.
<p>

The file pagestate1.htm displays one visible panel and stores the index of it in the view 
state of the page with the key "PanelIndex":
<p>
<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl31" style="display:none">

protected void Next_Click(Object Src, EventArgs E ) {
    String PrevPanelId = "Panel" + State["PanelIndex"].ToString();
    State["PanelIndex"] = (int)State["PanelIndex"] + 1;
    String PanelId = "Panel" + State["PanelIndex"].ToString();
    ...
}
</pre>
<pre id="codectrl31" style="display:">

Protected Sub Next_Click(Src As Object, E As EventArgs)
    Dim PrevPanelId As String = "Panel" + State("PanelIndex").ToString()
    State("PanelIndex") = CType(State("PanelIndex") + 1, Integer)
    Dim PanelId As String = "Panel" + State("PanelIndex").ToString()
    ...
End Sub
</pre>
<pre id="codectrl31" style="display:none">

protected function Next_Click(Src:Object, E:EventArgs) : void {
    var PrevPanelId:String = "Panel" + State("PanelIndex").ToString();
    State("PanelIndex") = int(State("PanelIndex") + 1);
    var PanelId:String = "Panel" + State("PanelIndex").ToString();
    ...
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl31" onclick="doClick(0, 'ctrl31')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl31" onclick="doClick(1, 'ctrl31')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl31" onclick="doClick(2, 'ctrl31')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

Note, that if you open the page several browser windows, each window initially shows the
name panel. Also each window can independently navigate between the panels.


<h4>Section Summary</h4>
<ol>
<li>Store data in application state variables, which is modified infrequently, but used often.
<li>Store data in session state variables, which is specific to one session/user. 
The data is stored entirely on the server. Use it for short-lived, bulky and/or sensitive data.
<li>Store small amounts of volatile data in a non-persistent cookie. The data is stored on the 
client, sent on each request to the server and expires when the client ends execution.
<li>Store small amounts of non-volatile data in a persistent cookie. The data is stored on the
client until it expires and sent on each request to the server.
<li>Store small amounts of request-specific data in the view state. The data is sent from the server
to the client and back.
</ol>
<p>


<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->