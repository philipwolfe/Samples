


<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">
  <table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">

            <div style="padding:0,0,4,0"><b>Getting Started</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/quickstart.htm">Introduction</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/whatisaspx.htm">What is ASP.NET?</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/langsupport.htm">Language Support</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Forms</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformsintro.htm">Introducing Web Forms</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webserverctrls.htm">Working with Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webtemplates.htm">Applying Styles to Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webvalidation.htm">Server Control Form Validation</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webpagelets.htm">Web Forms User Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatabinding.htm">Databinding Server Controls</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdataaccess.htm">Server-Side Data Access</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webdatalist.htm">Data Access and Customization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/businessobjs.htm">Working with Business Objects</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webctrlauthoring.htm">Authoring Custom Controls</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/webformsandvs7.htm">Visual Studio 7.0 & Web Forms</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/webcontrolsref.htm">Web Forms Controls Reference</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webformssyntaxref.htm">Web Forms Syntax Reference</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicesintro.htm">Introducing Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/writingservices.htm">Writing a Simple Web Service</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/webservicetypes.htm">Web Service Type Marshalling</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/discoverservices.htm">Making Services Discoverable</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesanddata.htm">Using Data in Web Services</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/servicesandobjs.htm">Using Objects and Intrinsics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/htmlscraping.htm">HTML Pattern Matching</a><p>

            <div style="padding:0,0,4,0"><b>ASP.NET Web Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/applications.htm">Application Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/globalasax.htm">Using the Global.asax File</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">Managing Application State</a><br>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/httpmodules.htm">Handling HttpModule Events</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/httphandlers.htm">HttpHandlers and Factories</a><p>

<!--
            <div style="padding:0,0,4,0"><b>State Management</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/stateoverview.htm">State Management Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/pageviewstate.htm">Using Page-local View State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/sessionappstate.htm">Session and Application State</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/usingcookies.htm">Using Client-side Cookies</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/choosingstate.htm">Choosing a Strategy</a><p>
-->
            <div style="padding:0,0,4,0"><b>Cache Services</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/cachingoverview.htm">Caching Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/outputcaching.htm">Page Output Caching</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/datacaching.htm">Page Data Caching</a><p>

            <div style="padding:0,0,4,0"><b>Configuration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/configoverview.htm">Configuration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configformat.htm">Configuration File Format</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/configretrieve.htm">Retrieving Configuration</a><p>

            <div style="padding:0,0,4,0"><b>Deployment</b><br></div>
<!--            &nbsp; <a class="outer" href="../../aspplus/doc/adminoverview.htm">Administration Overview</a><br> -->
            &nbsp; <a class="outer" href="../../aspplus/doc/deployment.htm">Deploying ASP.NET Applications</a><p>

            <div style="padding:0,0,4,0"><b>Security</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/securityoverview.htm">Security Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authandauth.htm">Authentication & Authorization</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/windowsauth.htm">Windows-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/formsauth.htm">Forms-based Authentication</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/authorization.htm">Authorizing Users and Roles</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/impersonation.htm">User Account Impersonation</a><p>

            <div style="padding:0,0,4,0"><b>Localization</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/internationalization.htm">Internationalization Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cultureencoding.htm">Setting Culture and Encoding</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/localizingapps.htm">Localizing ASP.NET Applications</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/resourcefiles.htm">Working with Resource Files</a><p>

            <div style="padding:0,0,4,0"><b>Tracing</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracingoverview.htm">Tracing Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogpage.htm">Trace Logging to Page Output</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/tracelogapp.htm">Application-level Trace Logging</a><p>

            <div style="padding:0,0,4,0"><b>Debugging</b><br></div>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debuggingoverview.htm">Debugging Overview</a><br>
-->
            &nbsp; <a class="outer" href="../../aspplus/doc/debugcomsdk.htm">The SDK Debugger</a><p>
<!--
            &nbsp; <a class="outer" href="../../aspplus/doc/debugvisualstudio.htm">The Visual Studio 7 Debugger</a><p>
-->

<!--
            <div style="padding:0,0,4,0"><b>Performance</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfoverview.htm">Performance Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perfcounters.htm">Using Performance Counters</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/perftuning.htm">Performance Tuning Tips</a><p>

            <div style="padding:0,0,4,0"><b>ASP to ASP.NET Migration</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/migrationoverview.htm">Migration Overview</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/syntaxandsemantics.htm">Syntax and Semantics</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/languagecompat.htm">Language Compatibility</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/cominterop.htm">COM Interoperability</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/mtstransactions.htm">MTS Transactions</a><p>
-->
            <div style="padding:0,0,4,0"><b>Sample Applications</b><br></div>
            &nbsp; <a class="outer" href="../../aspplus/doc/portalapp.htm">A Personalized Portal</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ecommerceapp.htm">An E-Commerce Storefront</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/classbrowser.htm">A Class Browser Application</a><br>
            &nbsp; <a class="outer" href="../../aspplus/doc/ibuyspy.htm">IBuySpy.com</a><p>

</div>

</td>
</tr>
</table>
</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<h4>Databinding Server Controls</h4>
<p>

<div class="indent" style="font-family:Verdana; font-size:8pt;">
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#intro">Databinding Overview and Syntax</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#properties">Binding to Simple Properties</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#lists">Binding to Collections & Lists</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#expressions">Binding Expressions or Methods</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#bindereval">DataBinder.Eval()</a><br>
    <b> <img align="middle" src="../../images/bullet.gif">&nbsp;&nbsp;</b>
    <a class="toc2" href="#endofsection">Section Summary</a><br>
</div>
<p>
<hr>

<!--BEGIN SECTION-->
<a name="intro">
<span class="subhead">Databinding Overview and Syntax</span>
<p>ASP.NET introduces a new declarative data binding syntax.  This extremely flexible syntax permits the developer 
to bind not only to data sources, but also to simple properties, collections, expressions, and even results returned from 
method calls.  Here are some examples:<p>

<div class="indent">
<table class="table2" cellpadding="3">
<tr>
    <td style="width:15%"><b>Simple property</b></td>
    <td class="code" style="color:black">Customer: &lt;%# custID %&gt;</td>
</tr><tr>
    <td style="width:15%"><b>Collection</b></td>
    <td class="code" style="color:black">Orders: &lt;asp:ListBox id="List1" datasource='&lt;%# myArray %&gt;' runat="server"&gt;</td>
</tr><tr>
    <td style="width:15%"><b>Expression</b></td>
    <td class="code" style="color:black">Contact: &lt;%# ( customer.First Name + " " + customer.LastName ) %&gt;</td>
</tr><tr>
    <td style="width:15%"><b>Method result</b></td>
    <td class="code" style="color:black">Outstanding Balance: &lt;%# GetBalance(custID) %&gt;</td>
</tr>
</table>
</div>

<p>Although this syntax looks similar to the ASP shortcut for Response.Write -- <span class="code">&lt;%= %&gt;</span> -- its 
behavior is quite different.  Whereas ASP's Response.Write shortcut syntax was evaluated when the page 
was processed, the ASP.NET data binding syntax is evaluated only when the <b>DataBind()</b> method is invoked.<p>

DataBind() is a method of the <b>Page</b> and all server controls.  When you call DataBind on a parent control it 
is cascaded to all of the children of the control.  So, for example, <span class="code">DataList1.DataBind()</span> 
invokes the DataBind() method on each of the controls in the DataList's templates.  Calling DataBind on the
Page -- <span class="code">Page.DataBind()</span> or simply <span class="code">DataBind()</span> -- causes all 
data binding expressions on the page to be evaluated.  DataBind() is commonly called from the Page_Load event:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl6" style="display:none">

protected void Page_Load(Object Src, EventArgs E) {
    DataBind();
}
</pre>
<pre id="codectrl6" style="display:">

Protected Sub Page_Load(Src As Object, E As EventArgs) 
    DataBind()
End Sub
</pre>
<pre id="codectrl6" style="display:none">

protected function Page_Load(Src:Object, E:EventArgs) : void {
    DataBind();
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl6" onclick="doClick(0, 'ctrl6')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl6" onclick="doClick(1, 'ctrl6')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl6" onclick="doClick(2, 'ctrl6')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

You can use a binding expression almost anywhere in the declarative section of an ASPX page, provided it evaluates to 
the expected data type at runtime.  The simple property, expression and method examples above display text to 
the user when evaluated.  In these cases, the data binding expression must evaluate to a value of type String.  
In the collection example, the data binding expression evaluates to a value of valid type for the DataSource
property of ListBox.  You may find it necessary to coerce the type of value in your binding expression to produce 
the desired result.  For example, if <span class="code">count</span> is an integer:<p>

<div class="indent">
        <span class="code">Number of Records:  &lt;%# count.ToString() %&gt;</span>
</div>

<!--BEGIN SECTION-->
<br>
<a name="properties">
<br>
<span class="subhead">Binding to Simple Properties</span>
<p>The ASP.NET data binding syntax supports binding to public variables, properties of the Page and 
properties of other controls on the page.  

<p>This example illustrates binding to a public variable and simple property on the page.  An important thing 
to note is that these values are initialized <b>before</b> DataBind() is called.   

<p>
<!-- databinding to a prop on the page -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind1.gif"><br>
	</a>
	<div class="caption">DataBind1.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind1aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>
  
<p>This example illustrates binding to a property of another control.
<p>
<!-- databinding to a prop of another control -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind2.gif"><br>
	</a>
	<div class="caption">DataBind2.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind2aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>


<!--BEGIN SECTION-->
<br>
<a name="lists">
<br>
<span class="subhead">Binding to Collections & Lists</span>
<p>List server controls like DataGrid, ListBox and HTMLSelect use a collection as a datasource.  The following 
examples illustrate binding to usual Common Language Runtime collection types.  These controls can bind only to 
collections that support the <b>ICollection</b> interface.  
Most commonly, you'll bind to ArrayList, Hashtable, DataView and DataReader.

<p>
<p>This example illustrates binding to an ArrayList.
<p>
<!-- DataBinding to an ArrayList -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind3.gif"><br>
	</a>
	<div class="caption">DataBind3.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind3aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>This example illustrates binding to a DataView.  Note that the DataView class is defined in the System.Data 
namespace.
<p>
<!-- Databinding to a DataView -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind4.gif"><br>
	</a>
	<div class="caption">DataBind4.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind4aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>This example illustrates binding to a Hashtable.
<p>
<!-- Databinding to a Hashtable -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind5.gif"><br>
	</a>
	<div class="caption">DataBind5.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind5aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<!--BEGIN SECTION-->
<br>
<a name="expressions">
<br>
<span class="subhead">Binding Expressions or Methods</span>
<p>Many times you'll want to manipulate data before binding to your page or a control.  This example illustrates 
binding to an expression and the return value of a method.

<p>
<!-- Databinding to the return value of a function -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind7.gif"><br>
	</a>
	<div class="caption">DataBind6.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind6aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<!--BEGIN SECTION-->
<br>
<a name="bindereval">
<br>
<span class="subhead">DataBinder.Eval()</span>
<p>The ASP.NET framework supplies a static method that evaluates late-bound data binding expressions and optionally 
formats the result as a string.  DataBinder.Eval() is convenient in that it eliminates much of the explicit
casting the developer must do to coerce values to the desired data type.  It is particularly useful when 
data binding controls within a templated list, since often the both the data row and the data field 
must be cast.  

<p>Consider the following example, where an integer will be displayed as a currency string.  With the
standard ASP.NET data binding syntax, you must first cast the type of the data row in order to retrieve the
data field, IntegerValue.  Next, this is passed as an argument to the String.Format() method:

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl20" style="display:none">

&lt;%# String.Format("{0:c}", ((DataRowView)Container.DataItem)["IntegerValue"]) %&gt;
</pre>
<pre id="codectrl20" style="display:">

&lt;%# String.Format("{0:c}", (Container.DataItem.("IntegerValue") %&gt;
</pre>
<pre id="codectrl20" style="display:none">

&lt;%# String.Format("{0:c}", (DataRowView(Container.DataItem))["IntegerValue"]) %&gt;
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl20" onclick="doClick(0, 'ctrl20')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl20" onclick="doClick(1, 'ctrl20')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl20" onclick="doClick(2, 'ctrl20')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>This syntax can be complex and difficult to remember.  In contrast, DataBinder.Eval() is simply a method with 
three arguments: the naming container for the data item, the data field name, and a format string.  
In a templated list like DataList, DataGrid or Repeater the naming container is always <span class="code">
Container.DataItem.</span>  <b>Page</b> is another naming container that can be used with
DataBinder.Eval().<p>

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl22" style="display:none">

&lt;%# DataBinder.Eval(Container.DataItem, "IntegerValue", "{0:c}") %&gt;
</pre>
<pre id="codectrl22" style="display:">

&lt;%# DataBinder.Eval(Container.DataItem, "IntegerValue", "{0:c}") %&gt;
</pre>
<pre id="codectrl22" style="display:none">

&lt;%# DataBinder.Eval(Container.DataItem, "IntegerValue", "{0:c}") %&gt;
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl22" onclick="doClick(0, 'ctrl22')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl22" onclick="doClick(1, 'ctrl22')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl22" onclick="doClick(2, 'ctrl22')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>The format string argument is optional.  If it is omitted, DataBinder.Eval returns a value of type object.  For 
example:<p>

<p>
  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 3;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:55%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="4">
<pre id="codectrl24" style="display:none">

&lt;%# (bool)DataBinder.Eval(Container.DataItem, "BoolValue") %&gt;
</pre>
<pre id="codectrl24" style="display:">

&lt;%# CType(DataBinder.Eval(Container.DataItem, "BoolValue"), Boolean) %&gt;
</pre>
<pre id="codectrl24" style="display:none">

&lt;%# Boolean(DataBinder.Eval(Container.DataItem, "BoolValue")) %&gt;
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl24" onclick="doClick(0, 'ctrl24')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl24" onclick="doClick(1, 'ctrl24')">
          <b>VB
        </td>
        <td class="backtab" id="tabctrl24" onclick="doClick(2, 'ctrl24')">
          <b>JScript
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>
<p>

<p>It's important to note that DataBinder.Eval() can carry a noticeable performance penalty over the 
standard data binding syntax because it uses late-bound reflection.  Use judiciously, especially when when string 
formatting is not required.

<p>
<!-- Databinding in a templated list -->
<span>
  
  
  



<div class="indent">



	<a target="_blank" href="../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../aspplus/images/databind6.gif"><br>
	</a>
	<div class="caption">DataBind7.htm</div><br>
	
	
		[<a target="_blank" href="../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../aspplus/samples/webforms/databind/databind7aspxsource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>
<!--BEGIN SECTION-->
<a name="endofsection">

<h4>Section Summary</h4>
<ol>
<li>The ASP.NET declarative data binding syntax uses the &lt;%# %&gt; notation.
<li>You can bind to data sources, properties of the page or another control, collections, expressions, and results 
returned from method calls.
<li>List controls can bind to collection which support the ICollection interface, such as ArrayList, Hashtable, 
DataView and DataReader.
<li>DataBinder.Eval() is a static method for late-binding.  It's syntax can be simpler than the standard data 
binding syntax, but performance is slower.
</ol>
<p>

<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->