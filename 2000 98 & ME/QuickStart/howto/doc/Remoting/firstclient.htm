
<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">

<table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">

    <div style="padding:0,0,4,0"><b>Remoting</b><br></div>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/mainfeatures.htm">Remoting Overview</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/nutshell.htm">How Remoting Works</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/quickstart.htm">Remoting Samples</a><p>
    <div style="padding:0,0,4,0"><b>The Basics</b><br></div>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/firstserver.htm">Create a Remote Server</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/firstclient.htm">Create a Client of the Server</a><p>
    <div style="padding:0,0,4,0"><b>Samples</b><br></div>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/singleton.htm">Create a Singleton Object</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/byreference.htm">Pass Objects By Reference</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/byvalue.htm">Pass Objects By Value</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/interface.htm">Compile Against an Interface</a><br>
    &nbsp; <a class="outer" href="../../../howto/doc/remoting/async.htm">Make an Asynchronous Call</a><p>
    <div style="padding:0,0,4,0"><a target="_top" style="color:darkred" href="../../../howto"><b>Back to Index</b></a><br></div>

</div>

</td>
</tr>
</table>






</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<style>
.mydd {  font: smaller verdana; }
.code1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:blue;
	}
.codecomment1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:green;
	}
.issue {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background-color:RED;
	color:WHITE;
	font-weight:bold;
	}


body { font: smaller verdana }        

</style>





<h4>How Do I...Create a Client of a Remote Server?</h4>

If you haven't already read the section <a href="firstserver.htm">How Do I Create a Remote Server?</a>, please read this first.
The client references the server assembly for metadata, so we have to compile the server
before the client.  The code for the client is listed below.

<p>

  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 1;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:85%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="2">
<pre id="codectrl4" style="display:">

using System;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels.TCP;

namespace RemotingSamples {
  public class Client
  {
    public static int Main(string [] args)
    {
      TCPChannel chan = new TCPChannel();
      ChannelServices.RegisterChannel(chan);
      HelloServer obj = (HelloServer)Activator.GetObject(
        typeof(RemotingSamples.HelloServer), 
	"tcp://localhost:8085/SayHello");
      if (obj == null) System.Console.WriteLine("Could not locate server");
      else Console.WriteLine(obj.HelloMethod("Caveman"));
      return 0;
    }
  }
}
</pre>
        </td>
      </tr>
      <tr>
        <td class="tab" id="tabctrl4" onclick="doClick(0, 'ctrl4')">
          <b>C#
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>

<p>

When the client starts up, it registers a TCP channel and proceeds to 
activate the object by calling the <b>GetObject</b> method on the <b>Activator</b> 
class.  The parameters for this call are as follows: <p>

<ol>
<li>The type of the name of the class we need to activate, <b>"RemotingSamples.HelloServer"</b> in this case.<p>

<li>Next we specify the URI of the object we need to activate.  For this client the 
URI is simply <b>"tcp://localhost:8085/SayHello"</b>.  It is important to note that the URI 
includes the protocol, machine name and port number as well as the endpoint.  If the server 
is deployed on a host named <b>"Sunshine"</b>, clients can connect to the server by 
specifying <b>"tcp://sunshine:8085/SayHello"</b>.<p>
</ol>

When we run the client, it locates and connects to the server, retrieves a proxy for 
the remote object and calls the <b>HelloMethod</b> on the remote object, passing the 
string <b>"Caveman"</b> as a parameter.  The server returns <b>"Hi there Caveman"</b>.<p>

<b>NOTE:</b> All TCP channels use binary serialization when transporting local objects to 
and from a remote object.<p>


<span>




<div class="indent">



	<a target="_blank" href="../../../howto/samples/remoting/hello/vb">
	<img style="border-color:black" border=1 src="../../../images/genicon.gif"><br>
	</a>
	<div class="caption">Hello Client Sample</div><br>
	
	
		[<a target="_blank" href="../../../howto/samples/remoting/hello/vb">Run Sample</a>] | 
		[<a target="_blank" href="../../../howto/samples/remoting/hello/clientcssource.htm">View Source</a>]
	
	
	</div>


</span>
<p>


<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->