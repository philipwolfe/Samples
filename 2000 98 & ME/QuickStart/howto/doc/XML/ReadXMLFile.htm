

<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">
  <table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">
<!--
		<div style="padding:0,0,4,0"><a class="outer" style="color:darkred" href="../../../howto/doc/xml/overviewofxml.htm"><b>Introduction</a></b></a><br></div>
         <p>
		<div style="padding:0,0,4,0"><b>XML Readers and Writers</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlfile.htm">Read XML from a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlstream.htm">Read XML from a stream</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/writexmlfile.htm">Write XML to a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/validationreadingxml.htm">Apply validation when reading XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Document Object Model (DOM)</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/dominterfacexmldocument.htm">Load and use the XmlDocument (W3C DOM)</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savexmldocument.htm">Save XML with the XmlDocument (W3C DOM)</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>Using the XmlDataDocument</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loadxmldocument.htm">Load and use the XmlDataDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/streamanxmldocument.htm">Read XML from an XmlDataDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Navigation and Editing</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/navigatexmldocument.htm">Navigate XML with the XmlNavigator</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/editingxmldocument.htm">Edit XML with the XmlNavigator</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XPath and XSL Transformations</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/queryxmldocumentxpath.htm">Query XML with an XPath expression</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/transformxml.htm">Apply an XSL transformation to XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML and Relational Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/xmldataset.htm">Use XML and the DataSet class</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxsdschema.htm">Create DataSet mappings from an XSD schema</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loaddatasetxmldata.htm">Load a DataSet with XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxmldata.htm">Infer DataSet mappings from XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetmapxsdschema.htm">Save DataSet mappings to an XSD schema file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetxml.htm">Save a DataSet as XML</a><br>
-->

		<div style="padding:0,0,4,0"><b>XML Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/overviewofxml.htm">Overview of XML</a><p>

		<div style="padding:0,0,4,0"><b>XML Readers and Writers</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlfile.htm">Read XML from a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlstream.htm">Read XML from a stream</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/writexmlfile.htm">Write XML to a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/validationreadingxml.htm">Apply validation to XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Document Object Model</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/dominterfacexmldocument.htm">Load XML with XmlDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savexmldocument.htm">Save XML with XmlDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>Using the XmlDataDocument</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loadxmldocument.htm">Load the XmlDataDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/streamanxmldocument.htm">Read from XmlDataDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Navigation and Editing</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/navigatexmldocument.htm">Navigate with XmlNavigator</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/editingxmldocument.htm">Edit with XmlNavigator</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XPath and XSL Transformations</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/queryxmldocumentxpath.htm">Query XML with an XPath</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/transformxml.htm">Apply XSL transformations</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML and Relational Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/xmldataset.htm">Use XML and the DataSet</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxsdschema.htm">Create DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loaddatasetxmldata.htm">Load a DataSet with XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxmldata.htm">Infer DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetmapxsdschema.htm">Save DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetxml.htm">Save a DataSet as XML</a><p>

    <div style="padding:0,0,4,0"><a target="_top" style="color:darkred" href="../../../howto"><b>Back to Index</b></a><br></div>


</div>

</td>
</tr>
</table>
</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<style>
.mydd {  font: smaller verdana; }
.code1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:blue;
	}
.codecomment1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:green;
	}
.issue {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background-color:RED;
	color:WHITE;
	font-weight:bold;
	}


body { font: smaller verdana }        

</style>





<h4>How Do I...Read XML from a file?</h4>

This sample illustrates how to read XML from a file using the XmlTextReader class.
This class provides direct parsing and tokenizing of XML and implements the <A href="http://www.w3.org/TR/1998/REC-xml-19980210">W3C 
Extensible Markup Language (XML) 1.0</A> and the <A><A href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</A></A> specifications.
This reader provides fast, tokenized, stream access to XML rather than using an object model such as the XML DOM.
See <A target=content href="DOMInterfaceXmlDocument.htm">How Do I...Create and use the XmlDocument (W3C DOM)?</a>

The XmlReader class is the API which provides the XML parsing. The XmlTextReader is an implementation of this API to handle byte streams.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../../images/genicon.gif"><br>
	</a>
	<div class="caption">ReadXmlFile.htm</div><br>
	
	
		[<a target="_blank" href="../../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../../howto/samples/xml/readxmlfile/readxmlfilecssource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>
Typically the XmlTextReader is used if you need to access the XML as 'raw' data without the overhead of a DOM and therefore provides a faster 
mechanism for reading XML.  For example an XML document could have a header section used for routing the document for processing elsewhere.
The XmlTextReader has different constructors to specify the location of the XML data. In this sample we are going to load XML from the
<a target="_blank" href="../../../util/srcctrlwin.htm?path=howto/samples/xml/readxmlfile/&file=books.xml">books.xml</a> file.
The sample code shown below constructs an XmlTextReader.

<p>

  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl8" style="display:none">

XmlTextReader reader = new XmlTextReader ("books.xml");
</pre>
<pre id="codectrl8" style="display:">

Dim reader As XmlTextReader = New XmlTextReader ("books.xml")
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl8" onclick="doClick(0, 'ctrl8')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl8" onclick="doClick(1, 'ctrl8')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>

<p>

Once loaded, the XmlTextReader moves across the XML data by performing sequential reads to get the next record using the <b>Read</b> method. It returns false
if there are no more records.

<p>

  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl10" style="display:none">

while (reader.Read()) {
    // Do some work here on the data
}
</pre>
<pre id="codectrl10" style="display:">

Do While (reader.Read())
    ' Do some work here on the data
Loop
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl10" onclick="doClick(0, 'ctrl10')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl10" onclick="doClick(1, 'ctrl10')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>

<p>

To processes the XML data, each record has a node type which can be determined from the <b>NodeType</b> property. The <b>Name</b> and <b>Value</b> properties return
the node name (e.g. the element and attribute names) and the node value (i.e. the node text) of the current node (or record). The code sample below uses these
properties to display the details about the node for Element and DocumentType types. The node type is determined by the NodeType enumeration shown
in the table.

<p>

  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl12" style="display:none">

while (reader.Read()) {
    switch (reader.NodeType) {
        case XmlNodeType.Element: // The node is an Element
            Console.WriteLine(NodeType + "<" + reader.Name + ">" + reader.Value);
            break;
        case XmlNodeType.DocumentType: // The node is a DocumentType
            Console.WriteLine(NodeType + "<" + reader.Name + ">" + reader.Value);
            break;
    }
}
</pre>
<pre id="codectrl12" style="display:">

Do While (reader.Read())
    Select Case reader.NodeType
        Case XmlNodeType.Element ' The node is an Element
            Console.WriteLine(NodeType & "<" & reader.Name & ">" & reader.Value)

        Case XmlNodeType.DocumentType ' The node is a DocumentType
            Console.WriteLine(NodeType & "<" & reader.Name & ">" & reader.Value);

    End Select
Loop
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl12" onclick="doClick(0, 'ctrl12')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl12" onclick="doClick(1, 'ctrl12')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>

<p>


Table of NodeTypes which are equivalent to the W3C DOM node types with some extended types required for forward only reading.
<p>

<DIV class=indent>
<TABLE class=table2 
width="418">
<TBODY>
<TR>
<TH width="100">NodeType Enum</TH>
<TH width="308">Description</TH>
<TH width="10">Value</TH>
</TR>
  <tr>
    <td height="17"><font size="1">None</font></td>
    <td height="17"><font size="1"></font></td>
    <td height="17"><font size="1">0</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Element</font></td>
    <td width="308" height="19"><font size="1">&lt;name&gt;</font></td>
    <td width="10" height="17"><font size="1">1</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Attribute</font></td>
    <td width="308" height="19"><font size="1">id='123'</font></td>
    <td width="10" height="17"><font size="1">2</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Text</font></td>
    <td width="308" height="19"><font size="1">'123'</font></td>
    <td width="10" height="17"><font size="1">3</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">CDATA</font></td>
    <td width="308" height="19"><font size="1">&lt;![CDATA[....]]&gt;</font></td>
    <td width="10" height="17"><font size="1">4</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">EntityReference</font></td>
    <td width="308" height="19"><font size="1">&amp;foo;</font></td>
    <td width="10" height="17"><font size="1">5</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Entity</font></td>
    <td width="1000" height="19"><font size="1">&lt;!ENTITY ...&gt;</font></td>
    <td width="10" height="17"><font size="1">6</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">ProcessingInstruction</font></td>
    <td width="1000" height="19"><font size="1">&lt;?pi test?&gt;</font></td>
    <td width="10" height="17"><font size="1">7</font></td>
  </tr>
  <tr>
    <td height="17"><font size="1">Comment</font></td>
    <td height="17"><font size="1">&lt;!-- comment --&gt;</font></td>
    <td height="17"><font size="1">8</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Document</font></td>
    <td width="308" height="19"><font size="1"></font></td>
    <td width="10" height="17"><font size="1">9</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">DocumentType</font></td>
    <td width="308" height="19"><font size="1">&lt;!DOCTYPE ...&gt;</font></td>
    <td width="10" height="17"><font size="1">10</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">DocumentFragment</font></td>
    <td width="308" height="19"><font size="1"></font></td>
    <td width="10" height="17"><font size="1">11</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Notation</font></td>
    <td width="308" height="19"><font size="1">&lt;!NOTATION ...&gt;</font></td>
    <td width="10" height="17"><font size="1">12</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">Whitespace</font></td>
    <td width="308" height="19"><font size="1">Whitespace between markup.</font></td>
    <td width="10" height="17"><font size="1">13</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">SignificantWhitespace</font></td>
    <td width="1000" height="19"><font size="1">Whitespace between markup in a mixed content model.</font></td>
    <td width="10" height="17"><font size="1">14</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">EndTag</font></td>
    <td width="1000" height="19"><font size="1">&lt;/foo&gt;</font></td>
    <td width="10" height="17"><font size="1">15</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">EndEntity</font></td>
    <td width="1000" height="19"><font size="1">Returned when the reader has gotten to the end of the entity replacement as a result of a call to ExpandEntity().</font></td>
    <td width="10" height="17"><font size="1">16</font></td>
  </tr>
  <tr>
    <td width="100" height="19"><font size="1">CharacterEntity</font></td>
    <td width="1000" height="19"><font size="1">Returned when the reader has been told to report character entities (e.g. &amp;#65;). See the 
    EntityHandling property.</font></td>
    <td width="10" height="17"><font size="1">17</font></td>
  </tr>
  </TBODY></TABLE>

</DIV>
<p>

The <b>Depth</b> property reports the depth of the current node and can be useful for formatting. Nodes at the root level are at depth 0. Combining this with
the Name and Value properties we can create a sample which processes an XML file and formats the output depending on the node type and the depth,
gathering statistics as it reads. The Format method, shown below, implements some basic formatting code to the console. The full code is at 
<a href="../../../howto/samples/xml/readxmlfile/readxmlfilecssource.htm">View Source</a>.
<p>


  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl14" style="display:none">

private static void Format(XmlReader reader, String NodeType) {

    // Format the output
    Console.Write(reader.Depth + " ");
    Console.Write(reader.AttributeCount + " ");


    for (int i=0; i < reader.Depth; i++) { 
        Console.Write('\t');
    }

    Console.Write(reader.Prefix + NodeType + "<" + reader.Name + ">" + reader.Value);

    // Display the attributes values for the current node
    if (reader.HasAttributes) {
        Console.Write(" Attributes:");

        for (int j=0; j < reader.AttributeCount; j++) {
            Console.Write(" [{0}] " + reader[j], j);
        }
    }

    Console.WriteLine();
}
</pre>
<pre id="codectrl14" style="display:">

Private Shared Sub Format(ByRef reader As XmlTextReader, NodeType As String)
    
    ' Format the output
    Console.Write(reader.Depth & " ")
    Console.Write(reader.AttributeCount & " ")

    Dim i As Integer
    For i = 0 To reader.Depth
        Console.Write(Strings.chr(9))
    Next
        
    Console.Write(NodeType & "<" & reader.Name & ">" & reader.Value)

    'Display the attributes values for the current node
    If (reader.HasAttributes)
        Console.Write(" Attributes:")
        Dim j as Integer
        For j = 0 To reader.AttributeCount - 1
            Console.Write(" [{0}] " & reader(j), j)
        Next
    End If

    Console.WriteLine()
End Sub    
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl14" onclick="doClick(0, 'ctrl14')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl14" onclick="doClick(1, 'ctrl14')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>


<p>
The <b>Prefix</b> property returns the namespace prefix associated with the node. Element node types can have a list of attribute nodes associated with them.
Here we test whether the node has any attributes with the <b>HasAttributes</b> property and then use the node index operators to retrieve each attribute value.
This is analogous to a collection of attributes for the node.
The <b>AttributeCount</b> property returns the number of attributes for the current node. This approach is used if all you are interested in are the attribute
values and are not concerned with other properties of the attribute nodes (e.g. The name of the attribute).
In the <A target=content href="ReadXmlStream.htm">How Do I...Read XML from a stream?</a> topic we show an alternative approach to accessing the attributes
by moving to each attribute node in order to read both its name and value.

The output from running this sample with the 
<a target="_blank" href="../../../util/srcctrlwin.htm?path=howto/samples/xml/readxmlfile/&file=books.xml">books.xml</a> file
is shown below. The first column is the Depth property and the second column is the AttributeCount property.

<div class="code"><pre>
0 0 XmlDeclaration&lt;xml&gt;version='1.0'
0 0 Comment&lt;&gt; This file represents a fragment of a book store inventory database
0 0 Element&lt;bookstore&gt;
1 3     Element&lt;book&gt; Attributes: [0] autobiography [1] 1981 [2] 1-861003-11-0
2 0             Element&lt;title&gt;
3 0                     Text&lt;&gt;The Autobiography of Benjamin Franklin
2 0             Element&lt;author&gt;
3 0                     Element&lt;first-name&gt;
4 0                             Text&lt;&gt;Benjamin
3 0                     Element&lt;last-name&gt;
4 0                             Text&lt;&gt;Franklin
2 0             Element&lt;price&gt;
3 0                     Text&lt;&gt;8.99
1 3     Element&lt;book&gt; Attributes: [0] novel [1] 1967 [2] 0-201-63361-2
2 0             Element&lt;title&gt;
3 0                     Text&lt;&gt;The Confidence Man
2 0             Element&lt;author&gt;
3 0                     Element&lt;first-name&gt;
4 0                             Text&lt;&gt;Herman
3 0                     Element&lt;last-name&gt;
4 0                             Text&lt;&gt;Melville
2 0             Element&lt;price&gt;
3 0                     Text&lt;&gt;11.99
1 3     Element&lt;book&gt; Attributes: [0] philosophy [1] 1991 [2] 1-861001-57-6
2 0             Element&lt;title&gt;
3 0                     Text&lt;&gt;The Gorgias
2 0             Element&lt;author&gt;
3 0                     Element&lt;name&gt;
4 0                             Text&lt;&gt;Plato
2 0             Element&lt;price&gt;
3 0                     Text&lt;&gt;9.99

Statistics for books.xml file

XmlDeclaration: 1
ProcessingInstruction: 0
DocumentType: 0
Comment: 1
Element: 18
Attribute: 9
Text: 11
Whitespace: 27
</pre></div>
<p>

<H4>Summary</H4>
<OL>
<LI>The XmlTextReader provides fast, non-cached, forward only read access to XML data.
<LI>The XmlTextReader implements the <A href="http://www.w3.org/TR/1998/REC-xml-19980210">W3C Extensible Markup 
Language (XML) 1.0</A></A> specification and the <A><A href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</A></A> specification. 
<LI>The XmlTextReader provides constructors to read XML from a file, a stream or a TextReader.
<LI>The Read method moves the reader sequentially through the records (or nodes).
<LI>For element nodes, the value of an attribute can be obtained by using the index operators.
<LI>Attributes are represented as a node list off the current node and can be discovered through the HasAttributes property.
<LI>The Depth property reports the depth of the current node and can be useful for formatting. Nodes at the root level are at depth 0.
<LI>The Name and Value properties provide details about the current node.
</LI>
</OL>
<p>
<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->