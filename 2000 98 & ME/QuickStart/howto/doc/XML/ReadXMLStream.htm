

<!--BEGIN HEADER-->
<html>
<head>
<link rel="stylesheet" href="../../../include/qsstyle.css">
</head>
<body topmargin="0" leftmargin="0" marginwidth="0" marginheight="0" >

<table class="outer" cellpadding=0 cellspacing=0>
<tr>
<td class="toc" valign="top" width="210">
  <table>
<tr>
<td nowrap style="padding-right:15">

<div class="toc" style="font-size:8pt;color:darkred;">
<!--
		<div style="padding:0,0,4,0"><a class="outer" style="color:darkred" href="../../../howto/doc/xml/overviewofxml.htm"><b>Introduction</a></b></a><br></div>
         <p>
		<div style="padding:0,0,4,0"><b>XML Readers and Writers</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlfile.htm">Read XML from a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlstream.htm">Read XML from a stream</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/writexmlfile.htm">Write XML to a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/validationreadingxml.htm">Apply validation when reading XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Document Object Model (DOM)</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/dominterfacexmldocument.htm">Load and use the XmlDocument (W3C DOM)</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savexmldocument.htm">Save XML with the XmlDocument (W3C DOM)</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>Using the XmlDataDocument</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loadxmldocument.htm">Load and use the XmlDataDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/streamanxmldocument.htm">Read XML from an XmlDataDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Navigation and Editing</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/navigatexmldocument.htm">Navigate XML with the XmlNavigator</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/editingxmldocument.htm">Edit XML with the XmlNavigator</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XPath and XSL Transformations</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/queryxmldocumentxpath.htm">Query XML with an XPath expression</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/transformxml.htm">Apply an XSL transformation to XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML and Relational Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/xmldataset.htm">Use XML and the DataSet class</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxsdschema.htm">Create DataSet mappings from an XSD schema</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loaddatasetxmldata.htm">Load a DataSet with XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxmldata.htm">Infer DataSet mappings from XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetmapxsdschema.htm">Save DataSet mappings to an XSD schema file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetxml.htm">Save a DataSet as XML</a><br>
-->

		<div style="padding:0,0,4,0"><b>XML Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/overviewofxml.htm">Overview of XML</a><p>

		<div style="padding:0,0,4,0"><b>XML Readers and Writers</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlfile.htm">Read XML from a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/readxmlstream.htm">Read XML from a stream</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/writexmlfile.htm">Write XML to a file</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/validationreadingxml.htm">Apply validation to XML</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Document Object Model</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/dominterfacexmldocument.htm">Load XML with XmlDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savexmldocument.htm">Save XML with XmlDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>Using the XmlDataDocument</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loadxmldocument.htm">Load the XmlDataDocument</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/streamanxmldocument.htm">Read from XmlDataDocument</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML Navigation and Editing</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/navigatexmldocument.htm">Navigate with XmlNavigator</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/editingxmldocument.htm">Edit with XmlNavigator</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XPath and XSL Transformations</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/queryxmldocumentxpath.htm">Query XML with an XPath</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/transformxml.htm">Apply XSL transformations</a><br>
		<p>
		<div style="padding:0,0,4,0"><b>XML and Relational Data</b><br></div>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/xmldataset.htm">Use XML and the DataSet</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxsdschema.htm">Create DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/loaddatasetxmldata.htm">Load a DataSet with XML</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/datasetmapxmldata.htm">Infer DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetmapxsdschema.htm">Save DataSet mappings</a><br>
		&nbsp; <a class="outer" href="../../../howto/doc/xml/savedatasetxml.htm">Save a DataSet as XML</a><p>

    <div style="padding:0,0,4,0"><a target="_top" style="color:darkred" href="../../../howto"><b>Back to Index</b></a><br></div>


</div>

</td>
</tr>
</table>
</td>
<td valign="top">
<div class="body">
<!--END HEADER-->

<style>
.mydd {  font: smaller verdana; }
.code1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:blue;
	}
.codecomment1 {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#DFDFDF;
	font-family:"Courier New";
	color:green;
	}
.issue {
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background-color:RED;
	color:WHITE;
	font-weight:bold;
	}


body { font: smaller verdana }        

</style>





<h4>How Do I...Read XML data from a stream?</h4>

This sample illustrates how to read XML from a stream using the XmlTextReader class. The stream could have come from a variety of sources such as a byte stream
from a server, a file or from a TextReader. 
<p>
This sample follows on from the <a href="../../../howto/doc/xml/readxmlfile.htm">How do I...Read XML from a file?</a> topic.
<p>

<span>
  
  



<div class="indent">



	<a target="_blank" href="../../../aspplus/nowin9x.htm">
	<img style="border-color:black" border=1 src="../../../images/genicon.gif"><br>
	</a>
	<div class="caption">ReadXmlStream.htm</div><br>
	
	
		[<a target="_blank" href="../../../aspplus/nowin9x.htm">Run Sample</a>] | 
		[<a target="_blank" href="../../../howto/samples/xml/readxmlstream/readxmlstreamcssource.htm">View Source</a>]
	
	
	</div>


  </span>

<p>
The XmlTextReader has different constructors to specify the location of the XML data. Here we are going to load the XmlTextReader from a stream.
A stream is an abstract representation of an input or output device that is the source of, or destination for, data (in this case XML data). You can write to 
a stream and read from a stream, which is best visualised as a flow of bytes. Streams are used to provide independence from the device and hence require
no program changes if, for instance, the source of a stream changes.

<p>
The sample code shown below creates a StringReader class which is then used to build up an XML string. Since this is purely a byte stream which is held in memory,
we can get the XmlTextReader to parse this stream as XML. This in memory stream has no particular specified encoding. An XmlTextReader is then created which parses
the stream and displays the resultant XML.

<p>


  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl8" style="display:none">

StringReader stream;
XmlTextReader reader = null;

stream = new StringReader("&lt;?xml version='1.0'?&gt;" +
       "&lt;!-- This file represents a fragment of a book store inventory database --&gt;" +
       "&lt;bookstore&gt;" +
       " &lt;book genre=\"autobiography\" publicationdate=\"1981\" ISBN=\"1-861003-11-0\"&gt;" +
       "   &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;" +
       "   &lt;author&gt;" +
       "       &lt;first-name&gt;Benjamin&lt;/first-name&gt;" +
       "       &lt;last-name&gt;Franklin&lt;/last-name&gt;" +
       "   &lt;/author&gt;" +
       "   &lt;price&gt;8.99&lt;/price&gt;" +
       " &lt;/book&gt;" +
       " &lt;book genre=\"novel\" publicationdate=\"1967\" ISBN=\"0-201-63361-2\"&gt;" +
       "   &lt;title&gt;The Confidence Man&lt;/title&gt;" +
       "   &lt;author&gt;" +
       "       &lt;first-name&gt;Herman&lt;/first-name&gt;" +
       "       &lt;last-name&gt;Melville&lt;/last-name&gt;" +
       "   &lt;/author&gt;" +
       "   &lt;price&gt;11.99&lt;/price&gt;" +
       " &lt;/book&gt;" +
       "  &lt;book genre=\"philosophy\" publicationdate=\"1991\" ISBN=\"1-861001-57-6\"&gt;" +
       "   &lt;title&gt;The Gorgias&lt;/title&gt;" +
       "   &lt;author&gt;" +
       "       &lt;name&gt;Plato&lt;/name&gt;" +
       "   &lt;/author&gt;" +
       "   &lt;price&gt;9.99&lt;/price&gt;" +
       " &lt;/book&gt;" +
       "&lt;/bookstore&gt;");

// Load the XmlTextReader from the stream
reader = new XmlTextReader (stream);

Console.WriteLine ("Processing ...");
Console.WriteLine ();
FormatXml(reader);

// Finished with XmlTextReader
if (reader != null)
    reader.Close();

</pre>
<pre id="codectrl8" style="display:">

Dim stream as StringReader
Dim reader as XmlTextReader = Nothing

stream = New StringReader ("&lt;?xml version='1.0'?&gt;" & _
       "&lt;!-- This file represents a fragment of a book store inventory database --&gt;" & _
       "&lt;bookstore&gt;" & _
       " &lt;book genre=""autobiography"" publicationdate=""1981"" ISBN=""1-861003-11-0""&gt;" & _
       "   &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;" & _
       "   &lt;author&gt;" & _
       "       &lt;first-name&gt;Benjamin&lt;/first-name&gt;" & _
       "       &lt;last-name&gt;Franklin&lt;/last-name&gt;" & _
       "   &lt;/author&gt;" & _
       "   &lt;price&gt;8.99&lt;/price&gt;" & _
       " &lt;/book&gt;" & _
       " &lt;book genre=""novel"" publicationdate=""1967"" ISBN=""0-201-63361-2""&gt;" & _
       "   &lt;title&gt;The Confidence Man&lt;/title&gt;" & _
       "   &lt;author&gt;" & _
       "       &lt;first-name&gt;Herman&lt;/first-name&gt;" & _
       "       &lt;last-name&gt;Melville&lt;/last-name&gt;" & _
       "   &lt;/author&gt;" & _
       "   &lt;price&gt;11.99&lt;/price&gt;" & _
       " &lt;/book&gt;" & _
       "  &lt;book genre=""philosophy"" publicationdate=""1991"" ISBN=""1-861001-57-6""&gt;" & _
       "   &lt;title&gt;The Gorgias&lt;/title&gt;" & _
       "   &lt;author&gt;" & _
       "       &lt;name&gt;Plato&lt;/name&gt;" & _
       "   &lt;/author&gt;" & _
       "   &lt;price&gt;9.99&lt;/price&gt;" & _
       " &lt;/book&gt;" & _
       "&lt;/bookstore&gt;")

' Load the XmlTextReader from the stream
reader = New XmlTextReader(stream)

Console.WriteLine ("Processing ...")    
Console.WriteLine ()    
FormatXml(reader)    

' Finished with XmlTextReader
If Not (reader = Nothing)
    reader.Close()
End If
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl8" onclick="doClick(0, 'ctrl8')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl8" onclick="doClick(1, 'ctrl8')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>


<p>
If a Stream is supplied as input, the XmlTextReader properly decodes this by wrapping the stream in a StreamReader and calling the SwitchEncoding property according 
to the XML encoding specified. Also the XmlResolver is used to resolve external resources needed to correctly parse the input - like DTD's, schemas, entities
and &lt;xml:include&gt; elements. Another method of representing a stream is by using a StreamReader class that implements a reader which reads from a character stream.
The code sample below illustrates loading a file named books.xml and then using the XmlTextReader to parse the resulting file.
<p>


  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl10" style="display:none">

StreamReader streamreader = new StreamReader ("books.xml");
Console.WriteLine ("File books.xml read sucessfully ...");

// Load the XmlTextReader from the StreamReader
XmlTextReader xmlreader = new XmlTextReader (streamreader);
</pre>
<pre id="codectrl10" style="display:">

Dim streamreader As StreamReader = New StreamReader ("books.xml")
Console.WriteLine ("File books.xml read sucessfully ...")

' Load the XmlTextReader from the StreamReader
Dim xmlreader As XmlTextReader = New XmlTextReader (streamreader)
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl10" onclick="doClick(0, 'ctrl10')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl10" onclick="doClick(1, 'ctrl10')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>


<p>
This FormalXml method in this sample shows how to move to the attribute nodes using the <b>MoveToNextAttribute</b> method when the current node is an element
node. This allows you not only to access the node's name and value properties but, because you are at a node context you can also get properties like the current
namespace for the attribute. The code sample below also shows the Format method that this time displays the name and value for the current node.
<p>


  <script language="JavaScript">
    function doClick(index, id) {
        var numTabs = 2;
        document.all("tab" + id, index).className = "tab";
        for (var i=1; i < numTabs; i++) {
            document.all("tab" + id, (index + i) % numTabs).className = "backtab";
        }
        document.all("code" + id, index).style.display = "";
        for (var j=1; j < numTabs; j++) {
          document.all("code" + id, (index + j) % numTabs).style.display = "none";
        }
    }
  </script>
  <style>
    td.code {
      padding:0,10,0,10;
      border-style:solid;
      border-width:1;
      border-bottom:0;
      border-top:0;
      border-right:0;
      border-color:cccccc;
      background-color:ffffee
    }
    td.tab {
      text-align:center;
      font:8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:eeeeee
    }
    td.backtab {
      text-align:center;
      font: 8pt verdana;
      width:15%;
      padding:3,3,3,3;
      border-style:solid;
      border-width:1;
      border-right:0;
      border-color:black;
      background-color:cccccc
    }
    td.space {
      width:70%;
      font: 8pt verdana;
      padding:0,0,0,0;
      border-style:solid;
      border-bottom:0;
      border-right:0;
      border-width:1;
      border-color:cccccc;
      border-left-color:black;
      background-color:white
    }
  </style>
    <table cellpadding=0 cellspacing=0 width="95%">
      <tr>
        <td class="code" colspan="3">
<pre id="codectrl12" style="display:none">

private static void FormatXml (XmlReader reader) {

    int PI_count=0, Doc_count=0, comment_count=0, element_count = 0;
    int attribute_count=0, text_count=0, whitespace_count = 0;

    while (reader.Read()) {

        switch (reader.NodeType) {

            case XmlNodeType.Element:

                Format (reader, "Element");
                element_count++;

                while(reader.MoveToNextAttribute()) {
                    Format (reader, "Attribute");
                }

                if (reader.HasAttributes)
                    attribute_count += reader.AttributeCount;
                break;
        }
    }
}

private static void Format(XmlReader reader, String NodeType) {

    // Format the output
    Console.Write(reader.Depth + " ");
    Console.Write(reader.AttributeCount + " ");


    for (int i=0; i < reader.Depth; i++) { 
        Console.Write('\t');
    }

    Console.Write(NodeType + "<" + reader.Name + ">" + reader.Value);
    Console.WriteLine();

}
</pre>
<pre id="codectrl12" style="display:">

Private Shared Sub FormatXml (reader As XmlTextReader)
    
    Dim PI_count, Doc_count, comment_count, element_count as Integer
    Dim attribute_count, text_count, whitespace_count as Integer

    While reader.Read()
        
        Select (reader.NodeType)
           
            Case XmlNodeType.Element:

                Format (reader, "Element")
                element_count += 1

                While reader.MoveToNextAttribute()                
                    Format (reader, "Attribute")
                End While

                If (reader.HasAttributes)
                    attribute_count += reader.AttributeCount
                End If
        End Select
    End While    
End Sub 

Private Shared Sub Format(ByRef reader As XmlTextReader, NodeType As String)
    
    ' Format the output
    Console.Write(reader.Depth & " ")
    Console.Write(reader.AttributeCount & " ")

    Dim i As Integer
    For i = 0 to reader.Depth
        Console.Write(Strings.chr(9))
    Next
        
    Console.Write(reader.Prefix & NodeType & "<" & reader.Name & ">" & reader.Value)
    Console.WriteLine()

End Sub  
</pre>
        </td>
      </tr>
      <tr>
        <td class="backtab" id="tabctrl12" onclick="doClick(0, 'ctrl12')">
          <b>C#
        </td>
        <td class="tab" id="tabctrl12" onclick="doClick(1, 'ctrl12')">
          <b>VB
        </td>
        <td class="space">&nbsp;</td>
      </tr>
    </table>


<H4>Summary</H4>
<OL>
<LI>A stream is an abstract representation of an input or output device that is the source of, or destination for, data.
<LI>The XmlTextReader provides constructors to read XML from a string representing an URL or a local filename, a stream or a TextReader.
<LI>The XmlTextReader properly decodes the stream by wrapping the stream in a StreamReader and setting the specified XML encoding.
<LI>Attribute nodes can be accessed with the MoveToNextAttribute method that allows you to determine the properties of the attribute node.
</OL>

<!--END FOOTER-->
<p>
<hr>
<p>
</div>
</td>
</tr>
</table>
</BODY>
</html>
<!--END FOOTER-->