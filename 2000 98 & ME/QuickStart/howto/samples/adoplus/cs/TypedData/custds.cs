//------------------------------------------------------------------------------
/// <autogenerated>
///     This class was generated by a tool.
///     Runtime Version: 1.0.2204.14
///
///     Changes to this file may cause incorrect behavior and will be lost if 
///     the code is regenerated.
/// </autogenerated>
//------------------------------------------------------------------------------

namespace customerDataSet {
    using System;
    using System.Data;
    using System.Core;
    
    public class custDS : System.Data.DataSet {
        private int tableCount;
        private int relationCount;
        private customersTable tablecustomersTable;
        
        public custDS() {
            this.InitClass();
        }
        
        [System.ComponentModel.PersistContentsAttribute(true)]
        public virtual customersTable customers {
            get {
                return this.tablecustomersTable;
            }
        }
        
        private void InitClass() {
            this.DataSetName = "custDS";
            this.Namespace = "customerDataSet";
            this.tableCount = 1;
            this.relationCount = 0;
            this.tablecustomersTable = new customersTable("customers");
            this.Tables.Add(this.tablecustomersTable);
        }
        protected override bool HasSchemaChanged() {
            return ((((this.tableCount) != (this.Tables.Count))) || (((this.relationCount) != (this.Relations.Count))));
        }
        public override bool ShouldPersistTables() {
            return ((this.tableCount) != (this.Tables.Count));
        }
        public override bool ShouldPersistRelations() {
            return ((this.relationCount) != (this.Relations.Count));
        }
        public override void ResetTables() {
            for (int i = 0; ((i) < (this.Tables.Count)); i = ((i) + (1))) {
                if (((this.Tables[i]) == (this.tablecustomersTable))) {
                }
                else {
                    this.Tables.Remove(this.Tables[i]);
                }
            }
        }
        public override void ResetRelations() {
            for (int i = 0; ((i) < (this.Relations.Count)); i = ((i) + (1))) {
                this.Relations.Remove(this.Relations[i]);
            }
        }
        
        
        public delegate void customersRowChangeEventHandler(object sender, customersRowChangeEvent e);
        
        public class customersTable : DataTable, System.Collections.ICollection {
            private int columnCount;
            private int constraintCount;
            private customers_CustomerID columnCustomerID;
            private customers_CompanyName columnCompanyName;
            private customers_ContactName columnContactName;
            private customers_ContactTitle columnContactTitle;
            private customers_Address columnAddress;
            private customers_City columnCity;
            private customers_Region columnRegion;
            private customers_PostalCode columnPostalCode;
            private customers_Country columnCountry;
            private customers_Phone columnPhone;
            private customers_Fax columnFax;
            public customersRowChangeEventHandler customersRowChanged;
            public customersRowChangeEventHandler customersRowChanging;
            public DataColumnChangeEventHandler CustomerIDColumnChanging;
            public DataColumnChangeEventHandler CompanyNameColumnChanging;
            public DataColumnChangeEventHandler ContactNameColumnChanging;
            public DataColumnChangeEventHandler ContactTitleColumnChanging;
            public DataColumnChangeEventHandler AddressColumnChanging;
            public DataColumnChangeEventHandler CityColumnChanging;
            public DataColumnChangeEventHandler RegionColumnChanging;
            public DataColumnChangeEventHandler PostalCodeColumnChanging;
            public DataColumnChangeEventHandler CountryColumnChanging;
            public DataColumnChangeEventHandler PhoneColumnChanging;
            public DataColumnChangeEventHandler FaxColumnChanging;
            
            public customersTable(string name) : 
                    base(name) {
                this.InitClass();
            }
            public customersTable() : 
                    base("customers") {
                this.InitClass();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            bool System.Collections.ICollection.IsReadOnly {
                get {
                    return false;
                }
            }
            bool System.Collections.ICollection.IsSynchronized {
                get {
                    return false;
                }
            }
            object System.Collections.ICollection.SyncRoot {
                get {
                    return this;
                }
            }
            public virtual customers_CustomerID CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            public virtual customers_CompanyName CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            public virtual customers_ContactName ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            public virtual customers_ContactTitle ContactTitleColumn {
                get {
                    return this.columnContactTitle;
                }
            }
            public virtual customers_Address AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            public virtual customers_City CityColumn {
                get {
                    return this.columnCity;
                }
            }
            public virtual customers_Region RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            public virtual customers_PostalCode PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            public virtual customers_Country CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            public virtual customers_Phone PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            public virtual customers_Fax FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            public virtual customersRow this[int index] {
                get {
                    return (customersRow)(this.Rows[index]);
                }
            }
            
            public virtual void AddcustomersRow(customersRow rowcustomersRow) {
                this.Rows.Add(rowcustomersRow);
            }
            public virtual customersRow AddcustomersRow(string columnCustomerID, string columnCompanyName, string columnContactName, string columnContactTitle, string columnAddress, string columnCity, string columnRegion, string columnPostalCode, string columnCountry, string columnPhone, string columnFax) {
                customersRow rowcustomersRow;
                rowcustomersRow = (customersRow)(this.NewRow());
                rowcustomersRow.ItemArray = new Object[] {columnCustomerID,
                        columnCompanyName,
                        columnContactName,
                        columnContactTitle,
                        columnAddress,
                        columnCity,
                        columnRegion,
                        columnPostalCode,
                        columnCountry,
                        columnPhone,
                        columnFax};
                this.Rows.Add(rowcustomersRow);
                return rowcustomersRow;
            }
            void System.Collections.ICollection.CopyTo(Array array, int offset) {
                for (int i = 0; ((i) < (this.Rows.Count)); i = ((i) + (1))) {
                    array.SetValue(this.Rows[i], ((i) + (offset)));
                }
            }
            public virtual customersRow FindByCustomerID(string columnCustomerID) {
                return (customersRow)(this.Rows.Find(new Object[] {columnCustomerID}));
            }
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
                return this.Rows.All.GetEnumerator();
            }
            protected override bool HasSchemaChanged() {
                return ((this.columnCount) == (this.Columns.Count));
            }
            private void InitClass() {
                this.columnCount = 11;
                this.constraintCount = 1;
                this.columnCustomerID = new customers_CustomerID();
                this.Columns.Add(this.columnCustomerID);
                this.columnCompanyName = new customers_CompanyName();
                this.Columns.Add(this.columnCompanyName);
                this.columnContactName = new customers_ContactName();
                this.Columns.Add(this.columnContactName);
                this.columnContactTitle = new customers_ContactTitle();
                this.Columns.Add(this.columnContactTitle);
                this.columnAddress = new customers_Address();
                this.Columns.Add(this.columnAddress);
                this.columnCity = new customers_City();
                this.Columns.Add(this.columnCity);
                this.columnRegion = new customers_Region();
                this.Columns.Add(this.columnRegion);
                this.columnPostalCode = new customers_PostalCode();
                this.Columns.Add(this.columnPostalCode);
                this.columnCountry = new customers_Country();
                this.Columns.Add(this.columnCountry);
                this.columnPhone = new customers_Phone();
                this.Columns.Add(this.columnPhone);
                this.columnFax = new customers_Fax();
                this.Columns.Add(this.columnFax);
            }
            public virtual customersRow NewcustomersRow() {
                return (customersRow)(this.NewRow());
            }
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                // We need to ensure that all Rows in the tabled are typed rows.
                // Table calls newRow whenever it needs to create a row.
                // So the following conditions are covered by Row newRow(Record record)
                // * Cursor calls table.addRecord(record) 
                // * table.addRow(object[] values) calls newRow(record)    
                return new customersRow(builder);
            }
            protected override System.Type GetRowType() {
                return typeof(customersRow);
            }
            protected override void OnRemoveColumn(DataColumn column) {
                if (((((((((((((((((((((((column) == (this.columnCustomerID))) || (((column) == (this.columnCompanyName))))) || (((column) == (this.columnContactName))))) || (((column) == (this.columnContactTitle))))) || (((column) == (this.columnAddress))))) || (((column) == (this.columnCity))))) || (((column) == (this.columnRegion))))) || (((column) == (this.columnPostalCode))))) || (((column) == (this.columnCountry))))) || (((column) == (this.columnPhone))))) || (((column) == (this.columnFax))))) {
                    throw new ArgumentException("Cannot remove column since it is built in to this dataSet.");
                }
            }
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if (((this.customersRowChanged) != (null))) {
                    this.customersRowChanged(this, new customersRowChangeEvent((customersRow)(e.Row), e.Action));
                }
            }
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                if (((this.customersRowChanging) != (null))) {
                    this.customersRowChanging(this, new customersRowChangeEvent((customersRow)(e.Row), e.Action));
                }
            }
            protected virtual void OnCustomerIDColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.CustomerIDColumnChanging) != (null))) {
                    this.CustomerIDColumnChanging(this, e);
                }
            }
            protected virtual void OnCompanyNameColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.CompanyNameColumnChanging) != (null))) {
                    this.CompanyNameColumnChanging(this, e);
                }
            }
            protected virtual void OnContactNameColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.ContactNameColumnChanging) != (null))) {
                    this.ContactNameColumnChanging(this, e);
                }
            }
            protected virtual void OnContactTitleColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.ContactTitleColumnChanging) != (null))) {
                    this.ContactTitleColumnChanging(this, e);
                }
            }
            protected virtual void OnAddressColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.AddressColumnChanging) != (null))) {
                    this.AddressColumnChanging(this, e);
                }
            }
            protected virtual void OnCityColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.CityColumnChanging) != (null))) {
                    this.CityColumnChanging(this, e);
                }
            }
            protected virtual void OnRegionColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.RegionColumnChanging) != (null))) {
                    this.RegionColumnChanging(this, e);
                }
            }
            protected virtual void OnPostalCodeColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.PostalCodeColumnChanging) != (null))) {
                    this.PostalCodeColumnChanging(this, e);
                }
            }
            protected virtual void OnCountryColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.CountryColumnChanging) != (null))) {
                    this.CountryColumnChanging(this, e);
                }
            }
            protected virtual void OnPhoneColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.PhoneColumnChanging) != (null))) {
                    this.PhoneColumnChanging(this, e);
                }
            }
            protected virtual void OnFaxColumnChanging(DataColumnChangeEventArgs e) {
                if (((this.FaxColumnChanging) != (null))) {
                    this.FaxColumnChanging(this, e);
                }
            }
            protected override void OnColumnChanging(DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if (((e.Column) == (this.columnCustomerID))) {
                    this.OnCustomerIDColumnChanging(e);
                }
                else {
                    if (((e.Column) == (this.columnCompanyName))) {
                        this.OnCompanyNameColumnChanging(e);
                    }
                    else {
                        if (((e.Column) == (this.columnContactName))) {
                            this.OnContactNameColumnChanging(e);
                        }
                        else {
                            if (((e.Column) == (this.columnContactTitle))) {
                                this.OnContactTitleColumnChanging(e);
                            }
                            else {
                                if (((e.Column) == (this.columnAddress))) {
                                    this.OnAddressColumnChanging(e);
                                }
                                else {
                                    if (((e.Column) == (this.columnCity))) {
                                        this.OnCityColumnChanging(e);
                                    }
                                    else {
                                        if (((e.Column) == (this.columnRegion))) {
                                            this.OnRegionColumnChanging(e);
                                        }
                                        else {
                                            if (((e.Column) == (this.columnPostalCode))) {
                                                this.OnPostalCodeColumnChanging(e);
                                            }
                                            else {
                                                if (((e.Column) == (this.columnCountry))) {
                                                    this.OnCountryColumnChanging(e);
                                                }
                                                else {
                                                    if (((e.Column) == (this.columnPhone))) {
                                                        this.OnPhoneColumnChanging(e);
                                                    }
                                                    else {
                                                        if (((e.Column) == (this.columnFax))) {
                                                            this.OnFaxColumnChanging(e);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            public virtual void RemovecustomersRow(customersRow rowcustomersRow) {
                this.Rows.Remove(rowcustomersRow);
            }
            public override bool ShouldPersistPrimaryKey() {
                return false;
            }
            public override void ResetPrimaryKey() {
            }
            public override bool ShouldPersistColumns() {
                return ((this.columnCount) != (this.Columns.Count));
            }
            public override void ResetColumns() {
                for (int i = 0; ((i) < (this.Columns.Count)); i = ((i) + (1))) {
                    if (((((this.Columns[i]) == (this.columnFax))) || (((((this.Columns[i]) == (this.columnPhone))) || (((((this.Columns[i]) == (this.columnCountry))) || (((((this.Columns[i]) == (this.columnPostalCode))) || (((((this.Columns[i]) == (this.columnRegion))) || (((((this.Columns[i]) == (this.columnCity))) || (((((this.Columns[i]) == (this.columnAddress))) || (((((this.Columns[i]) == (this.columnContactTitle))) || (((((this.Columns[i]) == (this.columnContactName))) || (((((this.Columns[i]) == (this.columnCompanyName))) || (((this.Columns[i]) == (this.columnCustomerID))))))))))))))))))))))) {
                    }
                    else {
                        this.Columns.Remove(this.Columns[i]);
                    }
                }
            }
            public override bool ShouldPersistConstraints() {
                return ((this.constraintCount) != (this.Constraints.Count));
            }
            public override void ResetConstraints() {
                for (int i = this.constraintCount; ((i) < (this.Constraints.Count)); i = ((i) + (1))) {
                    this.Constraints.Remove(this.Constraints[i]);
                }
            }
            
        }
        
        public class customers_CustomerID : System.Data.DataColumn {
            public customers_CustomerID() : 
                    base("CustomerID", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
                this.AllowNull = false;
                this.Unique = true;
            }
            
        }
        
        public class customers_CompanyName : System.Data.DataColumn {
            public customers_CompanyName() : 
                    base("CompanyName", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
                this.AllowNull = false;
            }
            
        }
        
        public class customers_ContactName : System.Data.DataColumn {
            public customers_ContactName() : 
                    base("ContactName", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_ContactTitle : System.Data.DataColumn {
            public customers_ContactTitle() : 
                    base("ContactTitle", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_Address : System.Data.DataColumn {
            public customers_Address() : 
                    base("Address", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_City : System.Data.DataColumn {
            public customers_City() : 
                    base("City", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_Region : System.Data.DataColumn {
            public customers_Region() : 
                    base("Region", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_PostalCode : System.Data.DataColumn {
            public customers_PostalCode() : 
                    base("PostalCode", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_Country : System.Data.DataColumn {
            public customers_Country() : 
                    base("Country", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_Phone : System.Data.DataColumn {
            public customers_Phone() : 
                    base("Phone", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customers_Fax : System.Data.DataColumn {
            public customers_Fax() : 
                    base("Fax", typeof(string)) {
                this.InitClass();
            }
            
            public virtual void InitClass() {
            }
            
        }
        
        public class customersRow : DataRow {
            private customersTable tablecustomersTable;
            
            public customersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomersTable = (customersTable)(this.Table);
            }
            
            public virtual string CustomerID {
                get {
                    return (string)(this[this.tablecustomersTable.CustomerIDColumn]);
                }
                set {
                    this[this.tablecustomersTable.CustomerIDColumn] = value;
                }
            }
            public virtual string CompanyName {
                get {
                    return (string)(this[this.tablecustomersTable.CompanyNameColumn]);
                }
                set {
                    this[this.tablecustomersTable.CompanyNameColumn] = value;
                }
            }
            public virtual string ContactName {
                get {
                    return (string)(this[this.tablecustomersTable.ContactNameColumn]);
                }
                set {
                    this[this.tablecustomersTable.ContactNameColumn] = value;
                }
            }
            public virtual bool ContactNameIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.ContactNameColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.ContactNameColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string ContactTitle {
                get {
                    return (string)(this[this.tablecustomersTable.ContactTitleColumn]);
                }
                set {
                    this[this.tablecustomersTable.ContactTitleColumn] = value;
                }
            }
            public virtual bool ContactTitleIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.ContactTitleColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.ContactTitleColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string Address {
                get {
                    return (string)(this[this.tablecustomersTable.AddressColumn]);
                }
                set {
                    this[this.tablecustomersTable.AddressColumn] = value;
                }
            }
            public virtual bool AddressIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.AddressColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.AddressColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string City {
                get {
                    return (string)(this[this.tablecustomersTable.CityColumn]);
                }
                set {
                    this[this.tablecustomersTable.CityColumn] = value;
                }
            }
            public virtual bool CityIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.CityColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.CityColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string Region {
                get {
                    return (string)(this[this.tablecustomersTable.RegionColumn]);
                }
                set {
                    this[this.tablecustomersTable.RegionColumn] = value;
                }
            }
            public virtual bool RegionIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.RegionColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.RegionColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string PostalCode {
                get {
                    return (string)(this[this.tablecustomersTable.PostalCodeColumn]);
                }
                set {
                    this[this.tablecustomersTable.PostalCodeColumn] = value;
                }
            }
            public virtual bool PostalCodeIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.PostalCodeColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.PostalCodeColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string Country {
                get {
                    return (string)(this[this.tablecustomersTable.CountryColumn]);
                }
                set {
                    this[this.tablecustomersTable.CountryColumn] = value;
                }
            }
            public virtual bool CountryIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.CountryColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.CountryColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string Phone {
                get {
                    return (string)(this[this.tablecustomersTable.PhoneColumn]);
                }
                set {
                    this[this.tablecustomersTable.PhoneColumn] = value;
                }
            }
            public virtual bool PhoneIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.PhoneColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.PhoneColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            public virtual string Fax {
                get {
                    return (string)(this[this.tablecustomersTable.FaxColumn]);
                }
                set {
                    this[this.tablecustomersTable.FaxColumn] = value;
                }
            }
            public virtual bool FaxIsNull {
                get {
                    return this.IsNull(this.tablecustomersTable.FaxColumn);
                }
                set {
                    if (((value) == (true))) {
                        this[this.tablecustomersTable.FaxColumn] = Convert.DBNull;
                    }
                    else {
                        throw new ArgumentException("Can only set this property to true.");
                    }
                }
            }
            
        }
        
        public class customersRowChangeEvent : EventArgs {
            private customersRow rowcustomersRow;
            private System.Data.DataRowAction actionValue;
            
            public customersRowChangeEvent(customersRow rowcustomersRowArg, DataRowAction actionArg) {
                this.rowcustomersRow = rowcustomersRowArg;
                this.actionValue = actionArg;
            }
            
            public virtual customersRow customersRow {
                get {
                    return this.rowcustomersRow;
                }
            }
            public virtual DataRowAction Action {
                get {
                    return this.actionValue;
                }
            }
            
        }
        
    }
}
