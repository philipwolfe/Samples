'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.0.3705.209.
'
Namespace localhost
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MainSoap", [Namespace]:="http://msdn.microsoft.com/vbasic/")>  _
    Public Class Main
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/howtobuildwebservices/main.asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/vbasic/About", RequestNamespace:="http://msdn.microsoft.com/vbasic/", ResponseNamespace:="http://msdn.microsoft.com/vbasic/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function About() As String
            Dim results() As Object = Me.Invoke("About", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginAbout(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("About", New Object(-1) {}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndAbout(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/vbasic/GetCustomerOrderHistory", RequestNamespace:="http://msdn.microsoft.com/vbasic/", ResponseNamespace:="http://msdn.microsoft.com/vbasic/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerOrderHistory(ByVal strCustID As String) As CustomerAndOrderHistoryInfo
            Dim results() As Object = Me.Invoke("GetCustomerOrderHistory", New Object() {strCustID})
            Return CType(results(0),CustomerAndOrderHistoryInfo)
        End Function
        
        '<remarks/>
        Public Function BeginGetCustomerOrderHistory(ByVal strCustID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCustomerOrderHistory", New Object() {strCustID}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetCustomerOrderHistory(ByVal asyncResult As System.IAsyncResult) As CustomerAndOrderHistoryInfo
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),CustomerAndOrderHistoryInfo)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/vbasic/GetTenMostExpensiveProducts", RequestNamespace:="http://msdn.microsoft.com/vbasic/", ResponseNamespace:="http://msdn.microsoft.com/vbasic/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTenMostExpensiveProducts() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTenMostExpensiveProducts", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '<remarks/>
        Public Function BeginGetTenMostExpensiveProducts(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTenMostExpensiveProducts", New Object(-1) {}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetTenMostExpensiveProducts(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
    End Class
    
    '<remarks/>
    <System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://msdn.microsoft.com/vbasic/")>  _
    Public Class CustomerAndOrderHistoryInfo
        
        '<remarks/>
        Public Orders As dsCustOrderHist
        
        '<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>  _
        Public Company As String
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsCustOrderHist
        Inherits DataSet
        
        Private tableCustOrderHist As CustOrderHistDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("CustOrderHist")) Is Nothing) Then
                    Me.Tables.Add(New CustOrderHistDataTable(ds.Tables("CustOrderHist")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CustOrderHist As CustOrderHistDataTable
            Get
                Return Me.tableCustOrderHist
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsCustOrderHist = CType(MyBase.Clone,dsCustOrderHist)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CustOrderHist")) Is Nothing) Then
                Me.Tables.Add(New CustOrderHistDataTable(ds.Tables("CustOrderHist")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableCustOrderHist = CType(Me.Tables("CustOrderHist"),CustOrderHistDataTable)
            If (Not (Me.tableCustOrderHist) Is Nothing) Then
                Me.tableCustOrderHist.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsCustOrderHist"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsCustOrderHist.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableCustOrderHist = New CustOrderHistDataTable
            Me.Tables.Add(Me.tableCustOrderHist)
        End Sub
        
        Private Function ShouldSerializeCustOrderHist() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub CustOrderHistRowChangeEventHandler(ByVal sender As Object, ByVal e As CustOrderHistRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustOrderHistDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnProductName As DataColumn
            
            Private columnTotal As DataColumn
            
            Friend Sub New()
                MyBase.New("CustOrderHist")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property ProductNameColumn As DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property
            
            Friend ReadOnly Property TotalColumn As DataColumn
                Get
                    Return Me.columnTotal
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As CustOrderHistRow
                Get
                    Return CType(Me.Rows(index),CustOrderHistRow)
                End Get
            End Property
            
            Public Event CustOrderHistRowChanged As CustOrderHistRowChangeEventHandler
            
            Public Event CustOrderHistRowChanging As CustOrderHistRowChangeEventHandler
            
            Public Event CustOrderHistRowDeleted As CustOrderHistRowChangeEventHandler
            
            Public Event CustOrderHistRowDeleting As CustOrderHistRowChangeEventHandler
            
            Public Overloads Sub AddCustOrderHistRow(ByVal row As CustOrderHistRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddCustOrderHistRow(ByVal ProductName As String, ByVal Total As Integer) As CustOrderHistRow
                Dim rowCustOrderHistRow As CustOrderHistRow = CType(Me.NewRow,CustOrderHistRow)
                rowCustOrderHistRow.ItemArray = New Object() {ProductName, Total}
                Me.Rows.Add(rowCustOrderHistRow)
                Return rowCustOrderHistRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As CustOrderHistDataTable = CType(MyBase.Clone,CustOrderHistDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New CustOrderHistDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnProductName = Me.Columns("ProductName")
                Me.columnTotal = Me.Columns("Total")
            End Sub
            
            Private Sub InitClass()
                Me.columnProductName = New DataColumn("ProductName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductName)
                Me.columnTotal = New DataColumn("Total", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnTotal)
                Me.columnProductName.AllowDBNull = false
                Me.columnTotal.ReadOnly = true
            End Sub
            
            Public Function NewCustOrderHistRow() As CustOrderHistRow
                Return CType(Me.NewRow,CustOrderHistRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New CustOrderHistRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(CustOrderHistRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CustOrderHistRowChangedEvent) Is Nothing) Then
                    RaiseEvent CustOrderHistRowChanged(Me, New CustOrderHistRowChangeEvent(CType(e.Row,CustOrderHistRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CustOrderHistRowChangingEvent) Is Nothing) Then
                    RaiseEvent CustOrderHistRowChanging(Me, New CustOrderHistRowChangeEvent(CType(e.Row,CustOrderHistRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CustOrderHistRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CustOrderHistRowDeleted(Me, New CustOrderHistRowChangeEvent(CType(e.Row,CustOrderHistRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CustOrderHistRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CustOrderHistRowDeleting(Me, New CustOrderHistRowChangeEvent(CType(e.Row,CustOrderHistRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveCustOrderHistRow(ByVal row As CustOrderHistRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustOrderHistRow
            Inherits DataRow
            
            Private tableCustOrderHist As CustOrderHistDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableCustOrderHist = CType(Me.Table,CustOrderHistDataTable)
            End Sub
            
            Public Property ProductName As String
                Get
                    Return CType(Me(Me.tableCustOrderHist.ProductNameColumn),String)
                End Get
                Set
                    Me(Me.tableCustOrderHist.ProductNameColumn) = value
                End Set
            End Property
            
            Public Property Total As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCustOrderHist.TotalColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustOrderHist.TotalColumn) = value
                End Set
            End Property
            
            Public Function IsTotalNull() As Boolean
                Return Me.IsNull(Me.tableCustOrderHist.TotalColumn)
            End Function
            
            Public Sub SetTotalNull()
                Me(Me.tableCustOrderHist.TotalColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustOrderHistRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As CustOrderHistRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As CustOrderHistRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As CustOrderHistRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
