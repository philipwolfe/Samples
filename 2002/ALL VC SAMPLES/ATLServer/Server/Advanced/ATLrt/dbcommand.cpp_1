// File: dbcommand.cpp_1
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
// This source code is only intended as a supplement to the
// Microsoft Classes Reference and related electronic
// documentation provided with the library.
// See these sources for detailed information regarding the
// Microsoft C++ Libraries products.

#include "StdAfx.h"
#include "dbcommand.h"

DBCommand::DBCommand(IResultsBuilder *builder)
{
	m_pResultBuilder = builder;
	m_arrParams = NULL;
}

DBCommand::~DBCommand(void)
{
	Clean();
	m_pResultBuilder = NULL;
}

void DBCommand::Clean()
{
	if (m_arrParams)
		delete[] m_arrParams;
	m_arrParams = NULL;
}

HRESULT DBCommand::GetCmdInfo(	CStringA&		cmdName,
								CStringA&		connectionString, 
								IMemoryCache	*spBinaryCache,
								const CSession  &session, 
								CmdInfo			**cmdInfo, 
								bool&			infoFromCache)
{
	HRESULT hr = S_OK;

	CProcedureParameters procInfo;

	if (spBinaryCache == NULL)
	{
		hr = CreateAndStoreCmdInfo(	procInfo, 
									session, 
									spBinaryCache, 
									cmdName, 
									connectionString, 
									cmdInfo, 
									infoFromCache);
		
		ASSERT(!FAILED(hr));
		if (FAILED(hr))
		{
			// if we can't get cmd information, nothing to do but return
			return hr;
		}		
	}
	else
	{
		// we do have a cache, see if our cmd info is in it
		HANDLE hEntry;
		if (SUCCEEDED(spBinaryCache->LookupEntry(cmdName + connectionString, &hEntry)))
		{
			DWORD dwSize = 0;	
			hr = spBinaryCache->GetData(hEntry, (void**)*cmdInfo, &dwSize);

			if (FAILED(hr))
			{
				// if we couldn't get the command info from the cache, create it
				// ourselves
				hr = CreateAndStoreCmdInfo(	procInfo, 
											session, 
											spBinaryCache, 
											cmdName, 
											connectionString, 
											cmdInfo, 
											infoFromCache);
		
				ASSERT(!FAILED(hr));
				if (FAILED(hr))
				{
					// if we can't get cmd information, nothing to do but return
					return hr;
				}		
			}
			else
			{
				// getting here means we got our cmd information from the 
				// cache successfully, all we have to do is set the flag
				// so nobody deletes this value
				infoFromCache = true;

				// close our handle
				CloseHandle(hEntry);
			}
		}
		else
		{
			// if there was nothing in the cache, we'll have to create things on our own
			hr = CreateAndStoreCmdInfo(	procInfo, 
										session, 
										spBinaryCache, 
										cmdName, 
										connectionString, 
										cmdInfo, 
										infoFromCache);
		
			ASSERT(!FAILED(hr));
			if (FAILED(hr))
			{
				// if we can't get cmd information, nothing to do but return
				return hr;
			}		
		}
	}	
	return hr;
}

void DBCommand::IterateRowset(CommandType&	command,
							  ULONG			ulColumns,
							  struct MYBIND* pBind)
{	
	long rowsAffected = 0;

	// get the rowset items	
	while (command.MoveNext() == S_OK)
	{
		for (ULONG j = 1; j <= ulColumns; j++)
		{
			if (pBind[j-1].dwStatus == DBSTATUS_S_ISNULL)
				_tcscpy(pBind[j-1].szValue, _T(""));

			m_pResultBuilder->AddColumnValue(CStringA(pBind[j-1].szValue));
		}			
		m_pResultBuilder->DoneRow();
	}	
}

HRESULT DBCommand::GetResults(CommandType& command, int numParams)
{	
	HRESULT hr = S_OK;
	LONG lRows = 0;

	// Get the column information and bind the output columns.
	ULONG           ulColumns = NULL;
	DBCOLUMNINFO*   pColumnInfo = NULL;
	OLECHAR*        pColumnNames = NULL;
	OLECHAR**       ppNames;
	struct MYBIND*  pColumns    = NULL;
	
	// this loop will handle stored procs that handle multiple result sets
	do 
	{		
		if (command.m_spRowset != NULL)	
		{			
			ulColumns	 = NULL;
			pColumnInfo	 = NULL;
			pColumnNames = NULL;			
			pColumns     = NULL;

			hr = command.GetColumnInfo(&ulColumns, &pColumnInfo, &pColumnNames);
	
			if (FAILED(hr))
				return hr;
	
			if (ulColumns > 0)
			{
				ppNames = new OLECHAR*[ulColumns];
				pColumns = new MYBIND[ulColumns];
				
				command.CreateAccessor(ulColumns, &pColumns[0], sizeof(MYBIND)*ulColumns);
				
				for (ULONG l = 0; l < ulColumns; l++)
				{
					ppNames[l] = pColumnNames;
					if (*pColumnNames)
					{
						while(*pColumnNames++);
					}	
					command.AddBindEntry(l+1, 
										DBTYPE_STR,
										sizeof(TCHAR)*MAX_SIZE, 
										&pColumns[l].szValue,
										NULL, 
										&pColumns[l].dwStatus);
				}
			}
			// bind our command to get column, output parameter and return values
			command.Bind();
	
			// iterate over our results			
			IterateRowset(command, ulColumns, pColumns);

			// we are finished with 1 result set, move on to the others
			Trace::TraceMsg("DBCommand done result set");
			m_pResultBuilder->DoneResultSet();
		
			// clean up
			CoTaskMemFree(pColumnInfo);
			CoTaskMemFree(pColumnNames);
			CoTaskMemFree(*ppNames);

			if (ppNames) 
			{
				delete[] ppNames;
				ppNames = NULL;
			}

			if (pColumns)
			{
				delete[] pColumns;
				pColumns = NULL;
			}
		}		
		lRows = 0;		
	}while (command.GetNextResult(&lRows, false) == S_OK);

	// TODO HACK, m_arrParams[i].dwStatus is not being set properly, workaround it
	// for now
	for (int i = 0; i < numParams; i++)
	{
		if (i == 0)
		{			
			m_pResultBuilder->SetReturnValue(CStringA(m_arrParams[i].szValue));
		}
		else if (m_arrParams[i].dwStatus == DBPARAMTYPE_RETURNVALUE)
		{
			m_pResultBuilder->AddOutputParamValue(CStringA(m_arrParams[i].szValue));
		}		
	}	
	return hr;
}

HRESULT DBCommand::ExecuteCommand(	const CSession&	session,						   
									CmdInfo			*cmdInfo,						   
									StringList&		inputParams)
{
	ASSERT(cmdInfo != NULL);

	if (cmdInfo == NULL)
	{
		return E_FAIL;
	}	

	USES_CONVERSION;
	HRESULT hr = S_OK;

	CommandType command;

	// create the command using our call string
	hr = command.Create(session, cmdInfo->cmdCallString);

	// only going to call this once
	hr = command.Prepare(1);

	// if this stored proc takes parameters pass them in
	int numParams = cmdInfo->paramTypes.GetCount();
	if (numParams > 0)
	{
		DBPARAMBINDINFO* bindInfo = new DBPARAMBINDINFO[numParams];
		ULONG* ordinals			  = new ULONG[numParams];		
		m_arrParams				  = new MYBIND[numParams];

		// make the bindings for the accessor based on the DBTYPE_STR data type
		command.CreateParameterAccessor(numParams, &m_arrParams[0], sizeof(MYBIND)*numParams);
				
		for (int l = 0; l < numParams; l++)
		{
			// Set up information for the SetParameterInfo call
			ordinals[l] = l+1;
			bindInfo[l].pwszDataSourceType = T2OLE(_T("DBTYPE_CHAR"));
			bindInfo[l].pwszName = NULL;					
			bindInfo[l].ulParamSize = MAX_SIZE;
			bindInfo[l].bPrecision = 0;
			bindInfo[l].bScale = 0;

			DWORD dwFlags = 0;
			
			if (cmdInfo->paramTypes[l] == DBPARAMTYPE_INPUT || 
				cmdInfo->paramTypes[l] == DBPARAMTYPE_INPUTOUTPUT)
					dwFlags |= DBPARAMFLAGS_ISINPUT;

			if (cmdInfo->paramTypes[l] == DBPARAMTYPE_OUTPUT ||
				cmdInfo->paramTypes[l] == DBPARAMTYPE_INPUTOUTPUT ||
				cmdInfo->paramTypes[l] == DBPARAMTYPE_RETURNVALUE)
					dwFlags |= DBPARAMFLAGS_ISOUTPUT;
			
			bindInfo[l].dwFlags = dwFlags;

			// Set up information for bindings
			if (cmdInfo->paramTypes[l] == DBPARAMTYPE_RETURNVALUE)
			{				
				command.AddParameterEntry(	1, 
											DBTYPE_STR, 
											sizeof(TCHAR)*MAX_SIZE,
											&m_arrParams[l].szValue, 
											NULL, 
											&m_arrParams[l].dwStatus, 
											DBPARAMIO_OUTPUT);
			}
			else
			{			
				command.AddParameterEntry(	l+1, 
											DBTYPE_STR, 
											sizeof(TCHAR)*MAX_SIZE,
											&m_arrParams[l].szValue, 
											NULL, 
											&m_arrParams[l].dwStatus, 
											cmdInfo->paramTypes[l]);
			}
		}				

		// call ICommandWithParameters::SetParameterInfo so that we can
		// tell the provider to convert the parameter types to DBTYPE_STR
		command.SetParameterInfo(numParams, ordinals, bindInfo);		

		// cleanup
		delete[] ordinals;
		delete[] bindInfo;
	}
		
	// put in our input parameters
	if (inputParams.GetCount() > 0)
	{	
		POSITION begin = inputParams.GetHeadPosition();
		int size = inputParams.GetCount();

		ASSERT(begin != NULL);
		
		for (int i = 0; i < size; i++)
		{
			CStringA paramValue = inputParams.GetNext(begin);
			ULONG   ulCount = 0;
		
			for (int l = ulCount; l < numParams; l++)
			{
				if (cmdInfo->paramTypes[l] == DBPARAMTYPE_INPUT || cmdInfo->paramTypes[l] == DBPARAMTYPE_INPUTOUTPUT)
				{		
					ASSERT(!paramValue.IsEmpty());

					if (!paramValue.IsEmpty())
					{						
						_tcsncpy(m_arrParams[l].szValue, paramValue, paramValue.GetLength());						
					}
					else
					{						
						_tcsncpy(m_arrParams[l].szValue, "", strlen(""));
					}	
					ulCount = l + 1;				
				}	
			}	
		}
	}

	// execute our command and get back a rowset		
	hr = command.Open(NULL, NULL, false);	
	
	if (SUCCEEDED(hr))
	{
		hr = GetResults(command, numParams);
	}
	return hr;
}

HRESULT DBCommand::Execute(CStringA&				cmdName, 
						   CStringA&				connectionString,
						   StringList&				inputParams,
						   IDataSourceCache			*spDataSrcCache,
						   IMemoryCache				*spBinaryCache)
{
	// clear out any old results
	Clean();

	bool dsFromCache = false;
	HRESULT hr = S_OK;
		
	// get a dataconnection
	CDataConnection datasource;	
	hr = GetDataConnection(connectionString, spDataSrcCache, datasource, dsFromCache);
	
	ASSERT(!FAILED(hr));

	if (FAILED(hr))
	{
		// nothing we can do, we can't get a data connection, get out of here
		return hr;
	}

	// if we got here, then we got a data connection somehow, either using the cache,
	// or opening one on our own

	// get information about this stored procedure's parameters						
	CmdInfo *cmdInfo = NULL;
	bool infoFromCache = false;
	
	hr = GetCmdInfo(cmdName, 
					connectionString, 
					spBinaryCache, 
					datasource, 
					&cmdInfo, 
					infoFromCache);

	ASSERT(!FAILED(hr));
	if (FAILED(hr))
	{
		// if we failed, there is a chance that it is because our data connection was 
		// stale, try opening another one
		hr = RecoverDataConnection(connectionString, spDataSrcCache, datasource, dsFromCache);
		
		if (SUCCEEDED(hr))
		{			
			// re-opening the connection worked, try again to get our cmd information
			hr = GetCmdInfo(cmdName, 
							connectionString, 
							spBinaryCache, 
							datasource, 
							&cmdInfo, 
							infoFromCache);
		}
	}
	
	// check to see if we could get our command info
	ASSERT(!FAILED(hr));
	if (FAILED(hr))
	{
		// nothing w can do, just get out
		return hr;
	}

	// if we got here, the we were able to get information about our stored procedure
	// so now execute that stored proc
	hr = ExecuteCommand(datasource,									
						cmdInfo,
						inputParams);				
	ASSERT(!FAILED(hr));

	// not a whole lot of error checking we can do on the returned hr, if the execute
	// command failed, we are going to return the bad hr

	// close the data connection if we didn't get one from the cache
	if (!dsFromCache)
		datasource.Close();

	// delete our command info structure if we didn't get it from the cache
	if (!infoFromCache)
	{
		cmdInfo->paramTypes.RemoveAll();
		delete cmdInfo;
	}

	return hr;
}

HRESULT DBCommand::RecoverDataConnection(	CStringA&			connectionString,
											IDataSourceCache	*spDataSrcCache, 
											CDataConnection&	datasource, 
											bool&				fromCache)
{
	HRESULT hr = S_OK;

	if (spDataSrcCache == NULL)
	{
		// if we weren't give a cache, just open the data connection and return the results
		// also set the from cache flag to false
		fromCache = false;
		hr = datasource.Open(connectionString);
	}
	else
	{
		// if we were given a cache add a new data connection to it and return the results
		// also set the from cache flag to true
		fromCache = true;
		hr = spDataSrcCache->Add(connectionString,connectionString, &datasource);		
	}
	
	return hr;
}

HRESULT DBCommand::GetDataConnection(CStringA&			connectionString, 
									 IDataSourceCache	*spDataSrcCache, 
									 CDataConnection&	datasource,
									 bool& fromCache)
{
	HRESULT hr = S_OK;

	if (spDataSrcCache != NULL)
	{
		// if we are given a cache, try to find the datasource in the cache
		// using the connection string as the id
		if (FAILED(spDataSrcCache->Lookup(connectionString, &datasource)))
		{
			// something went wrong in looking for the dataconnection in our 
			// cache, try to open a new one
			hr = spDataSrcCache->Add(connectionString, connectionString, &datasource);

			ASSERT(!FAILED(hr));
			if (FAILED(hr))
			{
				// if we failed here, that means that we could not add a new connection, there
				// is nothing we can do at this point, just return the failing hr
				return hr;
			}
		}

		// indicate that we got a data connection from the cache
		fromCache = true;
	}
	else
	{
		// if we weren't given a cache to use, just open the data connection normally
		hr = datasource.Open(connectionString);

		ASSERT(!FAILED(hr));
		if (FAILED(hr))
		{
			// nothing we can do if we fail here, just return the failing hr
			return hr;
		}
	}

	return hr;
}

HRESULT DBCommand::BuildCmdStringAndParams(CProcedureParameters&	procInfo,
										   CString&					cmdName,
										   CmdInfo*					cmdInfo)
{
	HRESULT hr = S_OK;

	// go through each parameter and build our call string	
	bool first = true;
	
	CStringA strTemp("? = ");
	CStringA strCmd;
	strCmd.Format("Call %s ", cmdName);

	while (procInfo.MoveNext() == S_OK)
	{			
		// store the type of the parameter
		cmdInfo->paramTypes.Add((WORD)procInfo.m_nType);		
		
		// build the parameter list part of our cmd call string
		switch (procInfo.m_nType)
		{
			case DBPARAMTYPE_RETURNVALUE:
				strTemp += strCmd;
				strCmd = strTemp;				
				break;

			case DBPARAMTYPE_INPUT:
			case DBPARAMTYPE_INPUTOUTPUT:		
			case DBPARAMTYPE_OUTPUT:
				if (first)
				{
					strCmd += "(?";
					first = false;
				}
				else
					strCmd += ", ?";
				break;
			default:
				break;
		}
	}
	if (!first)
		strCmd += ")";

	cmdInfo->cmdCallString.Format("{ %s }", strCmd);
	
	return hr;
}

HRESULT DBCommand::CreateAndStoreCmdInfo(CProcedureParameters&	procInfo,
										 const CSession&		session,
										 IMemoryCache			*spBinaryCache,
										 CString&				cmdName,
										 CString&				connectionString,
										 CmdInfo**				cmdInfo,
										 bool&					infoFromCache)
{
	ASSERT(cmdInfo != NULL);
	if (cmdInfo == NULL)
	{
		return E_FAIL;
	}

	HRESULT hr = S_OK;

	*cmdInfo = new CmdInfo();
	infoFromCache = false;

	ASSERT(*cmdInfo != NULL);
	if (*cmdInfo == NULL)
	{
		// we don't have enough memory!
		return E_OUTOFMEMORY;
	}

	// connect to get information about our stored procedure
	hr = procInfo.Open(session, NULL, NULL, cmdName);

	ASSERT(!FAILED(hr));
	if (FAILED(hr))
	{
		// if we can't get cmd information, nothing to do but return
		return hr;
	}

	// get our cmd info
	hr = BuildCmdStringAndParams(procInfo, cmdName, *cmdInfo);
	
	ASSERT(!FAILED(hr));
	if (FAILED(hr))
	{
		// nothing we can do, we just can't get cmd info
		return hr;
	}
	
	if (spBinaryCache != NULL)
	{
		// try to add this info into the cache
		if (SUCCEEDED(spBinaryCache->Add((LPCSTR)(cmdName + connectionString),
										 (void*)*cmdInfo,
										 sizeof(CmdInfo),
										 NULL,
										 NULL,
										 NULL,
										 NULL)))
		{
			// set this flag so nobody will delete cmdInfo
			infoFromCache = true;
		}		
	}
	else
	{
		// we don't have a cache to use
		infoFromCache = false;
	}

	procInfo.Close();
	procInfo.ClearRecordMemory();
	procInfo.FreeRecordMemory();

	return hr;
}

	