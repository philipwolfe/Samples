SharedClasses - shared class in ATL/MFC
Igor Chouvalov, Dundas Software Ltd

The EventDemo sample demonstrates handling events in native C++.

The Application is based on a MFC Dialog based application
generated by the AppWizard.

The application has two main windows: the main CEventDemoDlg window 
that acts as a source for the 'MoveParent' event, and a child 'Sticker'
window of type CStickerDlg, that handles this MoveParent event.
When you move the main dialog window, the Sticker windows follows it 
keeping itself in the center of the main dialog.

To do this, we first need to define an event in the source class
(CEventDemoDlg). The following code in the EventDemoDlg.h does this:

	// Event definition.
	__event void MoveParent();

In the receiver class (CStickerDlg) we define a handler for the event.
This is simply a method with the same name as event signature, prefixed
by 'On'. The following code in the StickerDlg.h does this.

	// MoveParent event handler.
	void OnMoveParent();

The actual handler code in StickerDlg.cpp is as follows:

void CStickerDlg::OnMoveParent()
{
	// Recenter Sticker.
	CenterWindow(GetParent());
}

To receive the event the receiver should subscribe to the event using
the __hook function:

//*******************************************************************
//	CreateSticker
//
//	Create Sticker, initialize message text and subscribe the Sticker
//	to receive the event from the main dialog.
//
//	PARAMS:	szMesssage - Sticker message.
//			pParent - pointer to the dialog that hosts Sticker.
//
//	RETURNS: TRUE - if Sticker was successfully created.
//	         FALSE - if function failed to create Sticker.
//*******************************************************************
BOOL CStickerDlg::CreateSticker(LPCTSTR szMesssage, 
                                CEventDemoDlg* pParent)
{
	BOOL bRet;

	// Create Sticker dialog.
	bRet = Create(IDD_STICKERDLG, pParent);

	// Set sticker message.
	SetDlgItemText(IDC_MESSAGE, szMesssage);

	m_pParent = pParent;

	// Subscribe for parent dialog event.
	if(m_pParent != NULL)
		__hook(&CEventDemoDlg::MoveParent, m_pParent,
                   &CStickerDlg::OnMoveParent);

	return bRet;
}

To unsubscribe from the event the receiver should call the __hook 
function:

//*******************************************************************
//	RemoveSticker
//
//	Unsubscribes the Sticker from the parent dialog event and 
//    destroys the Sticker.
//*******************************************************************
void CStickerDlg::RemoveSticker()
{
	// Unsubscribe from the event.
	if(m_pParent != NULL)
		__unhook(&CEventDemoDlg::MoveParent, m_pParent,
                     &CStickerDlg::OnMoveParent);

	// Destroy the Sticker.
	EndDialog(0);
}

To Fire the event you use the __raise function:

//*******************************************************************
//	OnMove
//
//	Handles moving the dialog. Fires event for the sticker to move.
//*******************************************************************
void CEventDemoDlg::OnMove(int x,int y)
{
	CDialog::OnMove(x, y);

	if(pSticker != NULL)
		__raise MoveParent();
}
