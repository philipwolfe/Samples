//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Xml;
using System.Runtime.Serialization;


[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Diagnostics.DebuggerStepThrough()]
[System.ComponentModel.ToolboxItem(true)]
public class propertiesDataSet1 : DataSet {
    
    private BT_PROPERTIESDataTable tableBT_PROPERTIES;
    
    public propertiesDataSet1() {
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    protected propertiesDataSet1(SerializationInfo info, StreamingContext context) {
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((strSchema != null)) {
            DataSet ds = new DataSet();
            ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["BT_PROPERTIES"] != null)) {
                this.Tables.Add(new BT_PROPERTIESDataTable(ds.Tables["BT_PROPERTIES"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.InitClass();
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public BT_PROPERTIESDataTable BT_PROPERTIES {
        get {
            return this.tableBT_PROPERTIES;
        }
    }
    
    public override DataSet Clone() {
        propertiesDataSet1 cln = ((propertiesDataSet1)(base.Clone()));
        cln.InitVars();
        return cln;
    }
    
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    protected override void ReadXmlSerializable(XmlReader reader) {
        this.Reset();
        DataSet ds = new DataSet();
        ds.ReadXml(reader);
        if ((ds.Tables["BT_PROPERTIES"] != null)) {
            this.Tables.Add(new BT_PROPERTIESDataTable(ds.Tables["BT_PROPERTIES"]));
        }
        this.DataSetName = ds.DataSetName;
        this.Prefix = ds.Prefix;
        this.Namespace = ds.Namespace;
        this.Locale = ds.Locale;
        this.CaseSensitive = ds.CaseSensitive;
        this.EnforceConstraints = ds.EnforceConstraints;
        this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        this.InitVars();
    }
    
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
    }
    
    internal void InitVars() {
        this.tableBT_PROPERTIES = ((BT_PROPERTIESDataTable)(this.Tables["BT_PROPERTIES"]));
        if ((this.tableBT_PROPERTIES != null)) {
            this.tableBT_PROPERTIES.InitVars();
        }
    }
    
    private void InitClass() {
        this.DataSetName = "propertiesDataSet1";
        this.Prefix = "";
        this.Namespace = "http://www.tempuri.org/propertiesDataSet1.xsd";
        this.Locale = new System.Globalization.CultureInfo("en-US");
        this.CaseSensitive = false;
        this.EnforceConstraints = true;
        this.tableBT_PROPERTIES = new BT_PROPERTIESDataTable();
        this.Tables.Add(this.tableBT_PROPERTIES);
    }
    
    private bool ShouldSerializeBT_PROPERTIES() {
        return false;
    }
    
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    public delegate void BT_PROPERTIESRowChangeEventHandler(object sender, BT_PROPERTIESRowChangeEvent e);
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BT_PROPERTIESDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnid;
        
        private DataColumn columnname;
        
        private DataColumn columnvalue;
        
        internal BT_PROPERTIESDataTable() : 
                base("BT_PROPERTIES") {
            this.InitClass();
        }
        
        internal BT_PROPERTIESDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn idColumn {
            get {
                return this.columnid;
            }
        }
        
        internal DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        internal DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        public BT_PROPERTIESRow this[int index] {
            get {
                return ((BT_PROPERTIESRow)(this.Rows[index]));
            }
        }
        
        public event BT_PROPERTIESRowChangeEventHandler BT_PROPERTIESRowChanged;
        
        public event BT_PROPERTIESRowChangeEventHandler BT_PROPERTIESRowChanging;
        
        public event BT_PROPERTIESRowChangeEventHandler BT_PROPERTIESRowDeleted;
        
        public event BT_PROPERTIESRowChangeEventHandler BT_PROPERTIESRowDeleting;
        
        public void AddBT_PROPERTIESRow(BT_PROPERTIESRow row) {
            this.Rows.Add(row);
        }
        
        public BT_PROPERTIESRow AddBT_PROPERTIESRow(int id, string name, string value) {
            BT_PROPERTIESRow rowBT_PROPERTIESRow = ((BT_PROPERTIESRow)(this.NewRow()));
            rowBT_PROPERTIESRow.ItemArray = new object[] {
                    id,
                    name,
                    value};
            this.Rows.Add(rowBT_PROPERTIESRow);
            return rowBT_PROPERTIESRow;
        }
        
        public BT_PROPERTIESRow FindByid(int id) {
            return ((BT_PROPERTIESRow)(this.Rows.Find(new object[] {
                        id})));
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            BT_PROPERTIESDataTable cln = ((BT_PROPERTIESDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new BT_PROPERTIESDataTable();
        }
        
        internal void InitVars() {
            this.columnid = this.Columns["id"];
            this.columnname = this.Columns["name"];
            this.columnvalue = this.Columns["value"];
        }
        
        private void InitClass() {
            this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnid);
            this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnname);
            this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnvalue);
            this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                            this.columnid}, true));
            this.columnid.AllowDBNull = false;
            this.columnid.Unique = true;
        }
        
        public BT_PROPERTIESRow NewBT_PROPERTIESRow() {
            return ((BT_PROPERTIESRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new BT_PROPERTIESRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(BT_PROPERTIESRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.BT_PROPERTIESRowChanged != null)) {
                this.BT_PROPERTIESRowChanged(this, new BT_PROPERTIESRowChangeEvent(((BT_PROPERTIESRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.BT_PROPERTIESRowChanging != null)) {
                this.BT_PROPERTIESRowChanging(this, new BT_PROPERTIESRowChangeEvent(((BT_PROPERTIESRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.BT_PROPERTIESRowDeleted != null)) {
                this.BT_PROPERTIESRowDeleted(this, new BT_PROPERTIESRowChangeEvent(((BT_PROPERTIESRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.BT_PROPERTIESRowDeleting != null)) {
                this.BT_PROPERTIESRowDeleting(this, new BT_PROPERTIESRowChangeEvent(((BT_PROPERTIESRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveBT_PROPERTIESRow(BT_PROPERTIESRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BT_PROPERTIESRow : DataRow {
        
        private BT_PROPERTIESDataTable tableBT_PROPERTIES;
        
        internal BT_PROPERTIESRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableBT_PROPERTIES = ((BT_PROPERTIESDataTable)(this.Table));
        }
        
        public int id {
            get {
                return ((int)(this[this.tableBT_PROPERTIES.idColumn]));
            }
            set {
                this[this.tableBT_PROPERTIES.idColumn] = value;
            }
        }
        
        public string name {
            get {
                try {
                    return ((string)(this[this.tableBT_PROPERTIES.nameColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableBT_PROPERTIES.nameColumn] = value;
            }
        }
        
        public string value {
            get {
                try {
                    return ((string)(this[this.tableBT_PROPERTIES.valueColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableBT_PROPERTIES.valueColumn] = value;
            }
        }
        
        public bool IsnameNull() {
            return this.IsNull(this.tableBT_PROPERTIES.nameColumn);
        }
        
        public void SetnameNull() {
            this[this.tableBT_PROPERTIES.nameColumn] = System.Convert.DBNull;
        }
        
        public bool IsvalueNull() {
            return this.IsNull(this.tableBT_PROPERTIES.valueColumn);
        }
        
        public void SetvalueNull() {
            this[this.tableBT_PROPERTIES.valueColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BT_PROPERTIESRowChangeEvent : EventArgs {
        
        private BT_PROPERTIESRow eventRow;
        
        private DataRowAction eventAction;
        
        public BT_PROPERTIESRowChangeEvent(BT_PROPERTIESRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public BT_PROPERTIESRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
