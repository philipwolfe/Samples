//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttachDBFileName {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("PerfTestDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class PerfTestDataSet : System.Data.DataSet {
        
        private TestDataDataTable tableTestData;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public PerfTestDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected PerfTestDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestData"] != null)) {
                    base.Tables.Add(new TestDataDataTable(ds.Tables["TestData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestDataDataTable TestData {
            get {
                return this.tableTestData;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            PerfTestDataSet cln = ((PerfTestDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TestData"] != null)) {
                    base.Tables.Add(new TestDataDataTable(ds.Tables["TestData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableTestData = ((TestDataDataTable)(base.Tables["TestData"]));
            if ((initTable == true)) {
                if ((this.tableTestData != null)) {
                    this.tableTestData.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PerfTestDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PerfTestDataSet.xsd";
            this.EnforceConstraints = true;
            this.tableTestData = new TestDataDataTable();
            base.Tables.Add(this.tableTestData);
        }
        
        private bool ShouldSerializeTestData() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            PerfTestDataSet ds = new PerfTestDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TestDataRowChangeEventHandler(object sender, TestDataRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTestID;
            
            private System.Data.DataColumn columnfirstValue;
            
            private System.Data.DataColumn columnsecondValue;
            
            private System.Data.DataColumn columntimeStamp;
            
            public TestDataDataTable() {
                this.TableName = "TestData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal TestDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected TestDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn TestIDColumn {
                get {
                    return this.columnTestID;
                }
            }
            
            public System.Data.DataColumn firstValueColumn {
                get {
                    return this.columnfirstValue;
                }
            }
            
            public System.Data.DataColumn secondValueColumn {
                get {
                    return this.columnsecondValue;
                }
            }
            
            public System.Data.DataColumn timeStampColumn {
                get {
                    return this.columntimeStamp;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public TestDataRow this[int index] {
                get {
                    return ((TestDataRow)(this.Rows[index]));
                }
            }
            
            public event TestDataRowChangeEventHandler TestDataRowChanged;
            
            public event TestDataRowChangeEventHandler TestDataRowChanging;
            
            public event TestDataRowChangeEventHandler TestDataRowDeleted;
            
            public event TestDataRowChangeEventHandler TestDataRowDeleting;
            
            public void AddTestDataRow(TestDataRow row) {
                this.Rows.Add(row);
            }
            
            public TestDataRow AddTestDataRow(string firstValue, string secondValue, System.DateTime timeStamp) {
                TestDataRow rowTestDataRow = ((TestDataRow)(this.NewRow()));
                rowTestDataRow.ItemArray = new object[] {
                        null,
                        firstValue,
                        secondValue,
                        timeStamp};
                this.Rows.Add(rowTestDataRow);
                return rowTestDataRow;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                TestDataDataTable cln = ((TestDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new TestDataDataTable();
            }
            
            internal void InitVars() {
                this.columnTestID = base.Columns["TestID"];
                this.columnfirstValue = base.Columns["firstValue"];
                this.columnsecondValue = base.Columns["secondValue"];
                this.columntimeStamp = base.Columns["timeStamp"];
            }
            
            private void InitClass() {
                this.columnTestID = new System.Data.DataColumn("TestID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestID);
                this.columnfirstValue = new System.Data.DataColumn("firstValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirstValue);
                this.columnsecondValue = new System.Data.DataColumn("secondValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecondValue);
                this.columntimeStamp = new System.Data.DataColumn("timeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntimeStamp);
                this.columnTestID.AutoIncrement = true;
                this.columnTestID.AllowDBNull = false;
                this.columnTestID.ReadOnly = true;
                this.columnfirstValue.MaxLength = 50;
                this.columnsecondValue.MaxLength = 50;
            }
            
            public TestDataRow NewTestDataRow() {
                return ((TestDataRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TestDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TestDataRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestDataRowChanged != null)) {
                    this.TestDataRowChanged(this, new TestDataRowChangeEvent(((TestDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestDataRowChanging != null)) {
                    this.TestDataRowChanging(this, new TestDataRowChangeEvent(((TestDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestDataRowDeleted != null)) {
                    this.TestDataRowDeleted(this, new TestDataRowChangeEvent(((TestDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestDataRowDeleting != null)) {
                    this.TestDataRowDeleting(this, new TestDataRowChangeEvent(((TestDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTestDataRow(TestDataRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PerfTestDataSet ds = new PerfTestDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class TestDataRow : System.Data.DataRow {
            
            private TestDataDataTable tableTestData;
            
            internal TestDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestData = ((TestDataDataTable)(this.Table));
            }
            
            public int TestID {
                get {
                    return ((int)(this[this.tableTestData.TestIDColumn]));
                }
                set {
                    this[this.tableTestData.TestIDColumn] = value;
                }
            }
            
            public string firstValue {
                get {
                    try {
                        return ((string)(this[this.tableTestData.firstValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'firstValue\' in table \'TestData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestData.firstValueColumn] = value;
                }
            }
            
            public string secondValue {
                get {
                    try {
                        return ((string)(this[this.tableTestData.secondValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'secondValue\' in table \'TestData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestData.secondValueColumn] = value;
                }
            }
            
            public System.DateTime timeStamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTestData.timeStampColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'timeStamp\' in table \'TestData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestData.timeStampColumn] = value;
                }
            }
            
            public bool IsfirstValueNull() {
                return this.IsNull(this.tableTestData.firstValueColumn);
            }
            
            public void SetfirstValueNull() {
                this[this.tableTestData.firstValueColumn] = System.Convert.DBNull;
            }
            
            public bool IssecondValueNull() {
                return this.IsNull(this.tableTestData.secondValueColumn);
            }
            
            public void SetsecondValueNull() {
                this[this.tableTestData.secondValueColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeStampNull() {
                return this.IsNull(this.tableTestData.timeStampColumn);
            }
            
            public void SettimeStampNull() {
                this[this.tableTestData.timeStampColumn] = System.Convert.DBNull;
            }
        }
        
        public class TestDataRowChangeEvent : System.EventArgs {
            
            private TestDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public TestDataRowChangeEvent(TestDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TestDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AttachDBFileName.PerfTestDataSetTableAdapters {
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.SqlClient.SqlCommand[] m_commandCollection;
        
        private bool m_clearBeforeFill;
        
        public TestDataTableAdapter() {
            this.m_clearBeforeFill = true;
        }
        
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
            set {
                this.m_connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestData";
            tableMapping.ColumnMappings.Add("TestID", "TestID");
            tableMapping.ColumnMappings.Add("firstValue", "firstValue");
            tableMapping.ColumnMappings.Add("secondValue", "secondValue");
            tableMapping.ColumnMappings.Add("tiemStamp", "timeStamp");
            tableMapping.ColumnMappings.Add("timeStamp", "timeStamp");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.m_adapter.InsertCommand.Connection = this.Connection;
            this.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TestData] ([firstValue], [secondValue], [timeStamp]) VALUES (@" +
                "firstValue, @secondValue, @timeStamp)";
            this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@firstValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "firstValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@secondValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "secondValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            this.m_connection.ConnectionString = AttachDBFileName.Properties.Settings.Default.PerfTestConnectionString;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this.m_commandCollection[0].Connection = this.Connection;
            this.m_commandCollection[0].CommandText = "SELECT TestID, firstValue, secondValue, timeStamp FROM dbo.TestData";
            this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
            this.m_commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this.m_commandCollection[1].Connection = this.Connection;
            this.m_commandCollection[1].CommandText = "[spInsertData(@firstValue, @secondValue, @timeStamp)]";
            this.m_commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this.m_commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@firstValue", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@secondValue", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PerfTestDataSet.TestDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PerfTestDataSet.TestDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PerfTestDataSet.TestDataDataTable dataTable = new PerfTestDataSet.TestDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Update(PerfTestDataSet.TestDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(PerfTestDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestData");
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string firstValue, string secondValue, System.Nullable<System.DateTime> timeStamp) {
            if ((firstValue == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(firstValue));
            }
            if ((secondValue == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(secondValue));
            }
            if ((timeStamp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            this.Adapter.InsertCommand.Connection.Open();
            try {
                return this.Adapter.InsertCommand.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual System.Nullable<int> spInsertData(string firstValue, string secondValue, System.Nullable<System.DateTime> timeStamp) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((firstValue == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(firstValue));
            }
            if ((secondValue == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(secondValue));
            }
            if ((timeStamp.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            command.Connection.Open();
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return new System.Nullable<int>(((int)(command.Parameters[0].Value)));
            }
        }
    }
}
