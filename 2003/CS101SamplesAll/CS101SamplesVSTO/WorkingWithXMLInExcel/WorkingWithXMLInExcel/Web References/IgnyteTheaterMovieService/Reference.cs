//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.30
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.30.
// 
namespace Working_with_XML_in_Excel.IgnyteTheaterMovieService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MovieInformationSoap", Namespace="http://www.ignyte.com/whatsshowing")]
    public partial class MovieInformation : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTheatersAndMoviesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpcomingMoviesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MovieInformation() {
            this.Url = Working_with_XML_in_Excel.Properties.Settings.Default.Working_with_XML_in_Excel_IgnyteTheaterMovieService_MovieInformation;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTheatersAndMoviesCompletedEventHandler GetTheatersAndMoviesCompleted;
        
        /// <remarks/>
        public event GetUpcomingMoviesCompletedEventHandler GetUpcomingMoviesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ignyte.com/whatsshowing/GetTheatersAndMovies", RequestNamespace="http://www.ignyte.com/whatsshowing", ResponseNamespace="http://www.ignyte.com/whatsshowing", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Theater[] GetTheatersAndMovies(string zipCode, int radius) {
            object[] results = this.Invoke("GetTheatersAndMovies", new object[] {
                        zipCode,
                        radius});
            return ((Theater[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTheatersAndMoviesAsync(string zipCode, int radius) {
            this.GetTheatersAndMoviesAsync(zipCode, radius, null);
        }
        
        /// <remarks/>
        public void GetTheatersAndMoviesAsync(string zipCode, int radius, object userState) {
            if ((this.GetTheatersAndMoviesOperationCompleted == null)) {
                this.GetTheatersAndMoviesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTheatersAndMoviesOperationCompleted);
            }
            this.InvokeAsync("GetTheatersAndMovies", new object[] {
                        zipCode,
                        radius}, this.GetTheatersAndMoviesOperationCompleted, userState);
        }
        
        private void OnGetTheatersAndMoviesOperationCompleted(object arg) {
            if ((this.GetTheatersAndMoviesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTheatersAndMoviesCompleted(this, new GetTheatersAndMoviesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ignyte.com/whatsshowing/GetUpcomingMovies", RequestNamespace="http://www.ignyte.com/whatsshowing", ResponseNamespace="http://www.ignyte.com/whatsshowing", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UpcomingMovie[] GetUpcomingMovies(int month, int year) {
            object[] results = this.Invoke("GetUpcomingMovies", new object[] {
                        month,
                        year});
            return ((UpcomingMovie[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUpcomingMoviesAsync(int month, int year) {
            this.GetUpcomingMoviesAsync(month, year, null);
        }
        
        /// <remarks/>
        public void GetUpcomingMoviesAsync(int month, int year, object userState) {
            if ((this.GetUpcomingMoviesOperationCompleted == null)) {
                this.GetUpcomingMoviesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpcomingMoviesOperationCompleted);
            }
            this.InvokeAsync("GetUpcomingMovies", new object[] {
                        month,
                        year}, this.GetUpcomingMoviesOperationCompleted, userState);
        }
        
        private void OnGetUpcomingMoviesOperationCompleted(object arg) {
            if ((this.GetUpcomingMoviesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpcomingMoviesCompleted(this, new GetUpcomingMoviesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.ignyte.com/whatsshowing")]
    public partial class Theater {
        
        private string nameField;
        
        private string addressField;
        
        private Movie[] moviesField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public Movie[] Movies {
            get {
                return this.moviesField;
            }
            set {
                this.moviesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.ignyte.com/whatsshowing")]
    public partial class Movie {
        
        private string ratingField;
        
        private string nameField;
        
        private string runningTimeField;
        
        private string showTimesField;
        
        /// <remarks/>
        public string Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string RunningTime {
            get {
                return this.runningTimeField;
            }
            set {
                this.runningTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ShowTimes {
            get {
                return this.showTimesField;
            }
            set {
                this.showTimesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.ignyte.com/whatsshowing")]
    public partial class UpcomingMovie {
        
        private string movieNameField;
        
        /// <remarks/>
        public string MovieName {
            get {
                return this.movieNameField;
            }
            set {
                this.movieNameField = value;
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetTheatersAndMoviesCompletedEventHandler(object sender, GetTheatersAndMoviesCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetTheatersAndMoviesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTheatersAndMoviesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Theater[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Theater[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetUpcomingMoviesCompletedEventHandler(object sender, GetUpcomingMoviesCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetUpcomingMoviesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpcomingMoviesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UpcomingMovie[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UpcomingMovie[])(this.results[0]));
            }
        }
    }
}
