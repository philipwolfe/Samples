using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace UsingBindingSource
{
	public partial class Form1 : Form
	{

		// A DataSet of Employee data, used for the 2nd and 3rd tabs
		private System.Data.DataSet employeeDataSet;

		// A List of Employees, for use as a DataSource for binding on the 3rd tab
		private System.Collections.Generic.List<Employee> employeesList;

		public Form1()
		{
			InitializeComponent();
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			// TODO: This line of code loads data into the 'adventureWorks_DataDataSet.Employee' table. You can move, or remove it, as needed.
			this.employeeTableAdapter.Fill(this.adventureWorks_DataDataSet.Employee);

			// NOTE:
			// Method code above this was generated by the IDE as part of
			// the design time work on the first tab
			///

			// Retrieve the employee data
			this.employeeDataSet = LoadDBData();
			SetupGrid2();
			SetupGrid3();
		}

		private void SetupGrid2()
		{
			// Create a BindingSource of employees
			BindingSource dbBindingSource = new BindingSource();
            dbBindingSource.AllowNew = false;
			dbBindingSource.DataSource = this.employeeDataSet.Tables["Employee"];

			// Create a BindingNavigator for navigating through the Employees
			BindingNavigator dbBindingNavigator = new BindingNavigator(true);
			dbBindingNavigator.BindingSource = dbBindingSource;

			// Bind the controls to the BindingSource
			this.dbBirthDateDateTimePicker.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "BirthDate", true));
			this.dbEmployeeIdTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "EmployeeId", true));
			this.dbFirstNameTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "FirstName", true));
			this.dbHireDateDateTimePicker.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "HireDate", true));
			this.dbLastNameTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "LastName", true));
			this.dbMaritalStatusTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "MaritalStatus", true));
			this.dbTitleTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", dbBindingSource, "Title", true));

			// Place navigator on 2nd tab
			this.tabPage2.Controls.Add(dbBindingNavigator);
			dbBindingNavigator.Dock = DockStyle.Top;
		}

		private void SetupGrid3()
		{
			// Wrap the employee class around the employee data
			this.employeesList = Employee.LoadEmployees(this.employeeDataSet.Tables["Employee"]);

			// Create a BindingSource of employees
			BindingSource classBindingSource = new BindingSource();
			classBindingSource.DataSource = this.employeesList;
            classBindingSource.AllowNew = false;

			// Create a BindingNavigator for navigating through the Employees
			BindingNavigator classBindingNavigator = new BindingNavigator(true);
			classBindingNavigator.BindingSource = classBindingSource;

			// Bind the controls to the BindingSource
			this.classBirthDateDateTimePicker.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "BirthDate", true));
			this.classEmployeeIdTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "EmployeeId", true));
			this.classFirstNameTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "FirstName", true));
			this.classHireDateDateTimePicker.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "HireDate", true));
			this.classLastNameTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "LastName", true));
			this.classMaritalStatusTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "MaritalStatus", true));
			this.classTitleTextBox.DataBindings.Add(
				new System.Windows.Forms.Binding("Text", classBindingSource, "Title", true));

			// Place navigator on 3rd tab
			this.tabPage3.Controls.Add(classBindingNavigator);
			classBindingNavigator.Dock = DockStyle.Top;
		}

		// Retrieve Employee data from the database
		private DataSet LoadDBData()
		{
			try
			{
				// Retrieve Employee data from database into a DataSet
				// Build a connnection string to the database
				SqlConnectionStringBuilder connectStringBuilder = new SqlConnectionStringBuilder();
				connectStringBuilder.DataSource = @".\SQLEXPRESS";
				connectStringBuilder.AttachDBFilename = @"C:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Data\AdventureWorks_Data.mdf";
				connectStringBuilder.IntegratedSecurity = true;
				connectStringBuilder.UserInstance = true;

				// Prepare a DataSet to receive the Employee data
				DataSet ds = new DataSet();

				// Open connection to the AdventureWorks database
				using (SqlConnection connection = new SqlConnection(connectStringBuilder.ConnectionString))
				{
					connection.Open();

					// Retrieve Employee data
					// By joining off to the Contact table, 
					// this data contains the Employee's first and last names
					SqlCommand command = new SqlCommand(
						"SELECT TOP 100"
								+ "  Employee.*"
								+ ", EmployeeContact.*"
								+ " FROM [HumanResources].[Employee] AS Employee"
								+ " INNER JOIN [Person].[Contact] AS EmployeeContact ON (EmployeeContact.ContactID = Employee.ContactID)"
								+ " ORDER BY Employee.EmployeeID",
						connection);

					using (SqlDataReader dataReaderEmployees = command.ExecuteReader())
					{
						// Load the data into the DataSet
						ds.Load(
							dataReaderEmployees,
							LoadOption.OverwriteChanges,
							new string[] { "Employee" });
					}

					// Close the connection to the database
					connection.Close();
				}

				return ds;
			}
			catch (SqlException err)
			{
				MessageBox.Show(err.Message, "SQL Exception", MessageBoxButtons.OK, MessageBoxIcon.Error);
				return null;
			}
		}

        private void dbEmployeeIdTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.dbEmployeeIdTextBox.Text.Trim(), false);
        }

        private void dbFirstNameTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.dbFirstNameTextBox.Text.Trim(), false);
        }

        private void dbLastNameTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.dbLastNameTextBox.Text.Trim(), false);
        }

        private void dbTitleTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.dbTitleTextBox.Text.Trim(), false);
        }

        private void dbMaritalStatusTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.dbMaritalStatusTextBox.Text.Trim(), false);
        }

        private void employeeIDTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.employeeIDTextBox.Text.Trim(), true);
        }

        private void titleTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.titleTextBox.Text.Trim(), false);
        }

        private void maritalStatusTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.maritalStatusTextBox.Text.Trim(), false);
        }

        private void genderTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.genderTextBox.Text.Trim(), false);
        }

        private void classFirstNameTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.classFirstNameTextBox.Text.Trim(), false);
        }

        private void classLastNameTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.classLastNameTextBox.Text.Trim(), false);
        }

        private void classTitleTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.classTitleTextBox.Text.Trim(), false);
        }

        private void classMaritalStatusTextBox_Validating(object sender, CancelEventArgs e)
        {
            this.HandleValidation(sender, e, this.classMaritalStatusTextBox.Text.Trim(), false);
        }

        private void HandleValidation(object sender, CancelEventArgs e, string text, bool requiresNumeric)
        {
            string error = null;
            bool numericFailed = false;
            if (requiresNumeric)
            {
                int output;
                bool isNumeric = int.TryParse(text, out output);
                numericFailed = !isNumeric;
            }
            if (text.Length == 0 || numericFailed)
            {
                error = requiresNumeric ? "Required Numeric Field" : "Required Field";
                errorProvider1.SetError((Control)sender, error);
                e.Cancel = true;
            }
            else
                errorProvider1.Clear();
        }
	}
}