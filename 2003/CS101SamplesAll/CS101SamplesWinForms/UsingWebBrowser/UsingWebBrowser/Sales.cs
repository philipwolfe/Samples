//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UsingWebBrowser {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Sales : DataSet {
        
        private SalesHeaderDataTable tableSalesHeader;
        
        private SalesDetailDataTable tableSalesDetail;
        
        private DataRelation relationSalesHeader_SalesDetail;
        
        public Sales() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Sales(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalesHeader"] != null)) {
                    this.Tables.Add(new SalesHeaderDataTable(ds.Tables["SalesHeader"]));
                }
                if ((ds.Tables["SalesDetail"] != null)) {
                    this.Tables.Add(new SalesDetailDataTable(ds.Tables["SalesDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesHeaderDataTable SalesHeader {
            get {
                return this.tableSalesHeader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesDetailDataTable SalesDetail {
            get {
                return this.tableSalesDetail;
            }
        }
        
        public override DataSet Clone() {
            Sales cln = ((Sales)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SalesHeader"] != null)) {
                this.Tables.Add(new SalesHeaderDataTable(ds.Tables["SalesHeader"]));
            }
            if ((ds.Tables["SalesDetail"] != null)) {
                this.Tables.Add(new SalesDetailDataTable(ds.Tables["SalesDetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSalesHeader = ((SalesHeaderDataTable)(this.Tables["SalesHeader"]));
            if ((this.tableSalesHeader != null)) {
                this.tableSalesHeader.InitVars();
            }
            this.tableSalesDetail = ((SalesDetailDataTable)(this.Tables["SalesDetail"]));
            if ((this.tableSalesDetail != null)) {
                this.tableSalesDetail.InitVars();
            }
            this.relationSalesHeader_SalesDetail = this.Relations["SalesHeader_SalesDetail"];
        }
        
        private void InitClass() {
            this.DataSetName = "Sales";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSalesHeader = new SalesHeaderDataTable();
            this.Tables.Add(this.tableSalesHeader);
            this.tableSalesDetail = new SalesDetailDataTable();
            this.Tables.Add(this.tableSalesDetail);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("SalesHeader_SalesDetail", new DataColumn[] {
                        this.tableSalesHeader.SalesHeader_IdColumn}, new DataColumn[] {
                        this.tableSalesDetail.SalesHeader_IdColumn});
            this.tableSalesDetail.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationSalesHeader_SalesDetail = new DataRelation("SalesHeader_SalesDetail", new DataColumn[] {
                        this.tableSalesHeader.SalesHeader_IdColumn}, new DataColumn[] {
                        this.tableSalesDetail.SalesHeader_IdColumn}, false);
            this.relationSalesHeader_SalesDetail.Nested = true;
            this.Relations.Add(this.relationSalesHeader_SalesDetail);
        }
        
        private bool ShouldSerializeSalesHeader() {
            return false;
        }
        
        private bool ShouldSerializeSalesDetail() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SalesHeaderRowChangeEventHandler(object sender, SalesHeaderRowChangeEvent e);
        
        public delegate void SalesDetailRowChangeEventHandler(object sender, SalesDetailRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesHeaderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnSalesPersonID;
            
            private DataColumn columnSalesPersonName;
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnCustomerName;
            
            private DataColumn columnSalesDate;
            
            private DataColumn columnSalesTotal;
            
            private DataColumn columnSalesHeader_Id;
            
            internal SalesHeaderDataTable() : 
                    base("SalesHeader") {
                this.InitClass();
            }
            
            internal SalesHeaderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn SalesPersonIDColumn {
                get {
                    return this.columnSalesPersonID;
                }
            }
            
            internal DataColumn SalesPersonNameColumn {
                get {
                    return this.columnSalesPersonName;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            internal DataColumn SalesDateColumn {
                get {
                    return this.columnSalesDate;
                }
            }
            
            internal DataColumn SalesTotalColumn {
                get {
                    return this.columnSalesTotal;
                }
            }
            
            internal DataColumn SalesHeader_IdColumn {
                get {
                    return this.columnSalesHeader_Id;
                }
            }
            
            public SalesHeaderRow this[int index] {
                get {
                    return ((SalesHeaderRow)(this.Rows[index]));
                }
            }
            
            public event SalesHeaderRowChangeEventHandler SalesHeaderRowChanged;
            
            public event SalesHeaderRowChangeEventHandler SalesHeaderRowChanging;
            
            public event SalesHeaderRowChangeEventHandler SalesHeaderRowDeleted;
            
            public event SalesHeaderRowChangeEventHandler SalesHeaderRowDeleting;
            
            public void AddSalesHeaderRow(SalesHeaderRow row) {
                this.Rows.Add(row);
            }
            
            public SalesHeaderRow AddSalesHeaderRow(int HeaderID, int SalesPersonID, string SalesPersonName, int CustomerID, string CustomerName, System.DateTime SalesDate, System.Decimal SalesTotal) {
                SalesHeaderRow rowSalesHeaderRow = ((SalesHeaderRow)(this.NewRow()));
                rowSalesHeaderRow.ItemArray = new object[] {
                        HeaderID,
                        SalesPersonID,
                        SalesPersonName,
                        CustomerID,
                        CustomerName,
                        SalesDate,
                        SalesTotal,
                        null};
                this.Rows.Add(rowSalesHeaderRow);
                return rowSalesHeaderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SalesHeaderDataTable cln = ((SalesHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SalesHeaderDataTable();
            }
            
            internal void InitVars() {
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnSalesPersonID = this.Columns["SalesPersonID"];
                this.columnSalesPersonName = this.Columns["SalesPersonName"];
                this.columnCustomerID = this.Columns["CustomerID"];
                this.columnCustomerName = this.Columns["CustomerName"];
                this.columnSalesDate = this.Columns["SalesDate"];
                this.columnSalesTotal = this.Columns["SalesTotal"];
                this.columnSalesHeader_Id = this.Columns["SalesHeader_Id"];
            }
            
            private void InitClass() {
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHeaderID);
                this.columnSalesPersonID = new DataColumn("SalesPersonID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSalesPersonID);
                this.columnSalesPersonName = new DataColumn("SalesPersonName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSalesPersonName);
                this.columnCustomerID = new DataColumn("CustomerID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCustomerID);
                this.columnCustomerName = new DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCustomerName);
                this.columnSalesDate = new DataColumn("SalesDate", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSalesDate);
                this.columnSalesTotal = new DataColumn("SalesTotal", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSalesTotal);
                this.columnSalesHeader_Id = new DataColumn("SalesHeader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSalesHeader_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSalesHeader_Id}, true));
                this.columnHeaderID.Namespace = "";
                this.columnSalesPersonID.Namespace = "";
                this.columnSalesPersonName.Namespace = "";
                this.columnCustomerID.Namespace = "";
                this.columnCustomerName.Namespace = "";
                this.columnSalesDate.Namespace = "";
                this.columnSalesTotal.Namespace = "";
                this.columnSalesHeader_Id.AutoIncrement = true;
                this.columnSalesHeader_Id.AllowDBNull = false;
                this.columnSalesHeader_Id.Unique = true;
            }
            
            public SalesHeaderRow NewSalesHeaderRow() {
                return ((SalesHeaderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SalesHeaderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SalesHeaderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesHeaderRowChanged != null)) {
                    this.SalesHeaderRowChanged(this, new SalesHeaderRowChangeEvent(((SalesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesHeaderRowChanging != null)) {
                    this.SalesHeaderRowChanging(this, new SalesHeaderRowChangeEvent(((SalesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesHeaderRowDeleted != null)) {
                    this.SalesHeaderRowDeleted(this, new SalesHeaderRowChangeEvent(((SalesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesHeaderRowDeleting != null)) {
                    this.SalesHeaderRowDeleting(this, new SalesHeaderRowChangeEvent(((SalesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSalesHeaderRow(SalesHeaderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesHeaderRow : DataRow {
            
            private SalesHeaderDataTable tableSalesHeader;
            
            internal SalesHeaderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesHeader = ((SalesHeaderDataTable)(this.Table));
            }
            
            public int HeaderID {
                get {
                    try {
                        return ((int)(this[this.tableSalesHeader.HeaderIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.HeaderIDColumn] = value;
                }
            }
            
            public int SalesPersonID {
                get {
                    try {
                        return ((int)(this[this.tableSalesHeader.SalesPersonIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.SalesPersonIDColumn] = value;
                }
            }
            
            public string SalesPersonName {
                get {
                    try {
                        return ((string)(this[this.tableSalesHeader.SalesPersonNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.SalesPersonNameColumn] = value;
                }
            }
            
            public int CustomerID {
                get {
                    try {
                        return ((int)(this[this.tableSalesHeader.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.CustomerIDColumn] = value;
                }
            }
            
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableSalesHeader.CustomerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.CustomerNameColumn] = value;
                }
            }
            
            public System.DateTime SalesDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSalesHeader.SalesDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.SalesDateColumn] = value;
                }
            }
            
            public System.Decimal SalesTotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableSalesHeader.SalesTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesHeader.SalesTotalColumn] = value;
                }
            }
            
            public bool IsHeaderIDNull() {
                return this.IsNull(this.tableSalesHeader.HeaderIDColumn);
            }
            
            public void SetHeaderIDNull() {
                this[this.tableSalesHeader.HeaderIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSalesPersonIDNull() {
                return this.IsNull(this.tableSalesHeader.SalesPersonIDColumn);
            }
            
            public void SetSalesPersonIDNull() {
                this[this.tableSalesHeader.SalesPersonIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSalesPersonNameNull() {
                return this.IsNull(this.tableSalesHeader.SalesPersonNameColumn);
            }
            
            public void SetSalesPersonNameNull() {
                this[this.tableSalesHeader.SalesPersonNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableSalesHeader.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tableSalesHeader.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableSalesHeader.CustomerNameColumn);
            }
            
            public void SetCustomerNameNull() {
                this[this.tableSalesHeader.CustomerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSalesDateNull() {
                return this.IsNull(this.tableSalesHeader.SalesDateColumn);
            }
            
            public void SetSalesDateNull() {
                this[this.tableSalesHeader.SalesDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSalesTotalNull() {
                return this.IsNull(this.tableSalesHeader.SalesTotalColumn);
            }
            
            public void SetSalesTotalNull() {
                this[this.tableSalesHeader.SalesTotalColumn] = System.Convert.DBNull;
            }
            
            public SalesDetailRow[] GetSalesDetailRows() {
                return ((SalesDetailRow[])(this.GetChildRows(this.Table.ChildRelations["SalesHeader_SalesDetail"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesHeaderRowChangeEvent : EventArgs {
            
            private SalesHeaderRow eventRow;
            
            private DataRowAction eventAction;
            
            public SalesHeaderRowChangeEvent(SalesHeaderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SalesHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesDetailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDetailID;
            
            private DataColumn columnItemID;
            
            private DataColumn columnItemName;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnUnitPrice;
            
            private DataColumn columnSubTotal;
            
            private DataColumn columnSalesHeader_Id;
            
            internal SalesDetailDataTable() : 
                    base("SalesDetail") {
                this.InitClass();
            }
            
            internal SalesDetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            internal DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            internal DataColumn SalesHeader_IdColumn {
                get {
                    return this.columnSalesHeader_Id;
                }
            }
            
            public SalesDetailRow this[int index] {
                get {
                    return ((SalesDetailRow)(this.Rows[index]));
                }
            }
            
            public event SalesDetailRowChangeEventHandler SalesDetailRowChanged;
            
            public event SalesDetailRowChangeEventHandler SalesDetailRowChanging;
            
            public event SalesDetailRowChangeEventHandler SalesDetailRowDeleted;
            
            public event SalesDetailRowChangeEventHandler SalesDetailRowDeleting;
            
            public void AddSalesDetailRow(SalesDetailRow row) {
                this.Rows.Add(row);
            }
            
            public SalesDetailRow AddSalesDetailRow(int DetailID, int ItemID, string ItemName, int Quantity, System.Decimal UnitPrice, System.Decimal SubTotal, SalesHeaderRow parentSalesHeaderRowBySalesHeader_SalesDetail) {
                SalesDetailRow rowSalesDetailRow = ((SalesDetailRow)(this.NewRow()));
                rowSalesDetailRow.ItemArray = new object[] {
                        DetailID,
                        ItemID,
                        ItemName,
                        Quantity,
                        UnitPrice,
                        SubTotal,
                        parentSalesHeaderRowBySalesHeader_SalesDetail[7]};
                this.Rows.Add(rowSalesDetailRow);
                return rowSalesDetailRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SalesDetailDataTable cln = ((SalesDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SalesDetailDataTable();
            }
            
            internal void InitVars() {
                this.columnDetailID = this.Columns["DetailID"];
                this.columnItemID = this.Columns["ItemID"];
                this.columnItemName = this.Columns["ItemName"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnUnitPrice = this.Columns["UnitPrice"];
                this.columnSubTotal = this.Columns["SubTotal"];
                this.columnSalesHeader_Id = this.Columns["SalesHeader_Id"];
            }
            
            private void InitClass() {
                this.columnDetailID = new DataColumn("DetailID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDetailID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnItemID);
                this.columnItemName = new DataColumn("ItemName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnItemName);
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnQuantity);
                this.columnUnitPrice = new DataColumn("UnitPrice", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnitPrice);
                this.columnSubTotal = new DataColumn("SubTotal", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSubTotal);
                this.columnSalesHeader_Id = new DataColumn("SalesHeader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSalesHeader_Id);
                this.columnDetailID.Namespace = "";
                this.columnItemID.Namespace = "";
                this.columnItemName.Namespace = "";
                this.columnQuantity.Namespace = "";
                this.columnUnitPrice.Namespace = "";
                this.columnSubTotal.Namespace = "";
            }
            
            public SalesDetailRow NewSalesDetailRow() {
                return ((SalesDetailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SalesDetailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SalesDetailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesDetailRowChanged != null)) {
                    this.SalesDetailRowChanged(this, new SalesDetailRowChangeEvent(((SalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesDetailRowChanging != null)) {
                    this.SalesDetailRowChanging(this, new SalesDetailRowChangeEvent(((SalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesDetailRowDeleted != null)) {
                    this.SalesDetailRowDeleted(this, new SalesDetailRowChangeEvent(((SalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesDetailRowDeleting != null)) {
                    this.SalesDetailRowDeleting(this, new SalesDetailRowChangeEvent(((SalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSalesDetailRow(SalesDetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesDetailRow : DataRow {
            
            private SalesDetailDataTable tableSalesDetail;
            
            internal SalesDetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesDetail = ((SalesDetailDataTable)(this.Table));
            }
            
            public int DetailID {
                get {
                    try {
                        return ((int)(this[this.tableSalesDetail.DetailIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.DetailIDColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    try {
                        return ((int)(this[this.tableSalesDetail.ItemIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.ItemIDColumn] = value;
                }
            }
            
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableSalesDetail.ItemNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.ItemNameColumn] = value;
                }
            }
            
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableSalesDetail.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.QuantityColumn] = value;
                }
            }
            
            public System.Decimal UnitPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableSalesDetail.UnitPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.UnitPriceColumn] = value;
                }
            }
            
            public System.Decimal SubTotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableSalesDetail.SubTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesDetail.SubTotalColumn] = value;
                }
            }
            
            public SalesHeaderRow SalesHeaderRow {
                get {
                    return ((SalesHeaderRow)(this.GetParentRow(this.Table.ParentRelations["SalesHeader_SalesDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SalesHeader_SalesDetail"]);
                }
            }
            
            public bool IsDetailIDNull() {
                return this.IsNull(this.tableSalesDetail.DetailIDColumn);
            }
            
            public void SetDetailIDNull() {
                this[this.tableSalesDetail.DetailIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemIDNull() {
                return this.IsNull(this.tableSalesDetail.ItemIDColumn);
            }
            
            public void SetItemIDNull() {
                this[this.tableSalesDetail.ItemIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemNameNull() {
                return this.IsNull(this.tableSalesDetail.ItemNameColumn);
            }
            
            public void SetItemNameNull() {
                this[this.tableSalesDetail.ItemNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableSalesDetail.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableSalesDetail.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableSalesDetail.UnitPriceColumn);
            }
            
            public void SetUnitPriceNull() {
                this[this.tableSalesDetail.UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableSalesDetail.SubTotalColumn);
            }
            
            public void SetSubTotalNull() {
                this[this.tableSalesDetail.SubTotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesDetailRowChangeEvent : EventArgs {
            
            private SalesDetailRow eventRow;
            
            private DataRowAction eventAction;
            
            public SalesDetailRowChangeEvent(SalesDetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SalesDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
