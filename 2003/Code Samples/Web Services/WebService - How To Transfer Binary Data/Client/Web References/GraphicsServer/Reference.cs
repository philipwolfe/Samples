//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace HowTo.WebServiceGraphics.GraphicsServer {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImageServiceSoap", Namespace="http://msdn.microsoft.com/csharp/")]
    public class ImageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ImageService() {
            this.Url = "http://localhost/HowToGraphicsServer/ImageService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/csharp/Browse", RequestNamespace="http://msdn.microsoft.com/csharp/", ResponseNamespace="http://msdn.microsoft.com/csharp/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImageInfo[] Browse() {
            object[] results = this.Invoke("Browse", new object[0]);
            return ((ImageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBrowse(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Browse", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ImageInfo[] EndBrowse(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ImageInfo[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/csharp/GetThumbnail", RequestNamespace="http://msdn.microsoft.com/csharp/", ResponseNamespace="http://msdn.microsoft.com/csharp/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] GetThumbnail(string FileName) {
            object[] results = this.Invoke("GetThumbnail", new object[] {
                        FileName});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetThumbnail(string FileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetThumbnail", new object[] {
                        FileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndGetThumbnail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/csharp/GetImage", RequestNamespace="http://msdn.microsoft.com/csharp/", ResponseNamespace="http://msdn.microsoft.com/csharp/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] GetImage(string FileName) {
            object[] results = this.Invoke("GetImage", new object[] {
                        FileName});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImage(string FileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImage", new object[] {
                        FileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndGetImage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdn.microsoft.com/csharp/About", RequestNamespace="http://msdn.microsoft.com/csharp/", ResponseNamespace="http://msdn.microsoft.com/csharp/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string About() {
            object[] results = this.Invoke("About", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAbout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("About", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAbout(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msdn.microsoft.com/csharp/")]
    public class ImageInfo {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public long Size;
        
        /// <remarks/>
        public int Height;
        
        /// <remarks/>
        public int Width;
        
        /// <remarks/>
        public System.Single HorizontalResolution;
        
        /// <remarks/>
        public System.Single VerticalResolution;
        
        /// <remarks/>
        public PixelFormat PixelFormat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] Thumbnail;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://msdn.microsoft.com/csharp/")]
    public enum PixelFormat {
        
        /// <remarks/>
        Indexed,
        
        /// <remarks/>
        Gdi,
        
        /// <remarks/>
        Alpha,
        
        /// <remarks/>
        PAlpha,
        
        /// <remarks/>
        Extended,
        
        /// <remarks/>
        Canonical,
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        DontCare,
        
        /// <remarks/>
        Format1bppIndexed,
        
        /// <remarks/>
        Format4bppIndexed,
        
        /// <remarks/>
        Format8bppIndexed,
        
        /// <remarks/>
        Format16bppGrayScale,
        
        /// <remarks/>
        Format16bppRgb555,
        
        /// <remarks/>
        Format16bppRgb565,
        
        /// <remarks/>
        Format16bppArgb1555,
        
        /// <remarks/>
        Format24bppRgb,
        
        /// <remarks/>
        Format32bppRgb,
        
        /// <remarks/>
        Format32bppArgb,
        
        /// <remarks/>
        Format32bppPArgb,
        
        /// <remarks/>
        Format48bppRgb,
        
        /// <remarks/>
        Format64bppArgb,
        
        /// <remarks/>
        Format64bppPArgb,
        
        /// <remarks/>
        Max,
    }
}
