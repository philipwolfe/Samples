'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.26
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("AdventureWorks_DataDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class AdventureWorks_DataDataSet
    Inherits System.Data.DataSet
    
    Private tableProduct As ProductDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Product")) Is Nothing) Then
                MyBase.Tables.Add(New ProductDataTable(ds.Tables("Product")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Product() As ProductDataTable
        Get
            Return Me.tableProduct
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As AdventureWorks_DataDataSet = CType(MyBase.Clone,AdventureWorks_DataDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Product")) Is Nothing) Then
                MyBase.Tables.Add(New ProductDataTable(ds.Tables("Product")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProduct = CType(MyBase.Tables("Product"),ProductDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduct) Is Nothing) Then
                Me.tableProduct.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "AdventureWorks_DataDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AdventureWorks_DataDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProduct = New ProductDataTable
        MyBase.Tables.Add(Me.tableProduct)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduct() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AdventureWorks_DataDataSet = New AdventureWorks_DataDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ProductRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProductID As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Private columnProductNumber As System.Data.DataColumn
        
        Private columnMakeFlag As System.Data.DataColumn
        
        Private columnFinishedGoodsFlag As System.Data.DataColumn
        
        Private columnColor As System.Data.DataColumn
        
        Private columnSafetyStockLevel As System.Data.DataColumn
        
        Private columnReorderPoint As System.Data.DataColumn
        
        Private columnStandardCost As System.Data.DataColumn
        
        Private columnListPrice As System.Data.DataColumn
        
        Private columnSize As System.Data.DataColumn
        
        Private columnSizeUnitMeasureCode As System.Data.DataColumn
        
        Private columnWeightUnitMeasureCode As System.Data.DataColumn
        
        Private columnWeight As System.Data.DataColumn
        
        Private columnDaysToManufacture As System.Data.DataColumn
        
        Private columnProductLine As System.Data.DataColumn
        
        Private columnClass As System.Data.DataColumn
        
        Private columnStyle As System.Data.DataColumn
        
        Private columnProductSubcategoryID As System.Data.DataColumn
        
        Private columnProductModelID As System.Data.DataColumn
        
        Private columnSellStartDate As System.Data.DataColumn
        
        Private columnSellEndDate As System.Data.DataColumn
        
        Private columnDiscontinuedDate As System.Data.DataColumn
        
        Private columnrowguid As System.Data.DataColumn
        
        Private columnModifiedDate As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Product"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductNumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MakeFlagColumn() As System.Data.DataColumn
            Get
                Return Me.columnMakeFlag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinishedGoodsFlagColumn() As System.Data.DataColumn
            Get
                Return Me.columnFinishedGoodsFlag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColorColumn() As System.Data.DataColumn
            Get
                Return Me.columnColor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SafetyStockLevelColumn() As System.Data.DataColumn
            Get
                Return Me.columnSafetyStockLevel
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReorderPointColumn() As System.Data.DataColumn
            Get
                Return Me.columnReorderPoint
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StandardCostColumn() As System.Data.DataColumn
            Get
                Return Me.columnStandardCost
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListPriceColumn() As System.Data.DataColumn
            Get
                Return Me.columnListPrice
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeColumn() As System.Data.DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeUnitMeasureCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnSizeUnitMeasureCode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightUnitMeasureCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnWeightUnitMeasureCode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightColumn() As System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DaysToManufactureColumn() As System.Data.DataColumn
            Get
                Return Me.columnDaysToManufacture
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductLineColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductLine
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassColumn() As System.Data.DataColumn
            Get
                Return Me.columnClass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StyleColumn() As System.Data.DataColumn
            Get
                Return Me.columnStyle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductSubcategoryIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductSubcategoryID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductModelIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductModelID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SellStartDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnSellStartDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SellEndDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnSellEndDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscontinuedDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiscontinuedDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rowguidColumn() As System.Data.DataColumn
            Get
                Return Me.columnrowguid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductRow
            Get
                Return CType(Me.Rows(index),ProductRow)
            End Get
        End Property
        
        Public Event ProductRowChanging As ProductRowChangeEventHandler
        
        Public Event ProductRowChanged As ProductRowChangeEventHandler
        
        Public Event ProductRowDeleting As ProductRowChangeEventHandler
        
        Public Event ProductRowDeleted As ProductRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductRow(ByVal row As ProductRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductRow( _
                    ByVal Name As String,  _
                    ByVal ProductNumber As String,  _
                    ByVal MakeFlag As Boolean,  _
                    ByVal FinishedGoodsFlag As Boolean,  _
                    ByVal Color As String,  _
                    ByVal SafetyStockLevel As Short,  _
                    ByVal ReorderPoint As Short,  _
                    ByVal StandardCost As Decimal,  _
                    ByVal ListPrice As Decimal,  _
                    ByVal Size As String,  _
                    ByVal SizeUnitMeasureCode As String,  _
                    ByVal WeightUnitMeasureCode As String,  _
                    ByVal Weight As Decimal,  _
                    ByVal DaysToManufacture As Integer,  _
                    ByVal ProductLine As String,  _
                    ByVal _Class As String,  _
                    ByVal Style As String,  _
                    ByVal ProductSubcategoryID As Integer,  _
                    ByVal ProductModelID As Integer,  _
                    ByVal SellStartDate As Date,  _
                    ByVal SellEndDate As Date,  _
                    ByVal DiscontinuedDate As Date,  _
                    ByVal rowguid As System.Guid,  _
                    ByVal ModifiedDate As Date) As ProductRow
            Dim rowProductRow As ProductRow = CType(Me.NewRow,ProductRow)
            rowProductRow.ItemArray = New Object() {Nothing, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, _Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate}
            Me.Rows.Add(rowProductRow)
            Return rowProductRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProductID(ByVal ProductID As Integer) As ProductRow
            Return CType(Me.Rows.Find(New Object() {ProductID}),ProductRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProductDataTable = CType(MyBase.Clone,ProductDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProductDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProductID = MyBase.Columns("ProductID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnProductNumber = MyBase.Columns("ProductNumber")
            Me.columnMakeFlag = MyBase.Columns("MakeFlag")
            Me.columnFinishedGoodsFlag = MyBase.Columns("FinishedGoodsFlag")
            Me.columnColor = MyBase.Columns("Color")
            Me.columnSafetyStockLevel = MyBase.Columns("SafetyStockLevel")
            Me.columnReorderPoint = MyBase.Columns("ReorderPoint")
            Me.columnStandardCost = MyBase.Columns("StandardCost")
            Me.columnListPrice = MyBase.Columns("ListPrice")
            Me.columnSize = MyBase.Columns("Size")
            Me.columnSizeUnitMeasureCode = MyBase.Columns("SizeUnitMeasureCode")
            Me.columnWeightUnitMeasureCode = MyBase.Columns("WeightUnitMeasureCode")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnDaysToManufacture = MyBase.Columns("DaysToManufacture")
            Me.columnProductLine = MyBase.Columns("ProductLine")
            Me.columnClass = MyBase.Columns("Class")
            Me.columnStyle = MyBase.Columns("Style")
            Me.columnProductSubcategoryID = MyBase.Columns("ProductSubcategoryID")
            Me.columnProductModelID = MyBase.Columns("ProductModelID")
            Me.columnSellStartDate = MyBase.Columns("SellStartDate")
            Me.columnSellEndDate = MyBase.Columns("SellEndDate")
            Me.columnDiscontinuedDate = MyBase.Columns("DiscontinuedDate")
            Me.columnrowguid = MyBase.Columns("rowguid")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProductID = New System.Data.DataColumn("ProductID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductID)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnProductNumber = New System.Data.DataColumn("ProductNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductNumber)
            Me.columnMakeFlag = New System.Data.DataColumn("MakeFlag", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMakeFlag)
            Me.columnFinishedGoodsFlag = New System.Data.DataColumn("FinishedGoodsFlag", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinishedGoodsFlag)
            Me.columnColor = New System.Data.DataColumn("Color", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColor)
            Me.columnSafetyStockLevel = New System.Data.DataColumn("SafetyStockLevel", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSafetyStockLevel)
            Me.columnReorderPoint = New System.Data.DataColumn("ReorderPoint", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReorderPoint)
            Me.columnStandardCost = New System.Data.DataColumn("StandardCost", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStandardCost)
            Me.columnListPrice = New System.Data.DataColumn("ListPrice", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListPrice)
            Me.columnSize = New System.Data.DataColumn("Size", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize)
            Me.columnSizeUnitMeasureCode = New System.Data.DataColumn("SizeUnitMeasureCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSizeUnitMeasureCode)
            Me.columnWeightUnitMeasureCode = New System.Data.DataColumn("WeightUnitMeasureCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeightUnitMeasureCode)
            Me.columnWeight = New System.Data.DataColumn("Weight", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnDaysToManufacture = New System.Data.DataColumn("DaysToManufacture", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaysToManufacture)
            Me.columnProductLine = New System.Data.DataColumn("ProductLine", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductLine)
            Me.columnClass = New System.Data.DataColumn("Class", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnClass.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Class")
            Me.columnClass.ExtendedProperties.Add("Generator_UserColumnName", "Class")
            MyBase.Columns.Add(Me.columnClass)
            Me.columnStyle = New System.Data.DataColumn("Style", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStyle)
            Me.columnProductSubcategoryID = New System.Data.DataColumn("ProductSubcategoryID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductSubcategoryID)
            Me.columnProductModelID = New System.Data.DataColumn("ProductModelID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductModelID)
            Me.columnSellStartDate = New System.Data.DataColumn("SellStartDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSellStartDate)
            Me.columnSellEndDate = New System.Data.DataColumn("SellEndDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSellEndDate)
            Me.columnDiscontinuedDate = New System.Data.DataColumn("DiscontinuedDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscontinuedDate)
            Me.columnrowguid = New System.Data.DataColumn("rowguid", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrowguid)
            Me.columnModifiedDate = New System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProductID}, true))
            Me.columnProductID.AutoIncrement = true
            Me.columnProductID.AllowDBNull = false
            Me.columnProductID.ReadOnly = true
            Me.columnProductID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnProductNumber.AllowDBNull = false
            Me.columnProductNumber.MaxLength = 25
            Me.columnMakeFlag.AllowDBNull = false
            Me.columnFinishedGoodsFlag.AllowDBNull = false
            Me.columnColor.MaxLength = 15
            Me.columnSafetyStockLevel.AllowDBNull = false
            Me.columnReorderPoint.AllowDBNull = false
            Me.columnStandardCost.AllowDBNull = false
            Me.columnListPrice.AllowDBNull = false
            Me.columnSize.MaxLength = 5
            Me.columnSizeUnitMeasureCode.MaxLength = 3
            Me.columnWeightUnitMeasureCode.MaxLength = 3
            Me.columnDaysToManufacture.AllowDBNull = false
            Me.columnProductLine.MaxLength = 2
            Me.columnClass.MaxLength = 2
            Me.columnStyle.MaxLength = 2
            Me.columnSellStartDate.AllowDBNull = false
            Me.columnrowguid.AllowDBNull = false
            Me.columnModifiedDate.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductRow() As ProductRow
            Return CType(Me.NewRow,ProductRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProductRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductRowChanged(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductRowChanging(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductRowDeleted(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductRowDeleting(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductRow(ByVal row As ProductRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AdventureWorks_DataDataSet = New AdventureWorks_DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductRow
        Inherits System.Data.DataRow
        
        Private tableProduct As ProductDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduct = CType(Me.Table,ProductDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductID() As Integer
            Get
                Return CType(Me(Me.tableProduct.ProductIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProduct.ProductIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableProduct.NameColumn),String)
            End Get
            Set
                Me(Me.tableProduct.NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductNumber() As String
            Get
                Return CType(Me(Me.tableProduct.ProductNumberColumn),String)
            End Get
            Set
                Me(Me.tableProduct.ProductNumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MakeFlag() As Boolean
            Get
                Return CType(Me(Me.tableProduct.MakeFlagColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduct.MakeFlagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinishedGoodsFlag() As Boolean
            Get
                Return CType(Me(Me.tableProduct.FinishedGoodsFlagColumn),Boolean)
            End Get
            Set
                Me(Me.tableProduct.FinishedGoodsFlagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Color() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.ColorColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Color' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.ColorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SafetyStockLevel() As Short
            Get
                Return CType(Me(Me.tableProduct.SafetyStockLevelColumn),Short)
            End Get
            Set
                Me(Me.tableProduct.SafetyStockLevelColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReorderPoint() As Short
            Get
                Return CType(Me(Me.tableProduct.ReorderPointColumn),Short)
            End Get
            Set
                Me(Me.tableProduct.ReorderPointColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StandardCost() As Decimal
            Get
                Return CType(Me(Me.tableProduct.StandardCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduct.StandardCostColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListPrice() As Decimal
            Get
                Return CType(Me(Me.tableProduct.ListPriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableProduct.ListPriceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.SizeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Size' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.SizeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SizeUnitMeasureCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.SizeUnitMeasureCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SizeUnitMeasureCode' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.SizeUnitMeasureCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WeightUnitMeasureCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.WeightUnitMeasureCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WeightUnitMeasureCode' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.WeightUnitMeasureCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduct.WeightColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Weight' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.WeightColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DaysToManufacture() As Integer
            Get
                Return CType(Me(Me.tableProduct.DaysToManufactureColumn),Integer)
            End Get
            Set
                Me(Me.tableProduct.DaysToManufactureColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductLine() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.ProductLineColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ProductLine' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.ProductLineColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Class() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.ClassColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Class' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.ClassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Style() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduct.StyleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Style' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.StyleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductSubcategoryID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduct.ProductSubcategoryIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ProductSubcategoryID' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.ProductSubcategoryIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductModelID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProduct.ProductModelIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ProductModelID' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.ProductModelIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SellStartDate() As Date
            Get
                Return CType(Me(Me.tableProduct.SellStartDateColumn),Date)
            End Get
            Set
                Me(Me.tableProduct.SellStartDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SellEndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduct.SellEndDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SellEndDate' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.SellEndDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscontinuedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduct.DiscontinuedDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DiscontinuedDate' in table 'Product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduct.DiscontinuedDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rowguid() As System.Guid
            Get
                Return CType(Me(Me.tableProduct.rowguidColumn),System.Guid)
            End Get
            Set
                Me(Me.tableProduct.rowguidColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Return CType(Me(Me.tableProduct.ModifiedDateColumn),Date)
            End Get
            Set
                Me(Me.tableProduct.ModifiedDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColorNull() As Boolean
            Return Me.IsNull(Me.tableProduct.ColorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColorNull()
            Me(Me.tableProduct.ColorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tableProduct.SizeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeNull()
            Me(Me.tableProduct.SizeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeUnitMeasureCodeNull() As Boolean
            Return Me.IsNull(Me.tableProduct.SizeUnitMeasureCodeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeUnitMeasureCodeNull()
            Me(Me.tableProduct.SizeUnitMeasureCodeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightUnitMeasureCodeNull() As Boolean
            Return Me.IsNull(Me.tableProduct.WeightUnitMeasureCodeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightUnitMeasureCodeNull()
            Me(Me.tableProduct.WeightUnitMeasureCodeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableProduct.WeightColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightNull()
            Me(Me.tableProduct.WeightColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductLineNull() As Boolean
            Return Me.IsNull(Me.tableProduct.ProductLineColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductLineNull()
            Me(Me.tableProduct.ProductLineColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ClassNull() As Boolean
            Return Me.IsNull(Me.tableProduct.ClassColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ClassNull()
            Me(Me.tableProduct.ClassColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStyleNull() As Boolean
            Return Me.IsNull(Me.tableProduct.StyleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStyleNull()
            Me(Me.tableProduct.StyleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductSubcategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableProduct.ProductSubcategoryIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductSubcategoryIDNull()
            Me(Me.tableProduct.ProductSubcategoryIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductModelIDNull() As Boolean
            Return Me.IsNull(Me.tableProduct.ProductModelIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductModelIDNull()
            Me(Me.tableProduct.ProductModelIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSellEndDateNull() As Boolean
            Return Me.IsNull(Me.tableProduct.SellEndDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSellEndDateNull()
            Me(Me.tableProduct.SellEndDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscontinuedDateNull() As Boolean
            Return Me.IsNull(Me.tableProduct.DiscontinuedDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscontinuedDateNull()
            Me(Me.tableProduct.DiscontinuedDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProductRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProductRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AdventureWorks_DataDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProductTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Product"
            tableMapping.ColumnMappings.Add("ProductID", "ProductID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("ProductNumber", "ProductNumber")
            tableMapping.ColumnMappings.Add("MakeFlag", "MakeFlag")
            tableMapping.ColumnMappings.Add("FinishedGoodsFlag", "FinishedGoodsFlag")
            tableMapping.ColumnMappings.Add("Color", "Color")
            tableMapping.ColumnMappings.Add("SafetyStockLevel", "SafetyStockLevel")
            tableMapping.ColumnMappings.Add("ReorderPoint", "ReorderPoint")
            tableMapping.ColumnMappings.Add("StandardCost", "StandardCost")
            tableMapping.ColumnMappings.Add("ListPrice", "ListPrice")
            tableMapping.ColumnMappings.Add("Size", "Size")
            tableMapping.ColumnMappings.Add("SizeUnitMeasureCode", "SizeUnitMeasureCode")
            tableMapping.ColumnMappings.Add("WeightUnitMeasureCode", "WeightUnitMeasureCode")
            tableMapping.ColumnMappings.Add("Weight", "Weight")
            tableMapping.ColumnMappings.Add("DaysToManufacture", "DaysToManufacture")
            tableMapping.ColumnMappings.Add("ProductLine", "ProductLine")
            tableMapping.ColumnMappings.Add("Class", "Class")
            tableMapping.ColumnMappings.Add("Style", "Style")
            tableMapping.ColumnMappings.Add("ProductSubcategoryID", "ProductSubcategoryID")
            tableMapping.ColumnMappings.Add("ProductModelID", "ProductModelID")
            tableMapping.ColumnMappings.Add("SellStartDate", "SellStartDate")
            tableMapping.ColumnMappings.Add("SellEndDate", "SellEndDate")
            tableMapping.ColumnMappings.Add("DiscontinuedDate", "DiscontinuedDate")
            tableMapping.ColumnMappings.Add("rowguid", "rowguid")
            tableMapping.ColumnMappings.Add("ModifiedDate", "ModifiedDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production].[Product] WHERE (([ProductID] = @Original_ProductID) AND"& _ 
                " ([Name] = @Original_Name) AND ([ProductNumber] = @Original_ProductNumber) AND ("& _ 
                "[MakeFlag] = @Original_MakeFlag) AND ([FinishedGoodsFlag] = @Original_FinishedGo"& _ 
                "odsFlag) AND ((@IsNull_Color = 1 AND [Color] IS NULL) OR ([Color] = @Original_Co"& _ 
                "lor)) AND ([SafetyStockLevel] = @Original_SafetyStockLevel) AND ([ReorderPoint] "& _ 
                "= @Original_ReorderPoint) AND ([StandardCost] = @Original_StandardCost) AND ([Li"& _ 
                "stPrice] = @Original_ListPrice) AND ((@IsNull_Size = 1 AND [Size] IS NULL) OR (["& _ 
                "Size] = @Original_Size)) AND ((@IsNull_SizeUnitMeasureCode = 1 AND [SizeUnitMeas"& _ 
                "ureCode] IS NULL) OR ([SizeUnitMeasureCode] = @Original_SizeUnitMeasureCode)) AN"& _ 
                "D ((@IsNull_WeightUnitMeasureCode = 1 AND [WeightUnitMeasureCode] IS NULL) OR (["& _ 
                "WeightUnitMeasureCode] = @Original_WeightUnitMeasureCode)) AND ((@IsNull_Weight "& _ 
                "= 1 AND [Weight] IS NULL) OR ([Weight] = @Original_Weight)) AND ([DaysToManufact"& _ 
                "ure] = @Original_DaysToManufacture) AND ((@IsNull_ProductLine = 1 AND [ProductLi"& _ 
                "ne] IS NULL) OR ([ProductLine] = @Original_ProductLine)) AND ((@IsNull_Class = 1"& _ 
                " AND [Class] IS NULL) OR ([Class] = @Original_Class)) AND ((@IsNull_Style = 1 AN"& _ 
                "D [Style] IS NULL) OR ([Style] = @Original_Style)) AND ((@IsNull_ProductSubcateg"& _ 
                "oryID = 1 AND [ProductSubcategoryID] IS NULL) OR ([ProductSubcategoryID] = @Orig"& _ 
                "inal_ProductSubcategoryID)) AND ((@IsNull_ProductModelID = 1 AND [ProductModelID"& _ 
                "] IS NULL) OR ([ProductModelID] = @Original_ProductModelID)) AND ([SellStartDate"& _ 
                "] = @Original_SellStartDate) AND ((@IsNull_SellEndDate = 1 AND [SellEndDate] IS "& _ 
                "NULL) OR ([SellEndDate] = @Original_SellEndDate)) AND ((@IsNull_DiscontinuedDate"& _ 
                " = 1 AND [DiscontinuedDate] IS NULL) OR ([DiscontinuedDate] = @Original_Disconti"& _ 
                "nuedDate)) AND ([rowguid] = @Original_rowguid) AND ([ModifiedDate] = @Original_M"& _ 
                "odifiedDate))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductNumber", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductNumber", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MakeFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "MakeFlag", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FinishedGoodsFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishedGoodsFlag", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Color", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Color", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SafetyStockLevel", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SafetyStockLevel", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ReorderPoint", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "ReorderPoint", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_StandardCost", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardCost", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ListPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "ListPrice", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Size", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Size", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SizeUnitMeasureCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SizeUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_WeightUnitMeasureCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_WeightUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Weight", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Weight", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Weight", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 2, "Weight", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DaysToManufacture", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DaysToManufacture", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductLine", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductLine", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Class", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Class", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Style", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Style", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SellStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellStartDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SellEndDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SellEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_DiscontinuedDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DiscontinuedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_rowguid", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "rowguid", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production].[Product] ([Name], [ProductNumber], [MakeFlag], [Finishe"& _ 
                "dGoodsFlag], [Color], [SafetyStockLevel], [ReorderPoint], [StandardCost], [ListP"& _ 
                "rice], [Size], [SizeUnitMeasureCode], [WeightUnitMeasureCode], [Weight], [DaysTo"& _ 
                "Manufacture], [ProductLine], [Class], [Style], [ProductSubcategoryID], [ProductM"& _ 
                "odelID], [SellStartDate], [SellEndDate], [DiscontinuedDate], [rowguid], [Modifie"& _ 
                "dDate]) VALUES (@Name, @ProductNumber, @MakeFlag, @FinishedGoodsFlag, @Color, @S"& _ 
                "afetyStockLevel, @ReorderPoint, @StandardCost, @ListPrice, @Size, @SizeUnitMeasu"& _ 
                "reCode, @WeightUnitMeasureCode, @Weight, @DaysToManufacture, @ProductLine, @Clas"& _ 
                "s, @Style, @ProductSubcategoryID, @ProductModelID, @SellStartDate, @SellEndDate,"& _ 
                " @DiscontinuedDate, @rowguid, @ModifiedDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ProductID, Name, ProductNu"& _ 
                "mber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, Standa"& _ 
                "rdCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, Day"& _ 
                "sToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID,"& _ 
                " SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate FROM Produc"& _ 
                "tion.Product WHERE (ProductID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductNumber", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductNumber", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MakeFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "MakeFlag", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FinishedGoodsFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishedGoodsFlag", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Color", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SafetyStockLevel", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SafetyStockLevel", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ReorderPoint", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "ReorderPoint", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@StandardCost", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardCost", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ListPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "ListPrice", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Size", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SizeUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@WeightUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Weight", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 2, "Weight", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DaysToManufacture", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DaysToManufacture", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductLine", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Class", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Style", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SellStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellStartDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SellEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DiscontinuedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "rowguid", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ModifiedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production].[Product] SET [Name] = @Name, [ProductNumber] = @ProductNumbe"& _ 
                "r, [MakeFlag] = @MakeFlag, [FinishedGoodsFlag] = @FinishedGoodsFlag, [Color] = @"& _ 
                "Color, [SafetyStockLevel] = @SafetyStockLevel, [ReorderPoint] = @ReorderPoint, ["& _ 
                "StandardCost] = @StandardCost, [ListPrice] = @ListPrice, [Size] = @Size, [SizeUn"& _ 
                "itMeasureCode] = @SizeUnitMeasureCode, [WeightUnitMeasureCode] = @WeightUnitMeas"& _ 
                "ureCode, [Weight] = @Weight, [DaysToManufacture] = @DaysToManufacture, [ProductL"& _ 
                "ine] = @ProductLine, [Class] = @Class, [Style] = @Style, [ProductSubcategoryID] "& _ 
                "= @ProductSubcategoryID, [ProductModelID] = @ProductModelID, [SellStartDate] = @"& _ 
                "SellStartDate, [SellEndDate] = @SellEndDate, [DiscontinuedDate] = @DiscontinuedD"& _ 
                "ate, [rowguid] = @rowguid, [ModifiedDate] = @ModifiedDate WHERE (([ProductID] = "& _ 
                "@Original_ProductID) AND ([Name] = @Original_Name) AND ([ProductNumber] = @Origi"& _ 
                "nal_ProductNumber) AND ([MakeFlag] = @Original_MakeFlag) AND ([FinishedGoodsFlag"& _ 
                "] = @Original_FinishedGoodsFlag) AND ((@IsNull_Color = 1 AND [Color] IS NULL) OR"& _ 
                " ([Color] = @Original_Color)) AND ([SafetyStockLevel] = @Original_SafetyStockLev"& _ 
                "el) AND ([ReorderPoint] = @Original_ReorderPoint) AND ([StandardCost] = @Origina"& _ 
                "l_StandardCost) AND ([ListPrice] = @Original_ListPrice) AND ((@IsNull_Size = 1 A"& _ 
                "ND [Size] IS NULL) OR ([Size] = @Original_Size)) AND ((@IsNull_SizeUnitMeasureCo"& _ 
                "de = 1 AND [SizeUnitMeasureCode] IS NULL) OR ([SizeUnitMeasureCode] = @Original_"& _ 
                "SizeUnitMeasureCode)) AND ((@IsNull_WeightUnitMeasureCode = 1 AND [WeightUnitMea"& _ 
                "sureCode] IS NULL) OR ([WeightUnitMeasureCode] = @Original_WeightUnitMeasureCode"& _ 
                ")) AND ((@IsNull_Weight = 1 AND [Weight] IS NULL) OR ([Weight] = @Original_Weigh"& _ 
                "t)) AND ([DaysToManufacture] = @Original_DaysToManufacture) AND ((@IsNull_Produc"& _ 
                "tLine = 1 AND [ProductLine] IS NULL) OR ([ProductLine] = @Original_ProductLine))"& _ 
                " AND ((@IsNull_Class = 1 AND [Class] IS NULL) OR ([Class] = @Original_Class)) AN"& _ 
                "D ((@IsNull_Style = 1 AND [Style] IS NULL) OR ([Style] = @Original_Style)) AND ("& _ 
                "(@IsNull_ProductSubcategoryID = 1 AND [ProductSubcategoryID] IS NULL) OR ([Produ"& _ 
                "ctSubcategoryID] = @Original_ProductSubcategoryID)) AND ((@IsNull_ProductModelID"& _ 
                " = 1 AND [ProductModelID] IS NULL) OR ([ProductModelID] = @Original_ProductModel"& _ 
                "ID)) AND ([SellStartDate] = @Original_SellStartDate) AND ((@IsNull_SellEndDate ="& _ 
                " 1 AND [SellEndDate] IS NULL) OR ([SellEndDate] = @Original_SellEndDate)) AND (("& _ 
                "@IsNull_DiscontinuedDate = 1 AND [DiscontinuedDate] IS NULL) OR ([DiscontinuedDa"& _ 
                "te] = @Original_DiscontinuedDate)) AND ([rowguid] = @Original_rowguid) AND ([Mod"& _ 
                "ifiedDate] = @Original_ModifiedDate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ProductID, Name, ProductNumber, M"& _ 
                "akeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost,"& _ 
                " ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManu"& _ 
                "facture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellSt"& _ 
                "artDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate FROM Production.Pr"& _ 
                "oduct WHERE (ProductID = @ProductID)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductNumber", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductNumber", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MakeFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "MakeFlag", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FinishedGoodsFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishedGoodsFlag", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Color", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SafetyStockLevel", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SafetyStockLevel", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ReorderPoint", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "ReorderPoint", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@StandardCost", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardCost", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ListPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "ListPrice", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Size", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SizeUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@WeightUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Weight", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 2, "Weight", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DaysToManufacture", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DaysToManufacture", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductLine", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Class", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Style", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SellStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellStartDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SellEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DiscontinuedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "rowguid", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ModifiedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductNumber", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductNumber", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MakeFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "MakeFlag", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FinishedGoodsFlag", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishedGoodsFlag", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Color", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Color", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Color", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SafetyStockLevel", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SafetyStockLevel", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ReorderPoint", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "ReorderPoint", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_StandardCost", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardCost", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ListPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "ListPrice", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Size", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Size", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Size", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SizeUnitMeasureCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SizeUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SizeUnitMeasureCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_WeightUnitMeasureCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_WeightUnitMeasureCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WeightUnitMeasureCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Weight", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Weight", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Weight", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 2, "Weight", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DaysToManufacture", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DaysToManufacture", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductLine", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductLine", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductLine", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Class", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Class", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Class", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Style", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Style", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Style", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductSubcategoryID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductSubcategoryID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ProductModelID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductModelID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SellStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellStartDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SellEndDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SellEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SellEndDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_DiscontinuedDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DiscontinuedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DiscontinuedDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_rowguid", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "rowguid", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ProductID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ProductID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.UsingTheListObject.Settings.Default.AdventureWorks_DataConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, Safety"& _ 
                "StockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, We"& _ 
                "ightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, Produ"& _ 
                "ctSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, r"& _ 
                "owguid, ModifiedDate FROM Production.Product"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AdventureWorks_DataDataSet.ProductDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AdventureWorks_DataDataSet.ProductDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AdventureWorks_DataDataSet.ProductDataTable = New AdventureWorks_DataDataSet.ProductDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AdventureWorks_DataDataSet.ProductDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AdventureWorks_DataDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Product")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ProductID As Integer,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_ProductNumber As String,  _
                    ByVal Original_MakeFlag As Boolean,  _
                    ByVal Original_FinishedGoodsFlag As Boolean,  _
                    ByVal Original_Color As String,  _
                    ByVal Original_SafetyStockLevel As Short,  _
                    ByVal Original_ReorderPoint As Short,  _
                    ByVal Original_StandardCost As Decimal,  _
                    ByVal Original_ListPrice As Decimal,  _
                    ByVal Original_Size As String,  _
                    ByVal Original_SizeUnitMeasureCode As String,  _
                    ByVal Original_WeightUnitMeasureCode As String,  _
                    ByVal Original_Weight As System.Nullable(Of Decimal),  _
                    ByVal Original_DaysToManufacture As Integer,  _
                    ByVal Original_ProductLine As String,  _
                    ByVal Original_Class As String,  _
                    ByVal Original_Style As String,  _
                    ByVal Original_ProductSubcategoryID As System.Nullable(Of Integer),  _
                    ByVal Original_ProductModelID As System.Nullable(Of Integer),  _
                    ByVal Original_SellStartDate As Date,  _
                    ByVal Original_SellEndDate As System.Nullable(Of Date),  _
                    ByVal Original_DiscontinuedDate As System.Nullable(Of Date),  _
                    ByVal Original_rowguid As System.Guid,  _
                    ByVal Original_ModifiedDate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ProductID,Integer)
            If (Original_Name Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Name,String)
            End If
            If (Original_ProductNumber Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ProductNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ProductNumber,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MakeFlag,Boolean)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FinishedGoodsFlag,Boolean)
            If (Original_Color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Color,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_SafetyStockLevel,Short)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ReorderPoint,Short)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_StandardCost,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ListPrice,Decimal)
            If (Original_Size Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Size,String)
            End If
            If (Original_SizeUnitMeasureCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SizeUnitMeasureCode,String)
            End If
            If (Original_WeightUnitMeasureCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_WeightUnitMeasureCode,String)
            End If
            If (Original_Weight.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Weight.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_DaysToManufacture,Integer)
            If (Original_ProductLine Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_ProductLine,String)
            End If
            If (Original_Class Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Class,String)
            End If
            If (Original_Style Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_Style,String)
            End If
            If (Original_ProductSubcategoryID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_ProductSubcategoryID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_ProductModelID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_ProductModelID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_SellStartDate,Date)
            If (Original_SellEndDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_SellEndDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (Original_DiscontinuedDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_DiscontinuedDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_rowguid,System.Guid)
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_ModifiedDate,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Name As String,  _
                    ByVal ProductNumber As String,  _
                    ByVal MakeFlag As Boolean,  _
                    ByVal FinishedGoodsFlag As Boolean,  _
                    ByVal Color As String,  _
                    ByVal SafetyStockLevel As Short,  _
                    ByVal ReorderPoint As Short,  _
                    ByVal StandardCost As Decimal,  _
                    ByVal ListPrice As Decimal,  _
                    ByVal Size As String,  _
                    ByVal SizeUnitMeasureCode As String,  _
                    ByVal WeightUnitMeasureCode As String,  _
                    ByVal Weight As System.Nullable(Of Decimal),  _
                    ByVal DaysToManufacture As Integer,  _
                    ByVal ProductLine As String,  _
                    ByVal _Class As String,  _
                    ByVal Style As String,  _
                    ByVal ProductSubcategoryID As System.Nullable(Of Integer),  _
                    ByVal ProductModelID As System.Nullable(Of Integer),  _
                    ByVal SellStartDate As Date,  _
                    ByVal SellEndDate As System.Nullable(Of Date),  _
                    ByVal DiscontinuedDate As System.Nullable(Of Date),  _
                    ByVal rowguid As System.Guid,  _
                    ByVal ModifiedDate As Date) As Integer
            If (Name Is Nothing) Then
                Throw New System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (ProductNumber Is Nothing) Then
                Throw New System.ArgumentNullException("ProductNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ProductNumber,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MakeFlag,Boolean)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FinishedGoodsFlag,Boolean)
            If (Color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Color,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(SafetyStockLevel,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ReorderPoint,Short)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(StandardCost,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ListPrice,Decimal)
            If (Size Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Size,String)
            End If
            If (SizeUnitMeasureCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SizeUnitMeasureCode,String)
            End If
            If (WeightUnitMeasureCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(WeightUnitMeasureCode,String)
            End If
            If (Weight.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Weight.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(DaysToManufacture,Integer)
            If (ProductLine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ProductLine,String)
            End If
            If (_Class Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(_Class,String)
            End If
            If (Style Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Style,String)
            End If
            If (ProductSubcategoryID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ProductSubcategoryID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (ProductModelID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(ProductModelID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(SellStartDate,Date)
            If (SellEndDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SellEndDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (DiscontinuedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(DiscontinuedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(rowguid,System.Guid)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(ModifiedDate,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Name As String,  _
                    ByVal ProductNumber As String,  _
                    ByVal MakeFlag As Boolean,  _
                    ByVal FinishedGoodsFlag As Boolean,  _
                    ByVal Color As String,  _
                    ByVal SafetyStockLevel As Short,  _
                    ByVal ReorderPoint As Short,  _
                    ByVal StandardCost As Decimal,  _
                    ByVal ListPrice As Decimal,  _
                    ByVal Size As String,  _
                    ByVal SizeUnitMeasureCode As String,  _
                    ByVal WeightUnitMeasureCode As String,  _
                    ByVal Weight As System.Nullable(Of Decimal),  _
                    ByVal DaysToManufacture As Integer,  _
                    ByVal ProductLine As String,  _
                    ByVal _Class As String,  _
                    ByVal Style As String,  _
                    ByVal ProductSubcategoryID As System.Nullable(Of Integer),  _
                    ByVal ProductModelID As System.Nullable(Of Integer),  _
                    ByVal SellStartDate As Date,  _
                    ByVal SellEndDate As System.Nullable(Of Date),  _
                    ByVal DiscontinuedDate As System.Nullable(Of Date),  _
                    ByVal rowguid As System.Guid,  _
                    ByVal ModifiedDate As Date,  _
                    ByVal Original_ProductID As Integer,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_ProductNumber As String,  _
                    ByVal Original_MakeFlag As Boolean,  _
                    ByVal Original_FinishedGoodsFlag As Boolean,  _
                    ByVal Original_Color As String,  _
                    ByVal Original_SafetyStockLevel As Short,  _
                    ByVal Original_ReorderPoint As Short,  _
                    ByVal Original_StandardCost As Decimal,  _
                    ByVal Original_ListPrice As Decimal,  _
                    ByVal Original_Size As String,  _
                    ByVal Original_SizeUnitMeasureCode As String,  _
                    ByVal Original_WeightUnitMeasureCode As String,  _
                    ByVal Original_Weight As System.Nullable(Of Decimal),  _
                    ByVal Original_DaysToManufacture As Integer,  _
                    ByVal Original_ProductLine As String,  _
                    ByVal Original_Class As String,  _
                    ByVal Original_Style As String,  _
                    ByVal Original_ProductSubcategoryID As System.Nullable(Of Integer),  _
                    ByVal Original_ProductModelID As System.Nullable(Of Integer),  _
                    ByVal Original_SellStartDate As Date,  _
                    ByVal Original_SellEndDate As System.Nullable(Of Date),  _
                    ByVal Original_DiscontinuedDate As System.Nullable(Of Date),  _
                    ByVal Original_rowguid As System.Guid,  _
                    ByVal Original_ModifiedDate As Date,  _
                    ByVal ProductID As Integer) As Integer
            If (Name Is Nothing) Then
                Throw New System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (ProductNumber Is Nothing) Then
                Throw New System.ArgumentNullException("ProductNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ProductNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MakeFlag,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FinishedGoodsFlag,Boolean)
            If (Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Color,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SafetyStockLevel,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ReorderPoint,Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(StandardCost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ListPrice,Decimal)
            If (Size Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Size,String)
            End If
            If (SizeUnitMeasureCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SizeUnitMeasureCode,String)
            End If
            If (WeightUnitMeasureCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(WeightUnitMeasureCode,String)
            End If
            If (Weight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Weight.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DaysToManufacture,Integer)
            If (ProductLine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ProductLine,String)
            End If
            If (_Class Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(_Class,String)
            End If
            If (Style Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Style,String)
            End If
            If (ProductSubcategoryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ProductSubcategoryID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (ProductModelID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ProductModelID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SellStartDate,Date)
            If (SellEndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SellEndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (DiscontinuedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(DiscontinuedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(rowguid,System.Guid)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ModifiedDate,Date)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ProductID,Integer)
            If (Original_Name Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Name,String)
            End If
            If (Original_ProductNumber Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ProductNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ProductNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_MakeFlag,Boolean)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_FinishedGoodsFlag,Boolean)
            If (Original_Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Color,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_SafetyStockLevel,Short)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_ReorderPoint,Short)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_StandardCost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ListPrice,Decimal)
            If (Original_Size Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Size,String)
            End If
            If (Original_SizeUnitMeasureCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_SizeUnitMeasureCode,String)
            End If
            If (Original_WeightUnitMeasureCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_WeightUnitMeasureCode,String)
            End If
            If (Original_Weight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Weight.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_DaysToManufacture,Integer)
            If (Original_ProductLine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_ProductLine,String)
            End If
            If (Original_Class Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Class,String)
            End If
            If (Original_Style Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Style,String)
            End If
            If (Original_ProductSubcategoryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_ProductSubcategoryID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = System.DBNull.Value
            End If
            If (Original_ProductModelID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_ProductModelID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_SellStartDate,Date)
            If (Original_SellEndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_SellEndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = System.DBNull.Value
            End If
            If (Original_DiscontinuedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_DiscontinuedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_rowguid,System.Guid)
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_ModifiedDate,Date)
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(ProductID,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
