'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System

'
'This source code was auto-generated by xsd, Version=2.0.50215.0.
'

<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Sales"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class Sales
    Inherits System.Data.DataSet
    
    Private tableSalesHeader As SalesHeaderDataTable
    
    Private tableSalesDetail As SalesDetailDataTable
    
    Private relationSalesHeader_SalesDetail As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SalesHeader")) Is Nothing) Then
                MyBase.Tables.Add(New SalesHeaderDataTable(ds.Tables("SalesHeader")))
            End If
            If (Not (ds.Tables("SalesDetail")) Is Nothing) Then
                MyBase.Tables.Add(New SalesDetailDataTable(ds.Tables("SalesDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SalesHeader() As SalesHeaderDataTable
        Get
            Return Me.tableSalesHeader
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SalesDetail() As SalesDetailDataTable
        Get
            Return Me.tableSalesDetail
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Sales = CType(MyBase.Clone,Sales)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SalesHeader")) Is Nothing) Then
                MyBase.Tables.Add(New SalesHeaderDataTable(ds.Tables("SalesHeader")))
            End If
            If (Not (ds.Tables("SalesDetail")) Is Nothing) Then
                MyBase.Tables.Add(New SalesDetailDataTable(ds.Tables("SalesDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSalesHeader = CType(MyBase.Tables("SalesHeader"),SalesHeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSalesHeader) Is Nothing) Then
                Me.tableSalesHeader.InitVars
            End If
        End If
        Me.tableSalesDetail = CType(MyBase.Tables("SalesDetail"),SalesDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSalesDetail) Is Nothing) Then
                Me.tableSalesDetail.InitVars
            End If
        End If
        Me.relationSalesHeader_SalesDetail = Me.Relations("SalesHeader_SalesDetail")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Sales"
        Me.Prefix = ""
        Me.Locale = New System.Globalization.CultureInfo("")
        Me.EnforceConstraints = true
        Me.tableSalesHeader = New SalesHeaderDataTable
        MyBase.Tables.Add(Me.tableSalesHeader)
        Me.tableSalesDetail = New SalesDetailDataTable
        MyBase.Tables.Add(Me.tableSalesDetail)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("SalesHeader_SalesDetail", New System.Data.DataColumn() {Me.tableSalesHeader.SalesHeader_IdColumn}, New System.Data.DataColumn() {Me.tableSalesDetail.SalesHeader_IdColumn})
        Me.tableSalesDetail.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationSalesHeader_SalesDetail = New System.Data.DataRelation("SalesHeader_SalesDetail", New System.Data.DataColumn() {Me.tableSalesHeader.SalesHeader_IdColumn}, New System.Data.DataColumn() {Me.tableSalesDetail.SalesHeader_IdColumn}, false)
        Me.relationSalesHeader_SalesDetail.Nested = true
        Me.Relations.Add(Me.relationSalesHeader_SalesDetail)
    End Sub
    
    Private Function ShouldSerializeSalesHeader() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSalesDetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Sales = New Sales
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub SalesHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As SalesHeaderRowChangeEvent)
    
    Public Delegate Sub SalesDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As SalesDetailRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SalesHeaderDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHeaderID As System.Data.DataColumn
        
        Private columnSalesPersonID As System.Data.DataColumn
        
        Private columnSalesPersonName As System.Data.DataColumn
        
        Private columnCustomerID As System.Data.DataColumn
        
        Private columnCustomerName As System.Data.DataColumn
        
        Private columnSalesDate As System.Data.DataColumn
        
        Private columnSalesTotal As System.Data.DataColumn
        
        Private columnSalesHeader_Id As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "SalesHeader"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property HeaderIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnHeaderID
            End Get
        End Property
        
        Public ReadOnly Property SalesPersonIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesPersonID
            End Get
        End Property
        
        Public ReadOnly Property SalesPersonNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesPersonName
            End Get
        End Property
        
        Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Public ReadOnly Property CustomerNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Public ReadOnly Property SalesDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesDate
            End Get
        End Property
        
        Public ReadOnly Property SalesTotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesTotal
            End Get
        End Property
        
        Public ReadOnly Property SalesHeader_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesHeader_Id
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SalesHeaderRow
            Get
                Return CType(Me.Rows(index),SalesHeaderRow)
            End Get
        End Property
        
        Public Event SalesHeaderRowChanged As SalesHeaderRowChangeEventHandler
        
        Public Event SalesHeaderRowChanging As SalesHeaderRowChangeEventHandler
        
        Public Event SalesHeaderRowDeleted As SalesHeaderRowChangeEventHandler
        
        Public Event SalesHeaderRowDeleting As SalesHeaderRowChangeEventHandler
        
        Public Overloads Sub AddSalesHeaderRow(ByVal row As SalesHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSalesHeaderRow(ByVal HeaderID As Integer, ByVal SalesPersonID As Integer, ByVal SalesPersonName As String, ByVal CustomerID As Integer, ByVal CustomerName As String, ByVal SalesDate As Date, ByVal SalesTotal As Decimal) As SalesHeaderRow
            Dim rowSalesHeaderRow As SalesHeaderRow = CType(Me.NewRow,SalesHeaderRow)
            rowSalesHeaderRow.ItemArray = New Object() {HeaderID, SalesPersonID, SalesPersonName, CustomerID, CustomerName, SalesDate, SalesTotal, Nothing}
            Me.Rows.Add(rowSalesHeaderRow)
            Return rowSalesHeaderRow
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SalesHeaderDataTable = CType(MyBase.Clone,SalesHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SalesHeaderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHeaderID = MyBase.Columns("HeaderID")
            Me.columnSalesPersonID = MyBase.Columns("SalesPersonID")
            Me.columnSalesPersonName = MyBase.Columns("SalesPersonName")
            Me.columnCustomerID = MyBase.Columns("CustomerID")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnSalesDate = MyBase.Columns("SalesDate")
            Me.columnSalesTotal = MyBase.Columns("SalesTotal")
            Me.columnSalesHeader_Id = MyBase.Columns("SalesHeader_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnHeaderID = New System.Data.DataColumn("HeaderID", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnHeaderID)
            Me.columnSalesPersonID = New System.Data.DataColumn("SalesPersonID", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnSalesPersonID)
            Me.columnSalesPersonName = New System.Data.DataColumn("SalesPersonName", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnSalesPersonName)
            Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnCustomerID)
            Me.columnCustomerName = New System.Data.DataColumn("CustomerName", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnSalesDate = New System.Data.DataColumn("SalesDate", GetType(Date), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnSalesDate)
            Me.columnSalesTotal = New System.Data.DataColumn("SalesTotal", GetType(Decimal), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnSalesTotal)
            Me.columnSalesHeader_Id = New System.Data.DataColumn("SalesHeader_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSalesHeader_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSalesHeader_Id}, true))
            Me.columnSalesHeader_Id.AutoIncrement = true
            Me.columnSalesHeader_Id.AllowDBNull = false
            Me.columnSalesHeader_Id.Unique = true
        End Sub
        
        Public Function NewSalesHeaderRow() As SalesHeaderRow
            Return CType(Me.NewRow,SalesHeaderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SalesHeaderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SalesHeaderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SalesHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent SalesHeaderRowChanged(Me, New SalesHeaderRowChangeEvent(CType(e.Row,SalesHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SalesHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent SalesHeaderRowChanging(Me, New SalesHeaderRowChangeEvent(CType(e.Row,SalesHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SalesHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent SalesHeaderRowDeleted(Me, New SalesHeaderRowChangeEvent(CType(e.Row,SalesHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SalesHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent SalesHeaderRowDeleting(Me, New SalesHeaderRowChangeEvent(CType(e.Row,SalesHeaderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSalesHeaderRow(ByVal row As SalesHeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Sales = New Sales
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SalesHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SalesDetailDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDetailID As System.Data.DataColumn
        
        Private columnItemID As System.Data.DataColumn
        
        Private columnItemName As System.Data.DataColumn
        
        Private columnQuantity As System.Data.DataColumn
        
        Private columnUnitPrice As System.Data.DataColumn
        
        Private columnSubTotal As System.Data.DataColumn
        
        Private columnSalesHeader_Id As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "SalesDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property DetailIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnDetailID
            End Get
        End Property
        
        Public ReadOnly Property ItemIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        Public ReadOnly Property ItemNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        Public ReadOnly Property QuantityColumn() As System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Public ReadOnly Property UnitPriceColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Public ReadOnly Property SubTotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        Public ReadOnly Property SalesHeader_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalesHeader_Id
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SalesDetailRow
            Get
                Return CType(Me.Rows(index),SalesDetailRow)
            End Get
        End Property
        
        Public Event SalesDetailRowChanged As SalesDetailRowChangeEventHandler
        
        Public Event SalesDetailRowChanging As SalesDetailRowChangeEventHandler
        
        Public Event SalesDetailRowDeleted As SalesDetailRowChangeEventHandler
        
        Public Event SalesDetailRowDeleting As SalesDetailRowChangeEventHandler
        
        Public Overloads Sub AddSalesDetailRow(ByVal row As SalesDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSalesDetailRow(ByVal DetailID As Integer, ByVal ItemID As Integer, ByVal ItemName As String, ByVal Quantity As Integer, ByVal UnitPrice As Decimal, ByVal SubTotal As Decimal, ByVal parentSalesHeaderRowBySalesHeader_SalesDetail As SalesHeaderRow) As SalesDetailRow
            Dim rowSalesDetailRow As SalesDetailRow = CType(Me.NewRow,SalesDetailRow)
            rowSalesDetailRow.ItemArray = New Object() {DetailID, ItemID, ItemName, Quantity, UnitPrice, SubTotal, parentSalesHeaderRowBySalesHeader_SalesDetail(7)}
            Me.Rows.Add(rowSalesDetailRow)
            Return rowSalesDetailRow
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SalesDetailDataTable = CType(MyBase.Clone,SalesDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SalesDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDetailID = MyBase.Columns("DetailID")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
            Me.columnSalesHeader_Id = MyBase.Columns("SalesHeader_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDetailID = New System.Data.DataColumn("DetailID", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnDetailID)
            Me.columnItemID = New System.Data.DataColumn("ItemID", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemName = New System.Data.DataColumn("ItemName", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnQuantity = New System.Data.DataColumn("Quantity", GetType(Integer), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnUnitPrice = New System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnSubTotal = New System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnSalesHeader_Id = New System.Data.DataColumn("SalesHeader_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSalesHeader_Id)
            Me.columnDetailID.Namespace = ""
            Me.columnItemID.Namespace = ""
            Me.columnItemName.Namespace = ""
            Me.columnQuantity.Namespace = ""
            Me.columnUnitPrice.Namespace = ""
            Me.columnSubTotal.Namespace = ""
        End Sub
        
        Public Function NewSalesDetailRow() As SalesDetailRow
            Return CType(Me.NewRow,SalesDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SalesDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SalesDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SalesDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent SalesDetailRowChanged(Me, New SalesDetailRowChangeEvent(CType(e.Row,SalesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SalesDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent SalesDetailRowChanging(Me, New SalesDetailRowChangeEvent(CType(e.Row,SalesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SalesDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent SalesDetailRowDeleted(Me, New SalesDetailRowChangeEvent(CType(e.Row,SalesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SalesDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent SalesDetailRowDeleting(Me, New SalesDetailRowChangeEvent(CType(e.Row,SalesDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSalesDetailRow(ByVal row As SalesDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Sales = New Sales
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SalesDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class SalesHeaderRow
        Inherits System.Data.DataRow
        
        Private tableSalesHeader As SalesHeaderDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSalesHeader = CType(Me.Table,SalesHeaderDataTable)
        End Sub
        
        Public Property HeaderID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.HeaderIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HeaderID' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.HeaderIDColumn) = value
            End Set
        End Property
        
        Public Property SalesPersonID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.SalesPersonIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SalesPersonID' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.SalesPersonIDColumn) = value
            End Set
        End Property
        
        Public Property SalesPersonName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.SalesPersonNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SalesPersonName' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.SalesPersonNameColumn) = value
            End Set
        End Property
        
        Public Property CustomerID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.CustomerIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CustomerID' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.CustomerNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CustomerName' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property SalesDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.SalesDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SalesDate' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.SalesDateColumn) = value
            End Set
        End Property
        
        Public Property SalesTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSalesHeader.SalesTotalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SalesTotal' in table 'SalesHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesHeader.SalesTotalColumn) = value
            End Set
        End Property
        
        Public Function IsHeaderIDNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.HeaderIDColumn)
        End Function
        
        Public Sub SetHeaderIDNull()
            Me(Me.tableSalesHeader.HeaderIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesPersonIDNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.SalesPersonIDColumn)
        End Function
        
        Public Sub SetSalesPersonIDNull()
            Me(Me.tableSalesHeader.SalesPersonIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesPersonNameNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.SalesPersonNameColumn)
        End Function
        
        Public Sub SetSalesPersonNameNull()
            Me(Me.tableSalesHeader.SalesPersonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableSalesHeader.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.CustomerNameColumn)
        End Function
        
        Public Sub SetCustomerNameNull()
            Me(Me.tableSalesHeader.CustomerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesDateNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.SalesDateColumn)
        End Function
        
        Public Sub SetSalesDateNull()
            Me(Me.tableSalesHeader.SalesDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesTotalNull() As Boolean
            Return Me.IsNull(Me.tableSalesHeader.SalesTotalColumn)
        End Function
        
        Public Sub SetSalesTotalNull()
            Me(Me.tableSalesHeader.SalesTotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSalesDetailRows() As SalesDetailRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SalesHeader_SalesDetail")),SalesDetailRow())
        End Function
    End Class
    
    Partial Public Class SalesDetailRow
        Inherits System.Data.DataRow
        
        Private tableSalesDetail As SalesDetailDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSalesDetail = CType(Me.Table,SalesDetailDataTable)
        End Sub
        
        Public Property DetailID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.DetailIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DetailID' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.DetailIDColumn) = value
            End Set
        End Property
        
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.ItemIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ItemID' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.ItemIDColumn) = value
            End Set
        End Property
        
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.ItemNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ItemName' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.ItemNameColumn) = value
            End Set
        End Property
        
        Public Property Quantity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.QuantityColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Quantity' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.QuantityColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.UnitPriceColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property SubTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSalesDetail.SubTotalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SubTotal' in table 'SalesDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalesDetail.SubTotalColumn) = value
            End Set
        End Property
        
        Public Property SalesHeaderRow() As SalesHeaderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SalesHeader_SalesDetail")),SalesHeaderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SalesHeader_SalesDetail"))
            End Set
        End Property
        
        Public Function IsDetailIDNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.DetailIDColumn)
        End Function
        
        Public Sub SetDetailIDNull()
            Me(Me.tableSalesDetail.DetailIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.ItemIDColumn)
        End Function
        
        Public Sub SetItemIDNull()
            Me(Me.tableSalesDetail.ItemIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.ItemNameColumn)
        End Function
        
        Public Sub SetItemNameNull()
            Me(Me.tableSalesDetail.ItemNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableSalesDetail.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableSalesDetail.UnitPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubTotalNull() As Boolean
            Return Me.IsNull(Me.tableSalesDetail.SubTotalColumn)
        End Function
        
        Public Sub SetSubTotalNull()
            Me(Me.tableSalesDetail.SubTotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class SalesHeaderRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SalesHeaderRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As SalesHeaderRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As SalesHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class SalesDetailRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SalesDetailRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As SalesDetailRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As SalesDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
