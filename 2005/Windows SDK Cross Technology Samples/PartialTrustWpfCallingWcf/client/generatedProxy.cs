//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
// CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ICalcPlus", Namespace="http://tempuri.org/")]
public partial class CalcPlusService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AddOperationCompleted;
    
    private System.Threading.SendOrPostCallback DivideOperationCompleted;
    
    private System.Threading.SendOrPostCallback MultiplyOperationCompleted;
    
    private System.Threading.SendOrPostCallback SubtractOperationCompleted;
    
    /// <remarks/>
    public CalcPlusService() {
        this.Url = "http://localhost/ServiceModelSamples/service.svc";
    }
    
    /// <remarks/>
    public event AddCompletedEventHandler AddCompleted;
    
    /// <remarks/>
    public event DivideCompletedEventHandler DivideCompleted;
    
    /// <remarks/>
    public event MultiplyCompletedEventHandler MultiplyCompleted;
    
    /// <remarks/>
    public event SubtractCompletedEventHandler SubtractCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalcPlus/Add", RequestNamespace="http://Microsoft.ServiceModel.Samples", ResponseNamespace="http://Microsoft.ServiceModel.Samples", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public CalcResult Add(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified) {
        object[] results = this.Invoke("Add", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified});
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdd(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Add", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public CalcResult EndAdd(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public void AddAsync(double n1, bool n1Specified, double n2, bool n2Specified) {
        this.AddAsync(n1, n1Specified, n2, n2Specified, null);
    }
    
    /// <remarks/>
    public void AddAsync(double n1, bool n1Specified, double n2, bool n2Specified, object userState) {
        if ((this.AddOperationCompleted == null)) {
            this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
        }
        this.InvokeAsync("Add", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, this.AddOperationCompleted, userState);
    }
    
    private void OnAddOperationCompleted(object arg) {
        if ((this.AddCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalcPlus/Divide", RequestNamespace="http://Microsoft.ServiceModel.Samples", ResponseNamespace="http://Microsoft.ServiceModel.Samples", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public CalcResult Divide(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified) {
        object[] results = this.Invoke("Divide", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified});
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDivide(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Divide", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public CalcResult EndDivide(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public void DivideAsync(double n1, bool n1Specified, double n2, bool n2Specified) {
        this.DivideAsync(n1, n1Specified, n2, n2Specified, null);
    }
    
    /// <remarks/>
    public void DivideAsync(double n1, bool n1Specified, double n2, bool n2Specified, object userState) {
        if ((this.DivideOperationCompleted == null)) {
            this.DivideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivideOperationCompleted);
        }
        this.InvokeAsync("Divide", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, this.DivideOperationCompleted, userState);
    }
    
    private void OnDivideOperationCompleted(object arg) {
        if ((this.DivideCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DivideCompleted(this, new DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalcPlus/Multiply", RequestNamespace="http://Microsoft.ServiceModel.Samples", ResponseNamespace="http://Microsoft.ServiceModel.Samples", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public CalcResult Multiply(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified) {
        object[] results = this.Invoke("Multiply", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified});
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMultiply(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Multiply", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public CalcResult EndMultiply(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public void MultiplyAsync(double n1, bool n1Specified, double n2, bool n2Specified) {
        this.MultiplyAsync(n1, n1Specified, n2, n2Specified, null);
    }
    
    /// <remarks/>
    public void MultiplyAsync(double n1, bool n1Specified, double n2, bool n2Specified, object userState) {
        if ((this.MultiplyOperationCompleted == null)) {
            this.MultiplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiplyOperationCompleted);
        }
        this.InvokeAsync("Multiply", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, this.MultiplyOperationCompleted, userState);
    }
    
    private void OnMultiplyOperationCompleted(object arg) {
        if ((this.MultiplyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.MultiplyCompleted(this, new MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalcPlus/Subtract", RequestNamespace="http://Microsoft.ServiceModel.Samples", ResponseNamespace="http://Microsoft.ServiceModel.Samples", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public CalcResult Subtract(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified) {
        object[] results = this.Invoke("Subtract", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified});
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSubtract(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Subtract", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public CalcResult EndSubtract(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CalcResult)(results[0]));
    }
    
    /// <remarks/>
    public void SubtractAsync(double n1, bool n1Specified, double n2, bool n2Specified) {
        this.SubtractAsync(n1, n1Specified, n2, n2Specified, null);
    }
    
    /// <remarks/>
    public void SubtractAsync(double n1, bool n1Specified, double n2, bool n2Specified, object userState) {
        if ((this.SubtractOperationCompleted == null)) {
            this.SubtractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractOperationCompleted);
        }
        this.InvokeAsync("Subtract", new object[] {
                    n1,
                    n1Specified,
                    n2,
                    n2Specified}, this.SubtractOperationCompleted, userState);
    }
    
    private void OnSubtractOperationCompleted(object arg) {
        if ((this.SubtractCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SubtractCompleted(this, new SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Microsoft.ServiceModel.Samples")]
public partial class CalcResult : object, System.ComponentModel.INotifyPropertyChanged {
    
    private double numberField;
    
    private bool numberFieldSpecified;
    
    private string wordsField;
    
    /// <remarks/>
    public double Number {
        get {
            return this.numberField;
        }
        set {
            if ((this.numberField != value)) {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NumberSpecified {
        get {
            return this.numberFieldSpecified;
        }
        set {
            if ((this.numberFieldSpecified != value)) {
                this.numberFieldSpecified = value;
                this.RaisePropertyChanged("NumberSpecified");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string Words {
        get {
            return this.wordsField;
        }
        set {
            if ((this.wordsField != value)) {
                this.wordsField = value;
                this.RaisePropertyChanged("Words");
            }
        }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected void RaisePropertyChanged(string propertyName) {
        System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if ((propertyChanged != null)) {
            propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CalcResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CalcResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void DivideCompletedEventHandler(object sender, DivideCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DivideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DivideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CalcResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CalcResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void MultiplyCompletedEventHandler(object sender, MultiplyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class MultiplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal MultiplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CalcResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CalcResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void SubtractCompletedEventHandler(object sender, SubtractCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SubtractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SubtractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CalcResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CalcResult)(this.results[0]));
        }
    }
}
