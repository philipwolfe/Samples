package Microsoft.Samples;
//-----------------------------------------------------------------------
//  This file is part of the Microsoft.NET Framework SDK Code Samples.
// 
//  Copyright (C) Microsoft Corporation.  All rights reserved.
// 
//This source code is intended only as a supplement to Microsoft
//Development Tools and/or on-line documentation.  See these other
//materials for detailed information regarding Microsoft code samples.
// 
//THIS CODE AND INFORMATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY
//KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//PARTICULAR PURPOSE.
/*=====================================================================
  File:      Serialize.jsl

  Summary:   Demonstrates how to use runtime serialization.

=====================================================================*/
import System.*;
import System.Text.*;
import System.IO.*;
import System.Runtime.Serialization.*;
import System.Runtime.Serialization.Formatters.Binary.*;
import System.Runtime.Serialization.Formatters.Soap.*;
import System.Xml.*;

public class App
{
    private static void Usage()
    {
        Console.WriteLine("Usage:\n" + "   -sb [filename] [nodecount]"
            + "\tSerialize a linked list with "
            + "[nodecount]\n\t\t\t\tnodes to [filename] using BinaryFormatter\n\n"
            + "   -sx [filename] [nodecount]\tSerialize a linked list with "
            + "[nodecount]\n\t\t\t\tnodes to [filename] using SoapFormatter\n\n"
            + "   -db [filename] \t\tDe-Serialize and display a linked list "
            + "from\n\t\t\t\t[filename] using binary formatter\n\n"
            + "   -dx [filename] \t\tDe-Serialize and display a linked list "
            + "from\n\t\t\t\t[filename] using XML formatter\n");
    } //Usage

    public static void main(String[] args)
    {
        try {
            // Parse command line args
            boolean useBinary = false;
            boolean serialize = false;
            int shiftArgs = 0;

            if (args[0].get_Chars(0) == '-' || args[0].get_Chars(0) == '/') {
                if (args[0].get_Chars(1) == '?') {
                    Usage();
                    return;
                }
                useBinary = args[0].get_Chars(2) == 'b';
                serialize = args[0].get_Chars(1) == 's';
                shiftArgs = 1;
            }
            // Serialize or Deserialize an object graph
            if (serialize) {
                SerializeGraph(useBinary, args[(0 + shiftArgs)],
                    Int32.Parse(args[(1 + shiftArgs)]));
            }
            else {
                DeserializeGraph(useBinary, args[(0 + shiftArgs)]);
            }
        }
        catch (IndexOutOfRangeException exp) {
            Usage();
        }
    } //main

    private static void SerializeGraph(boolean useBinary, String fileName,
        int nodeCount)
    {
        // Create a filestream object
        Console.WriteLine("\nSerializing LinkedList to file: {0}..\n", fileName);
        Stream file = File.Open(fileName, FileMode.Create);
        // Create a linked list object and populate it with random nodes
        LinkedList list = new LinkedList();

        list.PopulateRandom(nodeCount);
        Console.WriteLine(list);
        // Create a formatter object based on command line arguments
        IFormatter formatter = (useBinary)
            ? ((IFormatter)(new BinaryFormatter()))
            : ((IFormatter)(new SoapFormatter()));
        // Serialize the object graph to stream
        formatter.Serialize(file, list);
        // All done
        file.Close();
    } //SerializeGraph

    private static void DeserializeGraph(boolean useBinary, String fileName)
    {
        // Verify that the input file exists
        if (!(File.Exists(fileName))) {
            Console.WriteLine("Input file not found: {0}\n", fileName);
            Usage();
            return;
        }
        // Open the requested file to a stream object
        Console.WriteLine("\nDeserializing LinkedList from file: {0}..\n",
            fileName);
        Stream file = File.Open(fileName, FileMode.Open);
        // Create a formatter object based on command line arguments
        IFormatter formatter = (useBinary) 
            ? ((IFormatter)(new BinaryFormatter()))
            : ((IFormatter)(new SoapFormatter()));
        // Deserialize the object graph from stream
        try {
            LinkedList list = (LinkedList)formatter.Deserialize(file);
            // Tests like this are relevant in projects which 
            // serialize multiple object types
            if (list != null) {
                Console.WriteLine(list);
            }
            else {
                Console.WriteLine("The deserialized object graph"
                    + " is not a LinkedList.");
            }
        }
        // Handler for BinaryFormatter exception
        catch (SerializationException exp) {
            Console.WriteLine("Could not deserialize file.  Check that the"
                + " input file is valid and the requested serialization"
                + " format is correct.");
        }
        // Handler for SoapException
        catch (ArgumentException exp) {
            Console.WriteLine("Could not deserialize file.  Check that the "
                + "input file is valid and the requested serialization "
                + "format is correct.");
        }
        // Handler for XmlFormatter exception
        catch (XmlException exp) {
            Console.WriteLine("Could not deserialize file.  Check that the "
                + "input file is valid and the requested serialization "
                + "format is correct.");
        }
        // All done
        file.Close();
    } //DeserializeGraph
} //App

// Note that this type is attributed as serializable
/** @attribute Serializable()
 */
public class LinkedList
{
    // Construct an empty LinkedList
    public LinkedList()
    {
        nodeHead = new Node();
    } //LinkedList

    // Represent the LinkedList as a string
    public String ToString()
    {
        StringBuilder list = new StringBuilder("List:\n");
        int index = 0;
        Node nodeIterator = nodeHead.get_Next();

        while (nodeIterator != null) {
            list.Append("Node #" + index++ + "\n" + nodeIterator + "\n");
            nodeIterator = nodeIterator.get_Next();
        }
        return list.ToString();
    } //ToString

    // Populate the list with an arbitrary number of nodes with random data
    public void PopulateRandom(int numNodes)
    {
        Random rand = new Random();
        while (numNodes-- != 0) {
            Add("Semi-Random String: " + rand.Next(1001), rand.Next(1001));
        }
    } //PopulateRandom

    // Add a node
    public void Add(String text, int number)
    {
        Node node = new Node();
        node.set_TextData(text);
        node.set_NumberData(number);
        node.Add(nodeHead);
    } //Add

    // Reference to the empty head node
    private Node nodeHead;

    // This nested type is also attributed as serializable
    /** @attribute Serializable()
     */
    public class Node
    {
        // Construct a Node object
        Node()
        {
            next = null;
        } //Node

        // Add a node object to a list
        public void Add(Node nodeHead)
        {
            Node nodeIterator = nodeHead;
            while (nodeIterator.next != null) {
                nodeIterator = nodeIterator.next;
            }
            nodeIterator.next = this;
            next = null;
        } //Add

        // Accessor property for textData private field
        /** @property 
         */
        public String get_TextData()
        {
            return textData;
        } //get_TextData

        /** @property 
         */
        public void set_TextData(String value)
        {
            textData = value;
        } //set_TextData

        // Accessor property for numberData private field
        /** @property 
         */
        public int get_NumberData()
        {
            return numberData;
        } //get_NumberData

        /** @property 
         */
        public void set_NumberData(int value)
        {
            numberData = value;
        } //set_NumberData

        // Read-only property for next private field
        /** @property 
         */
        public Node get_Next()
        {
            return next;
        } //get_Next

        // Represent the node as a string
        public String ToString()
        {
            return "\tTextData   = \"" + get_TextData()
                + "\"\n\tNumberData = " + get_NumberData();
        } //ToString

        // Private field referencing the next node in the list
        private Node next;

        // Private fields containing node data
        private String textData;
        private int numberData;
    } //Node
} //LinkedList