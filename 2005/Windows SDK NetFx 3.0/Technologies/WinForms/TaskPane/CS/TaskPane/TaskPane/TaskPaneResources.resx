<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="blah blah blah">
    <value xml:space="preserve">blah blah blah</value>
  </data>
  <data name="BlendFill.FinishColor">
    <value xml:space="preserve">The 'finishing' color for the linear blend operation.</value>
  </data>
  <data name="BlendFill.GetLinearGradientBrush">
    <value xml:space="preserve">Returns a LinearGradientBrush object for the currently specified values for this object, letting the caller optionally reverse the values for RightToLeft painting.</value>
  </data>
  <data name="BlendFill.StartColor">
    <value xml:space="preserve">The 'starting' color for the linear blend operation.</value>
  </data>
  <data name="BlendFill.Style">
    <value xml:space="preserve">The style of blended painting this object represents.</value>
  </data>
  <data name="BlendStyle">
    <value xml:space="preserve">Specifies the values for controlling how a background is drawn in various blended controls, such as the BlendPanel.</value>
  </data>
  <data name="BlendStyle.BackwardDiagonal">
    <value xml:space="preserve">The blend starts with the BlendStartColor at the top-right and blends to the BlendFinishColor at the bottom-left.</value>
  </data>
  <data name="BlendStyle.ForwardDiagonal">
    <value xml:space="preserve">The blend starts with the BlendStartColor at the top-left, and blends to the BlendFinishColor at the bottom-right.</value>
  </data>
  <data name="BlendStyle.Horizontal">
    <value xml:space="preserve">The blend starts with the BlendStartColor at the left and blends to the BlendFinishColor at the right.</value>
  </data>
  <data name="BlendStyle.Vertical">
    <value xml:space="preserve">The blend starts with the BlendStartColor at the top of the panel and blends to the BlendFinishColor at the bottom.</value>
  </data>
  <data name="BlendStyle1">
    <value xml:space="preserve">Specifies the values for controlling how a background is drawn in various blended controls, such as the BlendPanel.</value>
  </data>
  <data name="excTaskPaneBogusIdx">
    <value xml:space="preserve">The specified index into the collection is out of bounds.</value>
  </data>
  <data name="excTaskPaneCornerStyleRange">
    <value xml:space="preserve">The specified value is not valid for the CornerStyle property.</value>
  </data>
  <data name="excTaskPaneInsertNotImpl">
    <value xml:space="preserve">This method is not supported.  Please use Add() or AddRange().</value>
  </data>
  <data name="excTaskPaneNullFrame">
    <value xml:space="preserve">A valid TaskFrame must be specified to this method.</value>
  </data>
  <data name="excTaskPaneTaskFramesOnly">
    <value xml:space="preserve">The given '{0}' cannot be added to the TaskPane.  Only TaskFrames may be added to a TaskPane. </value>
    <comment xml:space="preserve">{0} is type name</comment>
  </data>
  <data name="Generic.BlendFill">
    <value xml:space="preserve">Controls how the background of the given control is painted.</value>
  </data>
  <data name="moocow">
    <value xml:space="preserve">moo moo moo</value>
  </data>
  <data name="TaskFrame">
    <value xml:space="preserve">These are the individual frames that show up in the TaskPane control.  They are container controls to which other controls may be added.</value>
  </data>
  <data name="TaskFrame.CaptionBlend">
    <value xml:space="preserve">Controls how the background of the caption at the top of this TaskFrame is painted.</value>
  </data>
  <data name="TaskFrame.CollapseButtonVisible">
    <value xml:space="preserve">Indicates whether or not we should show a button on our caption bar which will allow users to collapse or expand this frame.</value>
  </data>
  <data name="TaskFrame.Enabled">
    <value xml:space="preserve">Controls whether or not the user can interact with this TaskFrame with the mouse and keyboard at runtime.</value>
  </data>
  <data name="TaskFrame.Font">
    <value xml:space="preserve">The font with which the text in the caption for this TaskFrame is drawn.</value>
  </data>
  <data name="TaskFrame.ForeColor">
    <value xml:space="preserve">The color used to display text and graphics in the control.</value>
  </data>
  <data name="TaskFrame.Image">
    <value xml:space="preserve">The image we will display in the caption area.  The image is masked against the ImageTransparentColor on our TaskPane control.  The image may be a maximum of 32x32 pixels.</value>
  </data>
  <data name="TaskFrame.ImageTransparentColor">
    <value xml:space="preserve">This is the color that the individual TaskFrames will use to mask the background of their Image properties for transparency.</value>
  </data>
  <data name="TaskFrame.IsExpanded">
    <value xml:space="preserve">Controls and/or indicates whether or not we are expanded at this point in time.</value>
  </data>
  <data name="TaskFrame.Size">
    <value xml:space="preserve">The size of the control in pixels.</value>
  </data>
  <data name="TaskFrame.Text">
    <value xml:space="preserve">The text displayed in the caption across the top of this TaskFrame.</value>
  </data>
  <data name="TaskFrame.Visible">
    <value xml:space="preserve">Controls whether or not this TaskFrame is visible at runtime.</value>
  </data>
  <data name="TaskFrameCornerStyle">
    <value xml:space="preserve">Controls how the top corners of TaskFrame frames are drawn within the TaskFrame class.</value>
  </data>
  <data name="TaskFrameCornerStyle.Rounded">
    <value xml:space="preserve">Corners are always drawn slightly rounded.</value>
  </data>
  <data name="TaskFrameCornerStyle.Squared">
    <value xml:space="preserve">Corners are always drawn squared off.</value>
  </data>
  <data name="TaskFrameCornerStyle.SystemDefault">
    <value xml:space="preserve">The corners are drawn according to the current system defaults and style.</value>
  </data>
  <data name="TaskPane.CollapseAll">
    <value xml:space="preserve">Collapses all of our child TaskFrames.</value>
  </data>
  <data name="TaskPane.CornerStyle">
    <value xml:space="preserve">Controls how the top corners of the caption bars at the top of individual child TaskFrames are drawn.</value>
  </data>
  <data name="TaskPane.ExpandAll">
    <value xml:space="preserve">Expands all of our child TaskFrames.</value>
  </data>
  <data name="TaskPane.FrameCollapsed">
    <value xml:space="preserve">The given TaskFrame has been collapsed, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="TaskPane.FrameCollapsing">
    <value xml:space="preserve">The given TaskFrame is about to be collapsed, either by the user clicking on the collapse button or programmatically via the IsExpanded property.  This can be cancelled.</value>
  </data>
  <data name="TaskPane.FrameExpanded">
    <value xml:space="preserve">The given TaskFrame has been expanded, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="TaskPane.FrameExpanding">
    <value xml:space="preserve">The given TaskFrame is about to be expanded, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="TaskPane.Padding">
    <value xml:space="preserve">Controls how much space will be left between TaskFrames and between frames and the edge of the TaskPane.</value>
  </data>
  <data name="TaskPane.TaskFrames">
    <value xml:space="preserve">The list of child TaskFrame objects onto which controls can be placed.</value>
  </data>
  <data name="TaskPaneCEA.Cancel">
    <value xml:space="preserve">Indicates whether the TaskFrame expand/collapse be aborted.</value>
  </data>
  <data name="TaskPaneEA.TaskFrame">
    <value xml:space="preserve">The TaskFrame that generated this event within the TaskPane control.</value>
  </data>
  <data name="TaskPaneMiscAddNew">
    <value xml:space="preserve">Add New TaskFrame</value>
  </data>
  <data name="TaskPaneMiscRemove">
    <value xml:space="preserve">Remove TaskFrame</value>
  </data>
  <data name="TaskPaneMiscTransA">
    <value xml:space="preserve">TaskFrame.Add</value>
  </data>
  <data name="TaskPaneMiscTransR">
    <value xml:space="preserve">TaskFrame.Remove</value>
  </data>
</root>