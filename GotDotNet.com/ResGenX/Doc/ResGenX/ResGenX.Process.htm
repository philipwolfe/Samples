<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>ResGenX.ResGenX.Process</title>
		<meta name="GENERATOR" content="Microsoft Visual Studio .NET 7.1">
		<meta name="ProgId" content="VisualStudio.HTML">
		<meta name="Originator" content="Microsoft Visual Studio .NET 7.1">
		<link REL="STYLESHEET" HREF="../WebDoc.css" TYPE="text/css">
	</head>
	<body>
		<h1 align="center">ResGenX.ResGenX.Process</h1>
		<table border="0" cellpadding="2px" cellspacing="0" class="Table">
			<tr>
				<td>CodeType</td>
				<td width="90%">Function</td>
			</tr>
			<tr>
				<td>Access</td>
				<td>Project</td>
			</tr>
		<tr><td>&nbsp</td></tr>
		<tr><td valign="top">Summary</td><td>Evaluate the command line and execute the request</td></tr>
		<tr><td valign="top">Syntax</td><td><pre>System.Int32 Process(System.String[] <span class="Paramref">args</span><br>                     )</pre></td></tr>
		<tr><td>&nbsp</td><td><dl><dt><span class="Paramref">args</span></dt><dd>The command line arguments</dd></dl></td></tr>
		<tr><td valign="top">Returns</td><td>
        Returns the exit code. A value of zero indicates success. Any other value indicates an
        error occured.
      </td></tr>
		<tr><td>&nbsp</td></tr>
		<tr><td colspan="2">
        The command line format is:
        <pre> resgenx [/xref {cs|vb}] inputfile.ext [outputfile.ext]
 resgenx [/compile] [/xref {cs|vb}] inputfile.ext[,outputfile.ext] ...  </pre><dl><dt>/compile</dt><dd>
              Allows you to specify multiple .resx, .txt or .mc files to convert to .resources files in
              a single bulk operation. If you do not specify this option, you can specify only one input
              file argument.
            </dd><dt>/xref {cs|vb}</dt><dd>
              This specifies the type of cross reference to create when processing a .mc file or a .txt
              file that uses the symbolic name syntax.<b> cs</b> is for CSharp and<b> vb</b> for Visual
              Basic. If this prameter is ommitted then both types are generated if symbolic names are
              used.
            </dd><dt>inputfile.ext</dt><dd>
              The name of the input file to convert. The extension must be one of the following:
              <dl><dt>.txt</dt><dd>
                    Specifies the extension for a text file to convert to a .resources or a .resx file. Text
                    files can only contain string resources.
                  </dd><dt>.resx</dt><dd>
                    Specifies the extension for an XML-based resource file to convert 	to a .resources or a
                    .txt file.
                  </dd><dt>.resources</dt><dd>Specifies the extension for a resource file to convert to 	a .resx or a .txt file.</dd><dt>.mc</dt><dd>
                    Specifies the the extension of a message compiler file to 	convert to a .resources or a
                    .resx file.
                  </dd></dl></dd><p><dt>outputFilename.ext</dt><dd>
                The name of the resource file to create. The ouput file extension<b> MAY NOT</b> be .mc. A
                .mc file cannot be recreated. It should also be noted that any symbolic names in a .txt
                file can not be recreated from the resource file. 	This argument is optional when
                converting from a .txt, .resx or .mc file. The default output name is
                inputfile.resources. The outputfile argument is mandatory when 	converting from a
                .resources file. Specify the .resx extension when converting a .resources file to 	an
                XML-based resource file. Specify the .txt extension when converting a .resources file to a
                text 	file. Only string resources will be written to a .txt file.
              </dd></p></dl></td></tr>
		</table>
	</body>
</html>
