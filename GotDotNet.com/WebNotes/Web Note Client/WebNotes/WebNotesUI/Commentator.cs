//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using WebNotes;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CommentatorSoap", Namespace="http://tempuri.org/")]
public partial class Commentator : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AddNoteOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewNotesOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateNotesOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteNotesOperationCompleted;
    
    private System.Threading.SendOrPostCallback CloseOperationCompleted;
    
    /// <remarks/>
    public Commentator() {
        this.Url = "http://localhost:1633/Commentor/Commentator.asmx";
    }
    
    /// <remarks/>
    public event AddNoteCompletedEventHandler AddNoteCompleted;
    
    /// <remarks/>
    public event ViewNotesCompletedEventHandler ViewNotesCompleted;
    
    /// <remarks/>
    public event UpdateNotesCompletedEventHandler UpdateNotesCompleted;
    
    /// <remarks/>
    public event DeleteNotesCompletedEventHandler DeleteNotesCompleted;
    
    /// <remarks/>
    public event CloseCompletedEventHandler CloseCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNote", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddNote(WebNote webnote) {
        this.Invoke("AddNote", new object[] {
                    webnote});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddNote(WebNote webnote, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddNote", new object[] {
                    webnote}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddNote(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddNoteAsync(WebNote webnote) {
        this.AddNoteAsync(webnote, null);
    }
    
    /// <remarks/>
    public void AddNoteAsync(WebNote webnote, object userState) {
        if ((this.AddNoteOperationCompleted == null)) {
            this.AddNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNoteOperationCompleted);
        }
        this.InvokeAsync("AddNote", new object[] {
                    webnote}, this.AddNoteOperationCompleted, userState);
    }
    
    private void OnAddNoteOperationCompleted(object arg) {
        if ((this.AddNoteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ViewNotes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebNoteCollection ViewNotes(WebNote webnote) {
        object[] results = this.Invoke("ViewNotes", new object[] {
                    webnote});
        return ((WebNoteCollection)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewNotes(WebNote webnote, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewNotes", new object[] {
                    webnote}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebNoteCollection EndViewNotes(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebNoteCollection)(results[0]));
    }
    
    /// <remarks/>
    public void ViewNotesAsync(WebNote webnote) {
        this.ViewNotesAsync(webnote, null);
    }
    
    /// <remarks/>
    public void ViewNotesAsync(WebNote webnote, object userState) {
        if ((this.ViewNotesOperationCompleted == null)) {
            this.ViewNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewNotesOperationCompleted);
        }
        this.InvokeAsync("ViewNotes", new object[] {
                    webnote}, this.ViewNotesOperationCompleted, userState);
    }
    
    private void OnViewNotesOperationCompleted(object arg) {
        if ((this.ViewNotesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewNotesCompleted(this, new ViewNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateNotes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateNotes(WebNote oldwebnote, WebNote newwebnote) {
        this.Invoke("UpdateNotes", new object[] {
                    oldwebnote,
                    newwebnote});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateNotes(WebNote oldwebnote, WebNote newwebnote, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateNotes", new object[] {
                    oldwebnote,
                    newwebnote}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateNotes(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateNotesAsync(WebNote oldwebnote, WebNote newwebnote) {
        this.UpdateNotesAsync(oldwebnote, newwebnote, null);
    }
    
    /// <remarks/>
    public void UpdateNotesAsync(WebNote oldwebnote, WebNote newwebnote, object userState) {
        if ((this.UpdateNotesOperationCompleted == null)) {
            this.UpdateNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNotesOperationCompleted);
        }
        this.InvokeAsync("UpdateNotes", new object[] {
                    oldwebnote,
                    newwebnote}, this.UpdateNotesOperationCompleted, userState);
    }
    
    private void OnUpdateNotesOperationCompleted(object arg) {
        if ((this.UpdateNotesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateNotesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteNotes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DeleteNotes(WebNote webnote) {
        this.Invoke("DeleteNotes", new object[] {
                    webnote});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteNotes(WebNote webnote, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteNotes", new object[] {
                    webnote}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteNotes(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DeleteNotesAsync(WebNote webnote) {
        this.DeleteNotesAsync(webnote, null);
    }
    
    /// <remarks/>
    public void DeleteNotesAsync(WebNote webnote, object userState) {
        if ((this.DeleteNotesOperationCompleted == null)) {
            this.DeleteNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNotesOperationCompleted);
        }
        this.InvokeAsync("DeleteNotes", new object[] {
                    webnote}, this.DeleteNotesOperationCompleted, userState);
    }
    
    private void OnDeleteNotesOperationCompleted(object arg) {
        if ((this.DeleteNotesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteNotesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Close", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Close() {
        this.Invoke("Close", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginClose(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Close", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndClose(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CloseAsync() {
        this.CloseAsync(null);
    }
    
    /// <remarks/>
    public void CloseAsync(object userState) {
        if ((this.CloseOperationCompleted == null)) {
            this.CloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseOperationCompleted);
        }
        this.InvokeAsync("Close", new object[0], this.CloseOperationCompleted, userState);
    }
    
    private void OnCloseOperationCompleted(object arg) {
        if ((this.CloseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void AddNoteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void ViewNotesCompletedEventHandler(object sender, ViewNotesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ViewNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ViewNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebNoteCollection Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebNoteCollection)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void UpdateNotesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void DeleteNotesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void CloseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
