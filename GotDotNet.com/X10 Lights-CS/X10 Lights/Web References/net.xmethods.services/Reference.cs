//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.44.
// 
namespace X10_Lights.net.xmethods.services {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="net.xmethods.services.stockquote.StockQuoteBinding", Namespace="http://www.themindelectric.com/wsdl/net.xmethods.services.stockquote.StockQuote/")]
    public partial class netxmethodsservicesstockquoteStockQuoteService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getQuoteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public netxmethodsservicesstockquoteStockQuoteService() {
            this.Url = X10_Lights.Properties.Settings.Default.X10_Lights_net_xmethods_services_net_xmethods_services_stockquote_StockQuoteService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getQuoteCompletedEventHandler getQuoteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:xmethods-delayed-quotes#getQuote", RequestNamespace="urn:xmethods-delayed-quotes", ResponseNamespace="urn:xmethods-delayed-quotes")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public float getQuote(string symbol) {
            object[] results = this.Invoke("getQuote", new object[] {
                        symbol});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void getQuoteAsync(string symbol) {
            this.getQuoteAsync(symbol, null);
        }
        
        /// <remarks/>
        public void getQuoteAsync(string symbol, object userState) {
            if ((this.getQuoteOperationCompleted == null)) {
                this.getQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQuoteOperationCompleted);
            }
            this.InvokeAsync("getQuote", new object[] {
                        symbol}, this.getQuoteOperationCompleted, userState);
        }
        
        private void OngetQuoteOperationCompleted(object arg) {
            if ((this.getQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQuoteCompleted(this, new getQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    public delegate void getQuoteCompletedEventHandler(object sender, getQuoteCompletedEventArgs e);
    
    /// <remarks/>
    public partial class getQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
}
