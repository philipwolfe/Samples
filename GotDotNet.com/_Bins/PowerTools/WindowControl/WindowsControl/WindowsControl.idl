// WindowsControl.idl : IDL source for WindowsControl.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (WindowsControl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(1C100F3C-9B41-4ED3-9A01-406932582298),
		dual,
		helpstring("IWindow Interface"),
		pointer_default(unique)
	]
	interface IWindow : IDispatch
	{
		[propput, id(1), helpstring("The window handle for this window. Setting this value will point the control to a new window.")] HRESULT WindowHandle([in] long pVal);
		[propget, id(1), helpstring("The window handle for this window.")] HRESULT WindowHandle([out, retval] long *pVal);
		[id(3), helpstring("Posts a message to the window.")] HRESULT PostMessage(DWORD Message, WPARAM WParam, LPARAM LParam);
		[propget, id(4), helpstring("The text/title of the window.")] HRESULT Text([out, retval] BSTR *pVal);
		[propput, id(4), helpstring("The text/title of the window.")] HRESULT Text([in] BSTR newVal);
		[id(5), helpstring("Finds a subwindow with the specified title / caption.")] HRESULT GetSubwindowWithTitle([in] BSTR WindowTitle, [out, retval] IDispatch** SubWindow);
		[propget, id(6), helpstring("The number of subwindows")] HRESULT SubwindowCount([out, retval] long *pVal);
		[propget, id(7), helpstring("Accessor to subwindow array")] HRESULT Subwindow([in] long Index, [out, retval] IDispatch* *pVal);
		[id(8), helpstring("Simulates clicking the left mouse button on the window")] HRESULT ButtonClick([in] WORD X, [in] WORD Y, WORD KeyCode);
		[propget, id(10), helpstring("The parent window")] HRESULT ParentWindow([out, retval] IDispatch* *pVal);
		[propget, id(11), helpstring("True if window will receive notification messages")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(11), helpstring("True if window will receive notification messages")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(12), helpstring("True if window is visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(12), helpstring("True if window is visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[id(13), helpstring("Sends a string of characters to the window")] HRESULT SendChar([in] BSTR Character, [in] LONG TransitionState);
		[id(14), helpstring("Gets a subwindow with a specific control ID")] HRESULT GetSubwindowWithID([in] DWORD SubWindowID, [out, retval] IDispatch** SubWindow);
		[propget, id(15), helpstring("The ID for the window")] HRESULT ID([out, retval] long *pVal);
		[propget, id(16), helpstring("Height of window")] HRESULT Height([out, retval] long *pVal);
		[propput, id(16), helpstring("Height of window")] HRESULT Height([in] long newVal);
		[propget, id(17), helpstring("Width of window")] HRESULT Width([out, retval] long *pVal);
		[propput, id(17), helpstring("Width of window")] HRESULT Width([in] long newVal);
		[propget, id(18), helpstring("X (left side) coordinate of window")] HRESULT X([out, retval] long *pVal);
		[propput, id(18), helpstring("X (left side) coordinate of window")] HRESULT X([in] long newVal);
		[propget, id(19), helpstring("Y (top side) coordinate of window")] HRESULT Y([out, retval] long *pVal);
		[propput, id(19), helpstring("Y (top side) coordinate of window")] HRESULT Y([in] long newVal);
		[id(20), helpstring("Moves window to new location and resizes window")] HRESULT MoveWindow([in] WORD X, [in] WORD Y, [in] WORD Width, [in] WORD Height);
		[id(21), helpstring("Make window receive keypresses, and moves it to front")] HRESULT Activate();
		[id(22), helpstring("Closes the window")] HRESULT Close();
		[propget, id(23), helpstring("True if window receives keypresses")] HRESULT Active([out, retval] VARIANT_BOOL *pVal);
		[propput, id(23), helpstring("True if window receives keypresses")] HRESULT Active([in] VARIANT_BOOL newVal);
	};

[
	uuid(91B56E8C-DD8B-43A7-96FF-215F5B8A4127),
	version(1.0),
	helpstring("WindowsControl 1.0 Type Library")
]
library WINDOWSCONTROLLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(FA929814-5BA7-4021-94D1-DE835256B44C),
		helpstring("Window Class")
	]
	coclass Window
	{
		[default] interface IWindow;
	};
};
