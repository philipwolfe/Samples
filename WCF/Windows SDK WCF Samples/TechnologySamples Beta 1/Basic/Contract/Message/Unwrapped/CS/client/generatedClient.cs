//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Microsoft.ServiceModel.Samples
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="Microsoft.ServiceModel.Samples.ICalculator")]
    public interface ICalculator
    {
        
        // CODEGEN: Generating message contract since the operation Add is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Add", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddResponse")]
        Microsoft.ServiceModel.Samples.ResponseMessage Add(Microsoft.ServiceModel.Samples.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation Subtract is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Subtract", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractResponse")]
        Microsoft.ServiceModel.Samples.ResponseMessage Subtract(Microsoft.ServiceModel.Samples.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation Multiply is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyResponse")]
        Microsoft.ServiceModel.Samples.ResponseMessage Multiply(Microsoft.ServiceModel.Samples.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation Divide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Divide", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DivideResponse")]
        Microsoft.ServiceModel.Samples.ResponseMessage Divide(Microsoft.ServiceModel.Samples.RequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RequestMessage
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Microsoft.ServiceModel.Samples", Order=0)]
        public double n1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Microsoft.ServiceModel.Samples", Order=1)]
        public double n2;
        
        public RequestMessage()
        {
        }
        
        public RequestMessage(double n1, double n2)
        {
            this.n1 = n1;
            this.n2 = n2;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ResponseMessage
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Microsoft.ServiceModel.Samples", Order=0)]
        public double result;
        
        public ResponseMessage()
        {
        }
        
        public ResponseMessage(double result)
        {
            this.result = result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICalculatorChannel : Microsoft.ServiceModel.Samples.ICalculator, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Microsoft.ServiceModel.Samples.ICalculator>, Microsoft.ServiceModel.Samples.ICalculator
    {
        
        public CalculatorClient()
        {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        Microsoft.ServiceModel.Samples.ResponseMessage Microsoft.ServiceModel.Samples.ICalculator.Add(Microsoft.ServiceModel.Samples.RequestMessage request)
        {
            return base.Channel.Add(request);
        }
        
        public double Add(double n1, double n2)
        {
            Microsoft.ServiceModel.Samples.RequestMessage inValue = new Microsoft.ServiceModel.Samples.RequestMessage();
            inValue.n1 = n1;
            inValue.n2 = n2;
            Microsoft.ServiceModel.Samples.ResponseMessage retVal = ((Microsoft.ServiceModel.Samples.ICalculator)(this)).Add(inValue);
            return retVal.result;
        }
        
        Microsoft.ServiceModel.Samples.ResponseMessage Microsoft.ServiceModel.Samples.ICalculator.Subtract(Microsoft.ServiceModel.Samples.RequestMessage request)
        {
            return base.Channel.Subtract(request);
        }
        
        public double Subtract(double n1, double n2)
        {
            Microsoft.ServiceModel.Samples.RequestMessage inValue = new Microsoft.ServiceModel.Samples.RequestMessage();
            inValue.n1 = n1;
            inValue.n2 = n2;
            Microsoft.ServiceModel.Samples.ResponseMessage retVal = ((Microsoft.ServiceModel.Samples.ICalculator)(this)).Subtract(inValue);
            return retVal.result;
        }
        
        Microsoft.ServiceModel.Samples.ResponseMessage Microsoft.ServiceModel.Samples.ICalculator.Multiply(Microsoft.ServiceModel.Samples.RequestMessage request)
        {
            return base.Channel.Multiply(request);
        }
        
        public double Multiply(double n1, double n2)
        {
            Microsoft.ServiceModel.Samples.RequestMessage inValue = new Microsoft.ServiceModel.Samples.RequestMessage();
            inValue.n1 = n1;
            inValue.n2 = n2;
            Microsoft.ServiceModel.Samples.ResponseMessage retVal = ((Microsoft.ServiceModel.Samples.ICalculator)(this)).Multiply(inValue);
            return retVal.result;
        }
        
        Microsoft.ServiceModel.Samples.ResponseMessage Microsoft.ServiceModel.Samples.ICalculator.Divide(Microsoft.ServiceModel.Samples.RequestMessage request)
        {
            return base.Channel.Divide(request);
        }
        
        public double Divide(double n1, double n2)
        {
            Microsoft.ServiceModel.Samples.RequestMessage inValue = new Microsoft.ServiceModel.Samples.RequestMessage();
            inValue.n1 = n1;
            inValue.n2 = n2;
            Microsoft.ServiceModel.Samples.ResponseMessage retVal = ((Microsoft.ServiceModel.Samples.ICalculator)(this)).Divide(inValue);
            return retVal.result;
        }
    }
}
