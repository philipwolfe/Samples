<html DIR="LTR"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" /><META NAME="save" CONTENT="history" /><title>Test Script Generator Sample</title><META NAME="Description" CONTENT="This sample demonstrates how to use Microsoft UI Automation control patterns[Glossary Lookup Failure: control_pattern#8d4c4551-c700-4f01-bba8-3d00a12eb026] and events to generate test scripts for automated testing scenarios. The test script generator tracks user interaction with the user interface (UI) of a target application and stores the elements and events of interest."></META><META NAME="MS.LOCALE" CONTENT="en-us" /><style>
body
{font-family:Verdana;font-size:medium;}
div#mainSection, div#header
{font-size:70%;width: 100%;}
div#mainBody
{font-size:90%;}
div#mainSection div table
{font-size: 100%;text-align: left;}
span#nsrTitle
{color:#003399;font-size:90%;font-weight:600;}
div#header
{background-color:#D4DFFF;}
.heading
{font-size:120%;color:#003399;}
.subHeading
{font-size:100%;margin-bottom:4;}
li
{margin-top:-2;margin-bottom:3;}
p
{margin-top:10;margin-bottom:5;}
div.tableSection p
{margin-top:1;margin-bottom:4;}	
div#mainSection table th
{background-color:#EFEFF7;color:#000066;text-align:left;}
div#mainSection table td
{background-color:#F7F7FF;}
div#mainSection table
{margin-top:5px;margin-bottom: px;}
			</style></head><body><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Test Script Generator Sample</span></td></tr></table></div><div id="mainSection"><div id="mainBody"><br /><font color="DarkGray">[This readme is a partial copy of the sample's topic in the SDK documentation.]</font><br /><p>This sample demonstrates how to use Microsoft UI Automation control patterns[<B style="color:red"><I>Glossary Lookup Failure: control_pattern#8d4c4551-c700-4f01-bba8-3d00a12eb026</I></B>] and events to generate test scripts for automated testing scenarios. The test script generator tracks user interaction with the user interface (UI) of a target application and stores the elements and events of interest. </p><p>Information about an element and any associated events is saved to a general record class (UIAEventRecord.cs). Both the general information and the script can be dumped as plain text for subsequent analysis or modification by a tester, and, in the case of the generated script, used for later playback.</p><p>An event-based application such as this has the inherent limitation of not being able to distinguish between changes in the user interface (UI) that are the result of direct or indirect user input. For example, the target application for this sample contains three interdependent controls where user interaction with one control causes changes to each of the other controls.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Caution: </th></tr><tr><td><p>UI Automation and the automated test scenario addressed in this sample require a contract between the application, or control developer, and a tester. In other words, the ability to consistently execute a generated script is dependent on a static, predictable target UI to operate on. In this regard, UI Automation should not be considered a solution for scenarios where the recording and subsequent playback of interaction with random applications and controls is required.</p><p>Common issues that make "blind" recording and playback impractical arise when elements do not have unique identifier, such as an AutomationId property, or the UI is dynamic and unpredictable, such as the Windows Task Manager dialog where items listed on the "Processes" or "Applications" tabs are dependent on system state. Locating specific elements during playback is virtually impossible in these instances.</p></td></tr></table></div><p>This sample demonstrates a specific feature of the Windows Presentation Foundation (WPF) and, consequently, does not follow application development best practices. For comprehensive coverage of Windows Presentation Foundation (WPF) and Microsoft .NET Framework application development best practices, refer to the following as appropriate:</p><p>Accessibility - Accessibility Best Practices</p><p>Security - WPF Security</p><p>Localization - WPF Globalization and Localization Overview</p><h1 class="heading">Building the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><ul><li><p>This sample is made up of the following three projects.</p><ul><li><p>ScriptGeneratorClient provides the script generating functionality for the sample; the target application is started from the client UI.</p></li><li><p>ScriptGeneratorTarget provides the target UI for the client applications.</p></li><li><p>ExecuteScript provides the script execution functionality for the sample; the target application is started from the client UI. This project is run manually after a script has been generated and copied to the script.cs file.</p></li></ul></li><li><p>
            Install the Windows Software Development Kit (SDK) and open its build environment command window. On the Start menu, point to All Programs, Microsoft Windows SDK, and then click CMD Shell.
          </p></li><li><p>
            Download the sample, usually from the software development kit (SDK) documentation, to your hard disk drive.
          </p></li><li><p>
            To build the sample from the build environment command window, go to the source directory of the sample. At the command prompt, type MSBUILD.
          </p></li><li><p>
            To build the sample in Microsoft Visual Studio 2005, load the sample solution or project file and then press CTRL+SHIFT+B.
          </p></li></ul></div><h1 class="heading">Generating a Script</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><ul><li><p>
            To run the compiled sample from the build environment command window, execute the .exe file in the Bin\Debug or Bin\Release folder contained under the sample source code folder.
          </p></li><li><p>
            To run the compiled sample with debugging in Visual Studio 2005, press F5.
          </p></li></ul><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note: </th></tr><tr><td><p>This will start the ScriptGenerator client application. The target application is started from the client.</p></td></tr></table></div></div><h1 class="heading">Executing a Script</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><ul><li><p>Close the client and target applications.</p></li><li><p>Open the Script.cs file in the ExecuteScript project.</p></li><li><p>Select the existing code and paste over it with the generated script.</p></li><li><p>Build and run the ExecuteScript project.</p></li></ul><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note: </th></tr><tr><td><p>This will start the ExecuteScript client application. The target application is started from the client.</p></td></tr></table></div></div><UscDataIsland></UscDataIsland></div></div></body></html>