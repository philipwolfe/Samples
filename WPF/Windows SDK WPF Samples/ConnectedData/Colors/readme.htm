<html DIR="LTR"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" /><META NAME="save" CONTENT="history" /><title>Showing System Colors Using Data Services Sample</title><META NAME="Description" CONTENT="The sample displays a list of the system colors and lets you sort the list in several ways. You can also add new colors to the list and modify properties of the new colors."></META><META NAME="MS.LOCALE" CONTENT="en-us" /><style>
body
{font-family:Verdana;font-size:medium;}
div#mainSection, div#header
{font-size:70%;width: 100%;}
div#mainBody
{font-size:90%;}
div#mainSection div table
{font-size: 100%;text-align: left;}
span#nsrTitle
{color:#003399;font-size:90%;font-weight:600;}
div#header
{background-color:#D4DFFF;}
.heading
{font-size:120%;color:#003399;}
.subHeading
{font-size:100%;margin-bottom:4;}
li
{margin-top:-2;margin-bottom:3;}
p
{margin-top:10;margin-bottom:5;}
div.tableSection p
{margin-top:1;margin-bottom:4;}	
div#mainSection table th
{background-color:#EFEFF7;color:#000066;text-align:left;}
div#mainSection table td
{background-color:#F7F7FF;}
div#mainSection table
{margin-top:5px;margin-bottom: px;}
			</style></head><body><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Showing System Colors Using Data Services Sample</span></td></tr></table></div><div id="mainSection"><div id="mainBody"><br /><font color="DarkGray">[This readme is a partial copy of the sample's topic in the SDK documentation.]</font><br /><p>The sample displays a list of the system colors and lets you sort the list in several ways. You can also add new colors to the list and modify properties of the new colors.</p><p>This sample demonstrates a specific feature of the Windows Presentation Foundation and, consequently, does not follow application development best practices. For comprehensive coverage of Windows Presentation Foundation (WPF) and Microsoft .NET Framework application development best practices, refer to the following as appropriate:</p><p>Accessibility - Accessibility Best Practices</p><p>Security - WPF Security</p><p>Localization - WPF Globalization and Localization Overview</p><a name="sample_build_instructions"></a><h1 class="heading">Building the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><ul><li><p>
            Install the Windows Software Development Kit (SDK) and open its build environment command window. On the Start menu, point to All Programs, Microsoft Windows SDK, and then click CMD Shell.
          </p></li><li><p>
            Download the sample, usually from the software development kit (SDK) documentation, to your hard disk drive.
          </p></li><li><p>
            To build the sample from the build environment command window, go to the source directory of the sample. At the command prompt, type MSBUILD.
          </p></li><li><p>
            To build the sample in Microsoft Visual Studio 2005, load the sample solution or project file and then press CTRL+SHIFT+B.
          </p></li></ul></div><a name="sample_run_instructions"></a><h1 class="heading">Running the Sample</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><ul><li><p>
            To run the compiled sample from the build environment command window, execute the .exe file in the Bin\Debug or Bin\Release folder contained under the sample source code folder.
          </p></li><li><p>
            To run the compiled sample with debugging in Visual Studio 2005, press F5.
          </p></li></ul></div><h1 class="heading">Remarks</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample uses the familiar RGB and HSV color codings. It is easy to learn     by experimenting with the buttons and sliders. Note that you cannot change the     properties of the built-in system colors; you can only change the new colors     that you've added with the <b>New Color</b> button.</p><p>     The sample illustrates two of the paradigms that WPF     brings to application design.     </p><ul><li><p>The treatment of Data and user interface (UI) should be       partitioned into separate, relatively self-contained implementations.       </p></li><li><p>Most standard UI should be expressed declaratively.       </p></li></ul><p>Consistent with these design goals the source of the sample is divided into     four parts with a separate file for each:     </p><ul><li><p>Data-centric code (ColorItem.cs). This code deals with colors using routines         that are generalized to facilitate their reuse in other applications that need to deal with         system colors. The code is intentionally independent of this particular         sample's UI.       </p></li><li><p>Application glue (App.xaml). Basic code used to hook the parts of       the application together and to get the application started.       </p></li><li><p>
            UI Description (Colors.xaml). Markup       specifying the UI and Layout.       </p></li><li><p>Application Logic (Colors.xaml.cs). Code in a separate "code-behind"       file that implements those features of the application that cannot be done       purely declaratively. This includes handlers for buttons, data converters, and so on.</p></li></ul></div><h1 class="heading">See Also</h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Other Resources</h4>Data Binding Overview<br /><br /></div><UscDataIsland></UscDataIsland></div></div></body></html>