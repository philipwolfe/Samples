<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      Title="Animate Property Storyboard"
      x:Class="AnimatePropertyStoryboard.Page1"
      Loaded="checkLang">
  
 
<TabControl MinHeight="500" MaxHeight="700" MinWidth="400">
        <TabItem Style="{StaticResource TabStyle}" Header="Animate Property Storyboard Sample" IsSelected="true">
          <StackPanel>
            <TextBlock Style="{StaticResource HeaderStyle}">Animate Property Storyboard Sample</TextBlock>

            <TextBlock Style="{StaticResource mainContentStyle}">This example uses a storyboard to animate the properties of buttons.</TextBlock>
            <TextBlock Style="{StaticResource mainContentStyle}">The preview window renders code from the Markup tab. The C# standalone code is provided for reference purposes.</TextBlock>

          </StackPanel>
        </TabItem>

        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
                <ScrollViewer HorizontalScrollBarVisibility="Visible">

          <TextBlock Name="xamlCheck">
          <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve"><![CDATA[<!-- Animates properties by using storyboard animations. -->
<Border Background="White">
  <StackPanel Margin="30" HorizontalAlignment="Left" MinWidth="500">

    <TextBlock>Storyboard Animation Example</TextBlock>
      
      <!-- The width of this button is animated. -->
      <Button Name="myWidthAnimatedButton"
        Height="30" Width="200" HorizontalAlignment="Left">
        A Button    
        <Button.Triggers>
        
          <!-- Animates the width of the first button 
               from 200 to 300. -->         
          <EventTrigger RoutedEvent="Button.Click">
            <BeginStoryboard>
              <Storyboard>           
                <DoubleAnimation Storyboard.TargetName="myWidthAnimatedButton"
                  Storyboard.TargetProperty="(Button.Width)"
                  From="200" To="300" Duration="0:0:3" />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Button.Triggers>
      </Button>

      <!-- The color of the brush used to paint this button is animated. -->
      <Button Name="myColorAnimatedButton"
        Height="30" Width="200" HorizontalAlignment="Left">Another Button
      <Button.Background>
        <SolidColorBrush  Color="Blue" />
      </Button.Background>
      <Button.Triggers>
        
        <!-- Animates the color of the brush used to paint 
             the second button from red to blue . -->             
        <EventTrigger RoutedEvent="Button.Click">   
       
          <BeginStoryboard>
            <Storyboard>
              <ColorAnimation 
                Storyboard.TargetName="myColorAnimatedButton"
                Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                From="Red" To="Blue" Duration="0:0:7" />
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger>
      </Button.Triggers>
    </Button>
  </StackPanel>
</Border>]]></TextBox>
          </TextBlock>
        </ScrollViewer>
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
          <TabControl TabStripPlacement="Right">
            <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML"></TabItem>
            <TabItem Style="{StaticResource TabStyle2}" Header="C#"></TabItem>
          </TabControl>
        </TabItem>

        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
          <TabControl TabStripPlacement="Right">
            <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML"></TabItem>
            <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET"></TabItem>
          </TabControl>
        </TabItem>
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#">
                <ScrollViewer HorizontalScrollBarVisibility="Visible">

          <TextBlock Name="csharpCheck">
          <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace Microsoft.Samples.Animation.AnimatingWithStoryboards
{


    // Uses a storyboard to animate the properties
    // of two buttons.
    public class StoryboardExample : Page
    {

        public StoryboardExample()
        {
            this.WindowTitle = "Animate Properties using Storyboards";
            StackPanel myStackPanel = new StackPanel();
            myStackPanel.MinWidth = 500;
            myStackPanel.Margin = new Thickness(30);
            myStackPanel.HorizontalAlignment = HorizontalAlignment.Left;
            TextBlock myTextBlock = new TextBlock();
            myTextBlock.Text = "Storyboard Animation Example";
            myStackPanel.Children.Add(myTextBlock);
            
            //
            // Create the objects to animate.
            //
            
            // Create a button.
            Button myWidthAnimatedButton = new Button();
            myWidthAnimatedButton.Height = 30;
            myWidthAnimatedButton.Width = 200;
            myWidthAnimatedButton.HorizontalAlignment = HorizontalAlignment.Left;
            myWidthAnimatedButton.Content = "A Button";

            // Set the ID of the button so that it can be referred
            // to in the storyboard that's created later.
            // The ID doesn't have to match the variable name;
            // it can be any unique identifier.
            myWidthAnimatedButton.Name = "myWidthAnimatedButton";
            
            // Register the name with the page to which the button belongs.
            this.RegisterName(myWidthAnimatedButton.Name, myWidthAnimatedButton);
            
            // Create a DoubleAnimation to animate the width of the button.
            DoubleAnimation myDoubleAnimation = new DoubleAnimation();
            myDoubleAnimation.From = 200;
            myDoubleAnimation.To = 300;
            myDoubleAnimation.Duration = new Duration(TimeSpan.FromMilliseconds(3000));          
            
            Storyboard.SetTargetName(myDoubleAnimation, myWidthAnimatedButton.Name); 
            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Button.WidthProperty));
            
            // Create a storyboard to contain the animation.
            Storyboard myWidthAnimatedButtonStoryboard = new Storyboard();
            myWidthAnimatedButtonStoryboard.Children.Add(myDoubleAnimation);
            
            EventTrigger myWidthAnimatedButtonClickEventTrigger = new EventTrigger();
            myWidthAnimatedButtonClickEventTrigger.RoutedEvent = Button.ClickEvent;
            BeginStoryboard myBeginWidthAnimatedStoryboard = new BeginStoryboard();
            myBeginWidthAnimatedStoryboard.Storyboard = myWidthAnimatedButtonStoryboard;
            myWidthAnimatedButtonClickEventTrigger.Actions.Add(myBeginWidthAnimatedStoryboard);
            myWidthAnimatedButton.Triggers.Add(myWidthAnimatedButtonClickEventTrigger);
            
            myStackPanel.Children.Add(myWidthAnimatedButton);

            // Create a second button.
            Button myColorAnimatedButton = new Button();
            myColorAnimatedButton.Height = 30;
            myColorAnimatedButton.Width = 200;
            myColorAnimatedButton.HorizontalAlignment = HorizontalAlignment.Left;
            myColorAnimatedButton.Content = "Another Button";
            SolidColorBrush myBackgroundBrush = new SolidColorBrush();
            myBackgroundBrush.Color = Colors.Blue;
            myColorAnimatedButton.Background = myBackgroundBrush;

            // Set the button's name.
            myColorAnimatedButton.Name = "myColorAnimatedButton";
            
            // Register the name with the page to which the button belongs.
            this.RegisterName(myColorAnimatedButton.Name, myColorAnimatedButton);
            
            // Create a ColorAnimation to animate the button's background.
            ColorAnimation myColorAnimation = new ColorAnimation();
            myColorAnimation.From = Colors.Red;
            myColorAnimation.To = Colors.Blue;
            myColorAnimation.Duration = new Duration(TimeSpan.FromMilliseconds(7000));    
            
            Storyboard.SetTargetName(myColorAnimation, myColorAnimatedButton.Name);
            
            PropertyPath myPropertyPath = 
                new PropertyPath(
                    "(0).(1)",
                    new DependencyProperty[] {
                        Button.BackgroundProperty,
                        SolidColorBrush.ColorProperty });              
            
            Storyboard.SetTargetProperty(myColorAnimation, myPropertyPath);    

            // Create a storyboard to contain the animation.
            Storyboard myColorAnimatedButtonStoryboard = new Storyboard();
            myColorAnimatedButtonStoryboard.Children.Add(myColorAnimation);
            
            EventTrigger myColorAnimatedButtonClickEventTrigger = new EventTrigger();
            myColorAnimatedButtonClickEventTrigger.RoutedEvent = Button.ClickEvent;
            BeginStoryboard myBeginColorAnimatedStoryboard = new BeginStoryboard();
            myBeginColorAnimatedStoryboard.Storyboard = myColorAnimatedButtonStoryboard;

            myColorAnimatedButtonClickEventTrigger.Actions.Add(myBeginColorAnimatedStoryboard);
            myColorAnimatedButton.Triggers.Add(myColorAnimatedButtonClickEventTrigger);            
            
            myStackPanel.Children.Add(myColorAnimatedButton);
            this.Content = myStackPanel;

        }

    }
}    
</TextBox>
          </TextBlock>
        </ScrollViewer>
        </TabItem>
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET"></TabItem>

        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++"></TabItem>
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">

          

<Canvas>
 <!-- Animates properties by using storyboard animations. -->
 <Border Background="White">
    <StackPanel Margin="30" HorizontalAlignment="Left" MinWidth="500">

      <TextBlock>Storyboard Animation Example</TextBlock>
      
      <!-- The width of this button is animated. -->
      <Button Name="myWidthAnimatedButton"
        Height="30" Width="200" HorizontalAlignment="Left">
        A Button

         
        <Button.Triggers>
        
          <!-- Animates the width of the first button 
               from 200 to 300. -->         
          <EventTrigger RoutedEvent="Button.Click">
            <BeginStoryboard>
              <Storyboard>           
                <DoubleAnimation Storyboard.TargetName="myWidthAnimatedButton"
                  Storyboard.TargetProperty="(Button.Width)"
                  From="200" To="300" Duration="0:0:3" />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Button.Triggers>
      </Button>

      <!-- The color of the brush used to paint this button is animated. -->
      <Button Name="myColorAnimatedButton"
        Height="30" Width="200" HorizontalAlignment="Left">Another Button
        <Button.Background>
          <SolidColorBrush  Color="Blue" />
        </Button.Background>
        <Button.Triggers>
        
        <!-- Animates the color of the brush used to paint 
             the second button from red to blue . -->             
          <EventTrigger RoutedEvent="Button.Click">   
       
            <BeginStoryboard>
              <Storyboard>
                <ColorAnimation 
                  Storyboard.TargetName="myColorAnimatedButton"
                  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                  From="Red" To="Blue" Duration="0:0:7" />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Button.Triggers>
      </Button>
    </StackPanel>
  </Border>

</Canvas>
        </TabItem>
      </TabControl>

</Page>