<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      Title="Document Viewer"
      x:Class="myDocumentViewer.Page1"
      Loaded="checkLang">
<TabControl MinHeight="500" MaxHeight="700" MinWidth="400">
        <TabItem Style="{StaticResource TabStyle}" Header="FlowDocumentPageViewer Sample" IsSelected="true">
          <StackPanel>
            <TextBlock Style="{StaticResource HeaderStyle}">FlowDocumentPageViewer Sample</TextBlock>

            <TextBlock Style="{StaticResource mainContentStyle}">This example demonstrates how to implement a Flow Document hosted within a FlowDocumentPageViewer control.</TextBlock>

          </StackPanel>
        </TabItem>

        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
                <ScrollViewer HorizontalScrollBarVisibility="Visible">

          <TextBlock Name="xamlCheck">
          <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;FlowDocumentPageViewer>  
&lt;FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    &lt;Paragraph Style="{StaticResource HeaderStyle}">Canvas Overview&lt;/Paragraph>
    &lt;Paragraph>&lt;Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" />&lt;LineBreak/>&lt;/Paragraph>
    
    &lt;Paragraph Style="{StaticResource DisStyle}">[This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]&lt;LineBreak/>&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource mainContentStyle}">The Canvas element is used to position content according to absolute x- and y-coordinates. Canvas provides ultimate flexibility for positioning and arranging elements on the screen. Elements can be drawn in a unique location, or in the event that elements occupy the same coordinates, the order in which they appear in markup determines the order in which elements are drawn.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.&lt;/Paragraph>

&lt;List>

&lt;ListItem>&lt;Paragraph Style="{StaticResource mainContentStyle}">What Can I Do with the Canvas?&lt;/Paragraph>&lt;/ListItem>
&lt;ListItem>&lt;Paragraph Style="{StaticResource mainContentStyle}">Adding a Border to a Canvas Element&lt;/Paragraph>&lt;/ListItem>
&lt;ListItem>&lt;Paragraph Style="{StaticResource mainContentStyle}">Order of Elements in a Canvas&lt;/Paragraph>&lt;/ListItem>
&lt;ListItem>&lt;Paragraph Style="{StaticResource mainContentStyle}">Creating a Canvas in "XAML"&lt;/Paragraph>&lt;/ListItem>
&lt;ListItem>&lt;Paragraph Style="{StaticResource mainContentStyle}">Creating a Canvas in Code&lt;/Paragraph>&lt;/ListItem>

&lt;/List>
    
    &lt;Paragraph Style="{StaticResource SubHeaderStyle}">What Can I Do with the Canvas?&lt;/Paragraph>
    &lt;Paragraph Style="{StaticResource mainContentStyle}">Canvas provides the most flexible layout support of any Panel element. Height and Width properties are used to define the area of the canvas, and elements inside are assigned absolute coordinates relative to the upper left corner of the parent Canvas. This allows you to position and arrange elements precisely where you want them on the screen.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource SubHeaderStyle}">Adding a Border to a Canvas Element&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource mainContentStyle}">In order for a Canvas element to have a border, it must be encapsulated within a Border element.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to display Hello World within a Canvas with a border and background.&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Border 
       BorderThickness="2"
       BorderBrush="Black"
       Background="LightGray"
       HorizontalAlignment="Left" 
       VerticalAlignment="Top"
       Width="100"
       Height="100">
        &lt;Canvas>
            &lt;TextBlock Canvas.Top="10" Canvas.Left="20">Hello World!&lt;/TextBlock>
        &lt;/Canvas>
    &lt;/Border>
&lt;/Page>
&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource SubHeaderStyle}">Order of Elements in a Canvas&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource mainContentStyle}">The order of child elements (z-index) in a Canvas is determined by their order in "Extensible Application Markup Language" ("XAML") or code. As a consequence, layered order can be achieved when elements share the same coordinates. Canvas and Grid are the only layout controls that supports sharing of space in this manner.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource mainContentStyle}">The following example demonstrates how to achieve layered order of elements within a Canvas. Notice that each Rectangle element is drawn in the order it appears in "XAML".&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Width="500" Height="500">
        &lt;Rectangle Width="100" Height="100" Canvas.Top="100" Canvas.Left="100" Fill="blue"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="150" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="200" Canvas.Left="200" Fill="green"/>

        &lt;!-- Reverse the order to illustrate z-index layering -->

        &lt;Rectangle Width="100" Height="100" Canvas.Top="300" Canvas.Left="200" Fill="green"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="350" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="400" Canvas.Left="100" Fill="blue"/>
    &lt;/Canvas>
&lt;/Page>
&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource SubHeaderStyle}">Creating a Canvas in "XAML"&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource mainContentStyle}">A Canvas can be instantiated simply by using "XAML".&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource mainContentStyle}">The following markup example demonstrates how to use Canvas to absolutely position content. This markup produces three 100-pixel squares. The first square is red, and its top-left (x, y) position is specified as (0, 0). The second square is green, and its top-left position is (100, 100), just below and to the right of the first square. The third square is blue, and its top-left position is (50, 50), thus encompassing the lower-right quadrant of the first square and the upper-left quadrant of the second. Because the third square is laid out last, it appears to be on top of the other two squares—that is, the overlapping portions assume the color of the third box.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Height="600" Width="800">
        &lt;Canvas Height="100" Width="100"  Top="0" Left="0">
            &lt;Rectangle Width="100" Height="100" Fill="red"/>   
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="100" Left="100">
            &lt;Rectangle Width="100" Height="100" Fill="green"/>  
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="50" Left="50">
            &lt;Rectangle Width="100" Height="100" Fill="blue"/>  
        &lt;/Canvas>    
    &lt;/Canvas>
&lt;/Page>
&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource noteParagraph}">&lt;Bold>Note:&lt;/Bold> The Canvas element does not automatically produce scrollbars, even if its assigned width and height are greater than the available screen space. To render scrollbars, wrap the project in its entirety within a ScrollViewer element.&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource SubHeaderStyle}">Creating a Canvas in Code&lt;/Paragraph>
&lt;Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to instantiate and use a Canvas using C#. Two TextBlock elements are absolutely positioned using the SetTop and SetLeft methods of the Canvas. The Canvas is assigned a Background color of LightSteelBlue.&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
[C#]using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Threading;

namespace Canvas_Demo
{
    public class app : System.Windows.Application
    {
        System.Windows.Controls.TextBlock txt1;
        System.Windows.Controls.Canvas canvas;
        System.Windows.Controls.TextBlock txt2;
        System.Windows.Window mainWindow;

        protected override void OnStartingUp (StartingUpCancelEventArgs e)
        {
            base.OnStartingUp(e);
            CreateAndShowMainWindow();
        }

        private void CreateAndShowMainWindow()
        {
            // Create the application's main window
            mainWindow = new System.Windows.Window();

            // Create a canvas sized to fill the window
            canvas = new Canvas();
            canvas.Background = System.Windows.Media.Brushes.LightSteelBlue;

            // Add a "Hello World!" text element to the Canvas
            txt1 = new System.Windows.Controls.TextBlock();
            txt1.FontSize = 14;
            txt1.Text = "Hello World!";
            System.Windows.Controls.Canvas.SetTop(txt1, 100);
            System.Windows.Controls.Canvas.SetLeft(txt1, 10);
            canvas.Children.Add(txt1);

            // Add a second text element to show how absolute positioning works in a Canvas
            txt2 = new System.Windows.Controls.TextBlock();
            txt2.FontSize = 22;
            txt2.Text = "Isn't absolute positioning handy?";
            System.Windows.Controls.Canvas.SetTop(txt2, 200);
            System.Windows.Controls.Canvas.SetLeft(txt2, 75);
            canvas.Children.Add(txt2);
            
            mainWindow.Content= canvas;
            mainWindow.Show();
        }
    }

    internal sealed class EntryClass
    {
        [System.STAThread()]
        private static void Main ()
        {
            app app = new app ();
            app.Run ();
        }
    }
}
&lt;/Paragraph>

&lt;Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. © Microsoft Corporation. All rights reserved.&lt;/Paragraph>
    

&lt;/FlowDocument>
&lt;/FlowDocumentPageViewer>            
            </TextBox>
          </TextBlock>
        </ScrollViewer>
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
          <TabControl TabStripPlacement="Right">
            <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML"></TabItem>
            <TabItem Style="{StaticResource TabStyle2}" Header="C#"></TabItem>
          </TabControl>
        </TabItem>

        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
          <TabControl TabStripPlacement="Right">
            <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML"></TabItem>
            <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET"></TabItem>
          </TabControl>
        </TabItem>
    
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#"></TabItem>
    
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET"></TabItem>

        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++"></TabItem>
    
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">

<FlowDocumentPageViewer>          
<FlowDocument>

    <Paragraph Style="{StaticResource HeaderStyle}">Canvas Overview</Paragraph>
    <Paragraph><Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" /><LineBreak/></Paragraph>
    
    <Paragraph Style="{StaticResource DisStyle}">[This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<LineBreak/></Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The Canvas element is used to position content according to absolute x- and y-coordinates. Canvas provides ultimate flexibility for positioning and arranging elements on the screen. Elements can be drawn in a unique location, or in the event that elements occupy the same coordinates, the order in which they appear in markup determines the order in which elements are drawn.</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.</Paragraph>

<List>

<ListItem><Paragraph Style="{StaticResource mainContentStyle}">What Can I Do with the Canvas?</Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}">Adding a Border to a Canvas Element</Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}">Order of Elements in a Canvas</Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}">Creating a Canvas in "XAML"</Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}">Creating a Canvas in Code</Paragraph></ListItem>

</List>
    
    <Paragraph Style="{StaticResource SubHeaderStyle}">What Can I Do with the Canvas?</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">Canvas provides the most flexible layout support of any Panel element. Height and Width properties are used to define the area of the canvas, and elements inside are assigned absolute coordinates relative to the upper left corner of the parent Canvas. This allows you to position and arrange elements precisely where you want them on the screen.</Paragraph>

<Paragraph Style="{StaticResource SubHeaderStyle}">Adding a Border to a Canvas Element</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">In order for a Canvas element to have a border, it must be encapsulated within a Border element.</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to display Hello World within a Canvas with a border and background.</Paragraph>
<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Border 
       BorderThickness="2"
       BorderBrush="Black"
       Background="LightGray"
       HorizontalAlignment="Left" 
       VerticalAlignment="Top"
       Width="100"
       Height="100">
        &lt;Canvas>
            &lt;TextBlock Canvas.Top="10" Canvas.Left="20">Hello World!&lt;/TextBlock>
        &lt;/Canvas>
    &lt;/Border>
&lt;/Page>
</Paragraph>
<Paragraph Style="{StaticResource SubHeaderStyle}">Order of Elements in a Canvas</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The order of child elements (z-index) in a Canvas is determined by their order in "Extensible Application Markup Language" ("XAML") or code. As a consequence, layered order can be achieved when elements share the same coordinates. Canvas and Grid are the only layout controls that supports sharing of space in this manner.</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">The following example demonstrates how to achieve layered order of elements within a Canvas. Notice that each Rectangle element is drawn in the order it appears in "XAML".</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Width="500" Height="500">
        &lt;Rectangle Width="100" Height="100" Canvas.Top="100" Canvas.Left="100" Fill="blue"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="150" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="200" Canvas.Left="200" Fill="green"/>

        &lt;!-- Reverse the order to illustrate z-index layering -->

        &lt;Rectangle Width="100" Height="100" Canvas.Top="300" Canvas.Left="200" Fill="green"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="350" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="400" Canvas.Left="100" Fill="blue"/>
    &lt;/Canvas>
&lt;/Page>
</Paragraph>
<Paragraph Style="{StaticResource SubHeaderStyle}">Creating a Canvas in "XAML"</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">A Canvas can be instantiated simply by using "XAML".</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">The following markup example demonstrates how to use Canvas to absolutely position content. This markup produces three 100-pixel squares. The first square is red, and its top-left (x, y) position is specified as (0, 0). The second square is green, and its top-left position is (100, 100), just below and to the right of the first square. The third square is blue, and its top-left position is (50, 50), thus encompassing the lower-right quadrant of the first square and the upper-left quadrant of the second. Because the third square is laid out last, it appears to be on top of the other two squares—that is, the overlapping portions assume the color of the third box.</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Height="600" Width="800">
        &lt;Canvas Height="100" Width="100"  Top="0" Left="0">
            &lt;Rectangle Width="100" Height="100" Fill="red"/>   
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="100" Left="100">
            &lt;Rectangle Width="100" Height="100" Fill="green"/>  
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="50" Left="50">
            &lt;Rectangle Width="100" Height="100" Fill="blue"/>  
        &lt;/Canvas>    
    &lt;/Canvas>
&lt;/Page>
</Paragraph>
<Paragraph Style="{StaticResource noteParagraph}"><Bold>Note:</Bold> The Canvas element does not automatically produce scrollbars, even if its assigned width and height are greater than the available screen space. To render scrollbars, wrap the project in its entirety within a ScrollViewer element.</Paragraph>
<Paragraph Style="{StaticResource SubHeaderStyle}">Creating a Canvas in Code</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to instantiate and use a Canvas using C#. Two TextBlock elements are absolutely positioned using the SetTop and SetLeft methods of the Canvas. The Canvas is assigned a Background color of LightSteelBlue.</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
[C#]using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Threading;

namespace Canvas_Demo
{
    public class app : System.Windows.Application
    {
        System.Windows.Controls.TextBlock txt1;
        System.Windows.Controls.Canvas canvas;
        System.Windows.Controls.TextBlock txt2;
        System.Windows.Window mainWindow;

        protected override void OnStartingUp (StartingUpCancelEventArgs e)
        {
            base.OnStartingUp(e);
            CreateAndShowMainWindow();
        }

        private void CreateAndShowMainWindow()
        {
            // Create the application's main window
            mainWindow = new System.Windows.Window();

            // Create a canvas sized to fill the window
            canvas = new Canvas();
            canvas.Background = System.Windows.Media.Brushes.LightSteelBlue;

            // Add a "Hello World!" text element to the Canvas
            txt1 = new System.Windows.Controls.TextBlock();
            txt1.FontSize = 14;
            txt1.Text = "Hello World!";
            System.Windows.Controls.Canvas.SetTop(txt1, 100);
            System.Windows.Controls.Canvas.SetLeft(txt1, 10);
            canvas.Children.Add(txt1);

            // Add a second text element to show how absolute positioning works in a Canvas
            txt2 = new System.Windows.Controls.TextBlock();
            txt2.FontSize = 22;
            txt2.Text = "Isn't absolute positioning handy?";
            System.Windows.Controls.Canvas.SetTop(txt2, 200);
            System.Windows.Controls.Canvas.SetLeft(txt2, 75);
            canvas.Children.Add(txt2);
            
            mainWindow.Content= canvas;
            mainWindow.Show();
        }
    }

    internal sealed class EntryClass
    {
        [System.STAThread()]
        private static void Main ()
        {
            app app = new app ();
            app.Run ();
        }
    }
}
</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. © Microsoft Corporation. All rights reserved.</Paragraph>
    

</FlowDocument>
</FlowDocumentPageViewer>            

        </TabItem>
      </TabControl>

</Page>