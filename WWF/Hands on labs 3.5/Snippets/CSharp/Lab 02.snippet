<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex02_Task04_Execute</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex02_Task04_Execute</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext){                Console.WriteLine(To);    return ActivityExecutionStatus.Closed;}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex02_Task06_SendMail</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex02_Task06_SendMail</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[ MailAddress toAddress = new MailAddress(To); MailAddress fromAddress = new MailAddress(From); MailAddressCollection addresses = new MailAddressCollection(); addresses.Add(toAddress);                         MailMessage msg = new MailMessage(fromAddress, toAddress); msg.Subject = Subject; msg.Body = Body; SmtpClient mail = new SmtpClient("localhost"); mail.Send(msg); return ActivityExecutionStatus.Closed;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex03_Task01_IsValidEmailAddress</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex03_Task01_IsValidEmailAddress</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public Boolean IsValidEmailAddress(String address){	// must only proceed with validation if we have data		// to validate	if (address == null || address.Length == 0)		return true;	Regex rx = new Regex(@"[^A-Za-z0-9@\-_.]", RegexOptions.Compiled);	MatchCollection matches = rx.Matches(address);	if (matches.Count > 0)		return false;	// Must have an '@' character	int i = address.IndexOf('@');	// Must be at least three chars after the @	if (i <= 0 || i >= address.Length - 3)		return false;	// Must only be one '@' character	if (address.IndexOf('@', i + 1) >= 0)		return false;	// Find the last . in the address	int j = address.LastIndexOf('.');	// The dot can't be before or immediately after the @ char	if (j >= 0 && j <= i + 1)		return false;	return true;}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex03_Task01_ParametersValidator</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex03_Task01_ParametersValidator</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[using System;using System.Workflow.Activities;using System.Workflow.ComponentModel;using System.Workflow.ComponentModel.Compiler;using System.Text.RegularExpressions;using System.Net.Mail;namespace SendMailActivityLibrary{	public class ParametersValidator : ActivityValidator	{    }}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex03_Task01_ValidateProperties</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex03_Task01_ValidateProperties</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public override ValidationErrorCollection ValidateProperties(ValidationManager manager, object obj){	ValidationErrorCollection validationErrors = new ValidationErrorCollection(base.ValidateProperties (manager, obj));	SendMailActivity sendMailActivityToBeValidated = obj as SendMailActivity;	if (sendMailActivityToBeValidated == null)	{		throw new InvalidOperationException("Parameter obj is not of type SendMailActivity");	}	if (!IsValidEmailAddress(sendMailActivityToBeValidated.To))	{		ValidationError CustomActivityValidationError =			new ValidationError(String.Format("\'{0}\' is an Invalid destination e-mail address", sendMailActivityToBeValidated.To), 1);		validationErrors.Add(CustomActivityValidationError);	}	if (!IsValidEmailAddress(sendMailActivityToBeValidated.From))	{		ValidationError CustomActivityValidationError =			new ValidationError(String.Format("\'{0}\' is an Invalid source e-mail address", sendMailActivityToBeValidated.From), 1);		validationErrors.Add(CustomActivityValidationError);	}	return validationErrors;}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex04_Task01_Initalize</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex04_Task01_Initalize</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[SendMailActivity parentActivity;protected override void Initialize(Activity activity){	base.Initialize(activity);	parentActivity = (SendMailActivity)activity;}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex04_Task01_OnLayoutSize</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex04_Task01_OnLayoutSize</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e){	return new Size(230, 100);}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex04_Task01_OnPaint</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex04_Task01_OnPaint</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected override void OnPaint(ActivityDesignerPaintEventArgs e) {	Rectangle frameRect = new Rectangle(this.Location.X, this.Location.Y, this.Size.Width - 5, this.Size.Height - 5);	Rectangle shadowRect = new Rectangle(frameRect.X + 5, frameRect.Y + 5, frameRect.Width, frameRect.Height);	Rectangle pageRect = new Rectangle(frameRect.X + 4, frameRect.Y + 24, frameRect.Width - 8, frameRect.Height - 28);	Rectangle titleRect = new Rectangle(frameRect.X + 15, frameRect.Y + 4, frameRect.Width / 2, 20);	Brush frameBrush = new LinearGradientBrush(frameRect, Color.DarkBlue, Color.LightBlue, 45);	e.Graphics.FillPath(Brushes.LightGray, RoundedRect(shadowRect));	e.Graphics.FillPath(frameBrush, RoundedRect(frameRect));	e.Graphics.FillPath(new LinearGradientBrush(pageRect, Color.White, Color.WhiteSmoke, 45), RoundedRect(pageRect));	e.Graphics.DrawString(Activity.QualifiedName, new Font("Segoe UI", 9), Brushes.White, titleRect);	frameRect.Inflate(20, 20);	string textToDisplay = String.Format("To : \'{0}\'\r\nFrom : \'{1}\'\r\nSubject : \'{2}\'\r\n", parentActivity.To, parentActivity.From, parentActivity.Subject);	e.Graphics.DrawString(String.Format(textToDisplay, parentActivity.Subject), new Font("Segoe UI", 8), Brushes.Black, pageRect.X, pageRect.Y + 15);}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex04_Task01_RoundedRect</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex04_Task01_RoundedRect</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[private GraphicsPath RoundedRect(Rectangle frame) {	GraphicsPath path = new GraphicsPath();	int radius = 7;	int diameter = radius * 2;	Rectangle arc = new Rectangle(frame.Left, frame.Top, diameter, diameter);	path.AddArc(arc, 180, 90);	arc.X = frame.Right - diameter;	path.AddArc(arc, 270, 90);	arc.Y = frame.Bottom - diameter;	path.AddArc(arc, 0, 90);	arc.X = frame.Left;	path.AddArc(arc, 90, 90);	path.CloseFigure();	return path;}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>WFLab02_Ex04_Task01_SendMailDesigner</Title>
      <Author>Microsoft</Author>
      <Shortcut>WFLab02_Ex04_Task01_SendMailDesigner</Shortcut>
      <Description>
      </Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[using System;using System.Text;using System.ComponentModel;using System.ComponentModel.Design;using System.Collections;using System.Drawing;using System.Drawing.Drawing2D;using System.Drawing.Design;using System.Workflow.ComponentModel.Compiler;using System.Workflow.ComponentModel.Serialization;using System.Workflow.ComponentModel;using System.Workflow.ComponentModel.Design;using System.Workflow.Runtime;using System.Workflow.Activities;using System.Workflow.Activities.Rules;namespace SendMailActivityLibrary{    public class SendMailDesigner : ActivityDesigner    {    }}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>