'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=2.0.50727.42.
'
Namespace Microsoft.ServiceModel.Samples
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_ICalculator", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class CalculatorService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubtractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MultiplyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DivideOperationCompleted As System.Threading.SendOrPostCallback
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Dim urlSetting As String = System.Configuration.ConfigurationManager.AppSettings("CalculatorServiceAddress")
            If (Not (urlSetting) Is Nothing) Then
                Me.Url = urlSetting
            Else
                Me.Url = "http://localhost/ServiceModelSamples/service.svc"& _ 
                    ""
            End If
        End Sub
        
        '''<remarks/>
        Public Event AddCompleted As AddCompletedEventHandler
        
        '''<remarks/>
        Public Event SubtractCompleted As SubtractCompletedEventHandler
        
        '''<remarks/>
        Public Event MultiplyCompleted As MultiplyCompletedEventHandler
        
        '''<remarks/>
        Public Event DivideCompleted As DivideCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalculator/Add", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double
            Dim results() As Object = Me.Invoke("Add", New Object() {n1, n2})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Function BeginAdd(ByVal n1 As Double, ByVal n2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Add", New Object() {n1, n2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAdd(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal n1 As Double, ByVal n2 As Double)
            Me.AddAsync(n1, n2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal n1 As Double, ByVal n2 As Double, ByVal userState As Object)
            If (Me.AddOperationCompleted Is Nothing) Then
                Me.AddOperationCompleted = AddressOf Me.OnAddOperationCompleted
            End If
            Me.InvokeAsync("Add", New Object() {n1, n2}, Me.AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCompleted(Me, New AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalculator/Subtract", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double
            Dim results() As Object = Me.Invoke("Subtract", New Object() {n1, n2})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Function BeginSubtract(ByVal n1 As Double, ByVal n2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Subtract", New Object() {n1, n2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubtract(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal n1 As Double, ByVal n2 As Double)
            Me.SubtractAsync(n1, n2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal n1 As Double, ByVal n2 As Double, ByVal userState As Object)
            If (Me.SubtractOperationCompleted Is Nothing) Then
                Me.SubtractOperationCompleted = AddressOf Me.OnSubtractOperationCompleted
            End If
            Me.InvokeAsync("Subtract", New Object() {n1, n2}, Me.SubtractOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubtractOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubtractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubtractCompleted(Me, New SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalculator/Multiply", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double
            Dim results() As Object = Me.Invoke("Multiply", New Object() {n1, n2})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Function BeginMultiply(ByVal n1 As Double, ByVal n2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Multiply", New Object() {n1, n2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMultiply(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MultiplyAsync(ByVal n1 As Double, ByVal n2 As Double)
            Me.MultiplyAsync(n1, n2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MultiplyAsync(ByVal n1 As Double, ByVal n2 As Double, ByVal userState As Object)
            If (Me.MultiplyOperationCompleted Is Nothing) Then
                Me.MultiplyOperationCompleted = AddressOf Me.OnMultiplyOperationCompleted
            End If
            Me.InvokeAsync("Multiply", New Object() {n1, n2}, Me.MultiplyOperationCompleted, userState)
        End Sub
        
        Private Sub OnMultiplyOperationCompleted(ByVal arg As Object)
            If (Not (Me.MultiplyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MultiplyCompleted(Me, New MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/ICalculator/Divide", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double
            Dim results() As Object = Me.Invoke("Divide", New Object() {n1, n2})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Function BeginDivide(ByVal n1 As Double, ByVal n2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Divide", New Object() {n1, n2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDivide(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DivideAsync(ByVal n1 As Double, ByVal n2 As Double)
            Me.DivideAsync(n1, n2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DivideAsync(ByVal n1 As Double, ByVal n2 As Double, ByVal userState As Object)
            If (Me.DivideOperationCompleted Is Nothing) Then
                Me.DivideOperationCompleted = AddressOf Me.OnDivideOperationCompleted
            End If
            Me.InvokeAsync("Divide", New Object() {n1, n2}, Me.DivideOperationCompleted, userState)
        End Sub
        
        Private Sub OnDivideOperationCompleted(ByVal arg As Object)
            If (Not (Me.DivideCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DivideCompleted(Me, New DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub AddCompletedEventHandler(ByVal sender As Object, ByVal e As AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub SubtractCompletedEventHandler(ByVal sender As Object, ByVal e As SubtractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubtractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub MultiplyCompletedEventHandler(ByVal sender As Object, ByVal e As MultiplyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MultiplyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")>  _
    Public Delegate Sub DivideCompletedEventHandler(ByVal sender As Object, ByVal e As DivideCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DivideCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
End Namespace
