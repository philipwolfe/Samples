<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright (c) Microsoft Corporation. All rights reserved -->
<configuration>
  <system.serviceModel>
    <services>
      <service behaviorConfiguration="routingConfiguration"
               name="System.ServiceModel.Routing.RoutingService">
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/routingservice/router" />
          </baseAddresses>
        </host>
        <!--Set up the inbound endpoints for the Routing Service-->
        <!--first create the general router endpoint-->
        <endpoint address="general"
                  binding="wsHttpBinding"
                  name="routerEndpoint"
                  contract="System.ServiceModel.Routing.IRequestReplyRouter" />
        <!--create a virtual endpoint for the the regular calculator service-->
        <endpoint address="regular/calculator"
                  binding="wsHttpBinding"
                  name="calculatorEndpoint"
                  contract="System.ServiceModel.Routing.IRequestReplyRouter" />
        <!--now create a virtual endpoint for the rounding calculator-->
        <endpoint address="rounding/calculator"
                  binding="wsHttpBinding"
                  name="roundingEndpoint"
                  contract="System.ServiceModel.Routing.IRequestReplyRouter" />

      </service>
    </services>
    <behaviors>
      <!--default routing service behavior definition-->
      <serviceBehaviors>
        <behavior name="routingConfiguration">
          <routing filterTableName="filterTable1" />
        </behavior>
      </serviceBehaviors>
    </behaviors>

    <client>
<!--set up the destination endpoints-->
      <endpoint name="regularCalcEndpoint"
                address="net.tcp://localhost:9090/servicemodelsamples/service/"
                binding="netTcpBinding"
                contract="*" />

      <endpoint name="roundingCalcEndpoint"
                address="net.tcp://localhost:8080/servicemodelsamples/service/"
                binding="netTcpBinding"
                contract="*" />
    </client>
    <routing>
      <!-- use the namespace table element to define a prefix for our custom namespace-->
      <namespaceTable>
        <add prefix="custom" namespace="http://my.custom.namespace/"/>
      </namespaceTable>
      <filters>
        <!--define the different message filters-->
        <!--define an xpath message filter to look for the custom header coming from the client-->
        <filter name="XPathFilter" filterType="XPath" filterData="sm:header()/custom:RoundingCalculator = 1"/>
        
        <!--define an endpoint name filter looking for messages that show up on the virtual regular calculator endpoint-->
        <filter name="EndpointNameFilter" filterType="EndpointName" filterData="calculatorEndpoint"/>
        
        <!--define a filter looking for messages that show up with the address prefix.  The corresponds to the rounding calc virtual endpoint-->
        <filter name="PrefixAddressFilter" filterType="PrefixEndpointAddress" filterData="http://localhost/routingservice/router/rounding/"/>
        
        <!--Set up the custom message filters.  In this example, we'll use the example round robin message filter, which alternates between the references-->
        <filter name="RoundRobinFilter1" filterType="Custom" customType="Microsoft.Samples.AdvancedFilters.RoutingServiceFilters.RoundRobinMessageFilter, RoutingService" filterData="group1"/>
        <filter name="RoundRobinFilter2" filterType="Custom" customType="Microsoft.Samples.AdvancedFilters.RoutingServiceFilters.RoundRobinMessageFilter, RoutingService" filterData="group1"/>
      </filters>
      <filterTables>
        <filterTable name="filterTable1">
            <!--add the filters to the message filter table-->
            <!--first look for the custom header, and if we find it, send the message to the rounding calc endpoint-->
            <add filterName="XPathFilter" endpointName="roundingCalcEndpoint" priority="2"/>
            
            <!--if the header wasn't there, send the message based on which virtual endpoint it arrived at-->
            <!--we determine this through the endpoint name, or through the address prefix-->
            <add filterName="EndpointNameFilter" endpointName="regularCalcEndpoint" priority="1"/>
            <add filterName="PrefixAddressFilter" endpointName="roundingCalcEndpoint" priority="1"/>
            
            <!--if none of the other filters have matched, this message showed up on the default router endpoint, with no custom header-->
            <!--round robin these requests between the two services-->
            <add filterName="RoundRobinFilter1" endpointName="regularCalcEndpoint" priority="0"/>
            <add filterName="RoundRobinFilter2" endpointName="roundingCalcEndpoint" priority="0"/>
        </filterTable>
      </filterTables>
    </routing>
  </system.serviceModel>
</configuration>
