<?xml version="1.0" encoding="utf-8" ?>
<!--
   Copyright (c) Microsoft Corporation.  All rights reserved.
-->
<configuration>

  <appSettings>
    <add key="bookDB"  value="BookDB.txt" />
    <add key="issuerCertDistinguishedName"  value="CN=BookStoreSTS.com" />
  </appSettings>

  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior name='bookStoreServiceBehavior'>
          <!--
          The serviceAuthorization behaviour allows one to configure how clients authorization is performed.
          This configuration registers an AuthorizationManager which will perform all authorization checks based on the
          credentials presented by the client.
          -->
          <serviceAuthorization serviceAuthorizationManagerType='Microsoft.Samples.Federation.BuyAuthorizationManager, BookStoreService' />
          <serviceCredentials>
            <!-- 
            The serviceCredentials behavior allows one to define a service certificate.
            A service certificate is used by a client to authenticate the service and provide message protection.
            This configuration references the "BookStoreService.com" certificate installed during setup of the sample.
            -->
            <serviceCertificate storeLocation='LocalMachine'
                                storeName='My'
                                x509FindType='FindBySubjectName'
                                findValue='BookStoreService.com' />
            <!-- 
            The serviceCredentials behavior allows one to define validation parameters for issued tokens.
            This configuration adds the "BookStoreSTS.com" certificate to a list of known certificates. This
            means that the service will accept tokens issued by "BookStoreSTS.com".
            -->
            <issuedTokenAuthentication>
              <!--Adds the allowed audience Uris that this application will accept. The BookStoreSTS will issue SAML token with
              this audience Uri. If a SAML token does not contain any of the allowed audience Uris from this list, the token will be rejected.-->
              <allowedAudienceUris>
                <add allowedAudienceUri='http://localhost/FederationSample/BookStoreService/store.svc/buy'/>
              </allowedAudienceUris>
              <knownCertificates>
                <add  storeLocation ='LocalMachine' 
                      storeName ='TrustedPeople'
                      x509FindType ='FindBySubjectName'
                      findValue ='BookStoreSTS.com' />
              </knownCertificates>
            </issuedTokenAuthentication>
          </serviceCredentials>
          <!-- 
          The serviceMetadata behavior allows one to enable metadata (e.g. WSDL, Policy) publishing.
          This configuration enables publishing of such data over HTTP GET.
          -->
          <serviceMetadata httpGetEnabled ='true'/>
        </behavior>
      </serviceBehaviors>
    </behaviors>


    <bindings>
      <wsFederationHttpBinding>
        <!-- This is the Service binding for the BuyBooks endpoint. It redirects clients to the BookStore STS -->
        <binding name='BuyBookBinding'>
          <security mode="Message">
            <message>
              <issuerMetadata address='http://localhost/FederationSample/BookStoreSTS/STS.svc/mex' >
                <!--
                The BookStore STS will, in all likelyhood, be running on a machine whose domain name
                is NOT BookStoreSTS.com, but will identify itself using a certificate containing 
                "BookStoreSTS.com" as its subject name. The identity configuration element here tells
                consumers of the service to expect a DNS name of "BookStoreSTS.com" when talking to 
                the BookStore STS.
                -->
                <identity>
                  <dns value ='BookStoreSTS.com'/>
                </identity>
              </issuerMetadata>
            </message>
          </security>
        </binding>
      </wsFederationHttpBinding>


      <wsHttpBinding>
        <!-- 
        This is the Service binding for the BrowseBooks endpoint. It is a standard wsHttpBinding 
        with security switched off
        -->
        <binding name='BrowseBookBinding'>
          <security mode='None' />
        </binding>
      </wsHttpBinding>

    </bindings>
    
    <services>
      <service name="Microsoft.Samples.Federation.BookStoreService"
					     behaviorConfiguration='bookStoreServiceBehavior'>
        <!-- 
        This is the HTTP endpoint that supports browsing for books. This endpoint does
        not require any security as anyone is allowed to browse for books, including anonymous
        users.
        -->
        <endpoint address="browse"
						      binding="wsHttpBinding"
						      bindingConfiguration='BrowseBookBinding'
						      contract="Microsoft.Samples.Federation.IBrowseBooks" />
        <!-- 
        This is the HTTP endpoint that supports buying books. This endpoint requires that clients
        authenticate using a token issued by the "BookStoreSTS.com" STS.        
        -->
        <endpoint address="buy"
						      binding="wsFederationHttpBinding"
						      bindingConfiguration='BuyBookBinding'
						      contract="Microsoft.Samples.Federation.IBuyBook" />

        <!-- 
        This is the HTTP endpoint that supports IMetadataExchange.
        -->
        <endpoint address="mex"
                  binding="mexHttpBinding" 
                  contract="IMetadataExchange" />

      </service>
    </services>

  </system.serviceModel>
</configuration>
