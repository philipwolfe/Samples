//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.20506.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        // CODEGEN: Generating message contract since the operation Add is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Add")]
        void Add(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Add request);
        
        // CODEGEN: Generating message contract since the operation Subtract is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Subtract")]
        void Subtract(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Subtract request);
        
        // CODEGEN: Generating message contract since the operation Multiply is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Multiply")]
        void Multiply(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Multiply request);
        
        // CODEGEN: Generating message contract since the operation Divide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Divide")]
        void Divide(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Divide request);
        
        // CODEGEN: Generating message contract since the operation Equals is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Equals", ReplyAction="http://tempuri.org/ICalculator/EqualsResponse")]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsResponse Equals(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsRequest request);
        
        // CODEGEN: Generating message contract since the operation Reset is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Reset")]
        void Reset(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Reset request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class Add {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<double> @double;
        
        public Add() {
        }
        
        public Add(System.Nullable<double> @double) {
            this.@double = @double;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class Subtract {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<double> @double;
        
        public Subtract() {
        }
        
        public Subtract(System.Nullable<double> @double) {
            this.@double = @double;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class Multiply {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<double> @double;
        
        public Multiply() {
        }
        
        public Multiply(System.Nullable<double> @double) {
            this.@double = @double;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class Divide {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<double> @double;
        
        public Divide() {
        }
        
        public Divide(System.Nullable<double> @double) {
            this.@double = @double;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EqualsRequest {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;
        
        public EqualsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EqualsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<double> @double;
        
        public EqualsResponse() {
        }
        
        public EqualsResponse(System.Nullable<double> @double) {
            this.@double = @double;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class Reset {
        [System.ServiceModel.MessageHeader]
        public int CalculatorId;
        
        public Reset() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator>, Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator {

        public int CalculatorId;

        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Add(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Add request) {
            base.Channel.Add(request);
        }
        
        public void Add(System.Nullable<double> @double) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Add inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Add();
            inValue.CalculatorId = this.CalculatorId;
            inValue.@double = @double;
            ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Add(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Subtract(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Subtract request) {
            base.Channel.Subtract(request);
        }
        
        public void Subtract(System.Nullable<double> @double) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Subtract inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Subtract();
            inValue.CalculatorId = this.CalculatorId;
            inValue.@double = @double;
            ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Subtract(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Multiply(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Multiply request) {
            base.Channel.Multiply(request);
        }
        
        public void Multiply(System.Nullable<double> @double) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Multiply inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Multiply();
            inValue.CalculatorId = this.CalculatorId;
            inValue.@double = @double;
            ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Multiply(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Divide(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Divide request) {
            base.Channel.Divide(request);
        }
        
        public void Divide(System.Nullable<double> @double) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Divide inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Divide();
            inValue.CalculatorId = this.CalculatorId;
            inValue.@double = @double;
            ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Divide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsResponse Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Equals(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsRequest request) {
            return base.Channel.Equals(request);
        }
        
        public System.Nullable<double> Equals() {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsRequest();
            inValue.CalculatorId = this.CalculatorId;
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.EqualsResponse retVal = ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Equals(inValue);
            return retVal.@double;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Reset(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Reset request) {
            base.Channel.Reset(request);
        }
        
        public void Reset() {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Reset inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.Reset();
            inValue.CalculatorId = this.CalculatorId;
            ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Reset(inValue);
        }
    }
}
